
touch-screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d67c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  0800d840  0800d840  0000e840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2b8  0800e2b8  0001023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2b8  0800e2b8  0000f2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2c0  0800e2c0  0001023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2c0  0800e2c0  0000f2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e2c4  0800e2c4  0000f2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800e2c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  2000023c  0800e504  0001023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  0800e504  00010ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9ba  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d9  00000000  00000000  0002ec26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  00032200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001672  00000000  00000000  00033e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f8c7  00000000  00000000  000354ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002276b  00000000  00000000  00064db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012834f  00000000  00000000  0008751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c00  00000000  00000000  001af8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001b84b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d824 	.word	0x0800d824

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	0800d824 	.word	0x0800d824

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <big>:
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

// convert a little endian 16 bit number to big endian
uint16_t big(uint16_t original) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	uint16_t result = original << 8;
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	81fb      	strh	r3, [r7, #14]
	result |= original >> 8;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	81fb      	strh	r3, [r7, #14]
	return result;
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <sendCommand>:

// send an SPI command in the correct format
void sendCommand(SPI_HandleTypeDef* spi, uint8_t commandByte, uint8_t *dataBytes, uint16_t numDataBytes) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	461a      	mov	r2, r3
 8000f00:	460b      	mov	r3, r1
 8000f02:	72fb      	strb	r3, [r7, #11]
 8000f04:	4613      	mov	r3, r2
 8000f06:	813b      	strh	r3, [r7, #8]
	//printf("Sending command: cmd %x, args %d\r\n", commandByte, numDataBytes);

	// first send the command byte
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET); // pull DC low
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <sendCommand+0x50>)
 8000f10:	f003 fed8 	bl	8004cc4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &commandByte, 1, 100); // write the byte
 8000f14:	f107 010b 	add.w	r1, r7, #11
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f007 ff19 	bl	8008d54 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET); // pull DC back high
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <sendCommand+0x50>)
 8000f2a:	f003 fecb 	bl	8004cc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, dataBytes, numDataBytes, 100);
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	2364      	movs	r3, #100	@ 0x64
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f007 ff0d 	bl	8008d54 <HAL_SPI_Transmit>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	48001400 	.word	0x48001400

08000f48 <sendBlock>:

// x1 <= x2, y1 <= y2
void sendBlock(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value) {
 8000f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f4c:	b08f      	sub	sp, #60	@ 0x3c
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	4608      	mov	r0, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	461a      	mov	r2, r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	817b      	strh	r3, [r7, #10]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	813b      	strh	r3, [r7, #8]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	466b      	mov	r3, sp
 8000f66:	461e      	mov	r6, r3
	uint32_t amount = (uint32_t)(x2-x1+1) * (uint32_t)(y2-y1+1); // amount of pixels to send
 8000f68:	893a      	ldrh	r2, [r7, #8]
 8000f6a:	897b      	ldrh	r3, [r7, #10]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	fb01 f303 	mul.w	r3, r1, r3
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff9f 	bl	8000ec8 <big>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	82bb      	strh	r3, [r7, #20]
 8000f8e:	893b      	ldrh	r3, [r7, #8]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff99 	bl	8000ec8 <big>
 8000f96:	4603      	mov	r3, r0
 8000f98:	82fb      	strh	r3, [r7, #22]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff93 	bl	8000ec8 <big>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	823b      	strh	r3, [r7, #16]
 8000fa6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff8c 	bl	8000ec8 <big>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	827b      	strh	r3, [r7, #18]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 8000fb4:	f107 0214 	add.w	r2, r7, #20
 8000fb8:	2304      	movs	r3, #4
 8000fba:	212a      	movs	r1, #42	@ 0x2a
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff ff99 	bl	8000ef4 <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 8000fc2:	f107 0210 	add.w	r2, r7, #16
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	212b      	movs	r1, #43	@ 0x2b
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff ff92 	bl	8000ef4 <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	212c      	movs	r1, #44	@ 0x2c
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff ff8c 	bl	8000ef4 <sendCommand>
	uint16_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8000fdc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000fe0:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t buffer[fullLength];
 8000fe2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fea:	b28b      	uxth	r3, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000ffe:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001002:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001006:	b28b      	uxth	r3, r1
 8001008:	2200      	movs	r2, #0
 800100a:	461c      	mov	r4, r3
 800100c:	4615      	mov	r5, r2
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	012b      	lsls	r3, r5, #4
 8001018:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800101c:	0122      	lsls	r2, r4, #4
 800101e:	460b      	mov	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	3307      	adds	r3, #7
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	ebad 0d03 	sub.w	sp, sp, r3
 800102c:	466b      	mov	r3, sp
 800102e:	3301      	adds	r3, #1
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < fullLength; i++) buffer[i] = big(value); // fill the buffer
 8001036:	2300      	movs	r3, #0
 8001038:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800103a:	e00d      	b.n	8001058 <sendBlock+0x110>
 800103c:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 800103e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff40 	bl	8000ec8 <big>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001052:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001054:	3301      	adds	r3, #1
 8001056:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001058:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800105a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800105c:	429a      	cmp	r2, r3
 800105e:	d3ed      	bcc.n	800103c <sendBlock+0xf4>
	uint32_t fullTransactions = amount / fullLength; // amount of full transactions to send
 8001060:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	61fb      	str	r3, [r7, #28]
	uint16_t weirdLength = amount % fullLength; // one transaction will be a different amount
 800106a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800106c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001072:	fb01 f202 	mul.w	r2, r1, r2
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	837b      	strh	r3, [r7, #26]
	if (weirdLength != 0) {
 800107a:	8b7b      	ldrh	r3, [r7, #26]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <sendBlock+0x148>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, weirdLength * 2, 100);
 8001080:	8b7b      	ldrh	r3, [r7, #26]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	6a39      	ldr	r1, [r7, #32]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f007 fe62 	bl	8008d54 <HAL_SPI_Transmit>
	}
	for (uint32_t i = 0; i < fullTransactions; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
 8001094:	e00a      	b.n	80010ac <sendBlock+0x164>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, fullLength * 2, 100);
 8001096:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	2364      	movs	r3, #100	@ 0x64
 800109e:	6a39      	ldr	r1, [r7, #32]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f007 fe57 	bl	8008d54 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80010a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a8:	3301      	adds	r3, #1
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80010ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3f0      	bcc.n	8001096 <sendBlock+0x14e>
 80010b4:	46b5      	mov	sp, r6
	}
}
 80010b6:	bf00      	nop
 80010b8:	373c      	adds	r7, #60	@ 0x3c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010c0 <sendCharacter>:

// (x, y) is the bottom left corner of the character
// size_x, size_y is magnification factor
void sendCharacter(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size_x, uint8_t size_y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	817b      	strh	r3, [r7, #10]
 80010d2:	460b      	mov	r3, r1
 80010d4:	813b      	strh	r3, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	71fb      	strb	r3, [r7, #7]
	// taken from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp#L1150-L1166
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80010da:	2300      	movs	r3, #0
 80010dc:	77fb      	strb	r3, [r7, #31]
 80010de:	e060      	b.n	80011a2 <sendCharacter+0xe2>
    	uint8_t line = font[c * 5 + i];
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	441a      	add	r2, r3
 80010e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a31      	ldr	r2, [pc, #196]	@ (80011b4 <sendCharacter+0xf4>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	77bb      	strb	r3, [r7, #30]
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	777b      	strb	r3, [r7, #29]
 80010f8:	e049      	b.n	800118e <sendCharacter+0xce>
    		if (line & 1) {
 80010fa:	7fbb      	ldrb	r3, [r7, #30]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03b      	beq.n	800117c <sendCharacter+0xbc>
    			uint16_t x1 = x + 7 * size_x - j * size_x;
 8001104:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800111c:	b299      	uxth	r1, r3
 800111e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001122:	b29b      	uxth	r3, r3
 8001124:	fb11 f303 	smulbb	r3, r1, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	837b      	strh	r3, [r7, #26]
    			uint16_t y1 = y + i * size_y;
 800112e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001132:	b29a      	uxth	r2, r3
 8001134:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001138:	b29b      	uxth	r3, r3
 800113a:	fb12 f303 	smulbb	r3, r2, r3
 800113e:	b29a      	uxth	r2, r3
 8001140:	893b      	ldrh	r3, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	833b      	strh	r3, [r7, #24]
    			uint16_t x2 = x1 + size_x - 1;
 8001146:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800114a:	b29a      	uxth	r2, r3
 800114c:	8b7b      	ldrh	r3, [r7, #26]
 800114e:	4413      	add	r3, r2
 8001150:	b29b      	uxth	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	82fb      	strh	r3, [r7, #22]
    			uint16_t y2 = y1 + size_y - 1;
 8001156:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800115a:	b29a      	uxth	r2, r3
 800115c:	8b3b      	ldrh	r3, [r7, #24]
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	82bb      	strh	r3, [r7, #20]
    			sendBlock(spi, x1, x2, y1, y2, color);
 8001166:	8b38      	ldrh	r0, [r7, #24]
 8001168:	8afa      	ldrh	r2, [r7, #22]
 800116a:	8b79      	ldrh	r1, [r7, #26]
 800116c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	8abb      	ldrh	r3, [r7, #20]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4603      	mov	r3, r0
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fee6 	bl	8000f48 <sendBlock>
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800117c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	777b      	strb	r3, [r7, #29]
 8001188:	7fbb      	ldrb	r3, [r7, #30]
 800118a:	085b      	lsrs	r3, r3, #1
 800118c:	77bb      	strb	r3, [r7, #30]
 800118e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001192:	2b07      	cmp	r3, #7
 8001194:	ddb1      	ble.n	80010fa <sendCharacter+0x3a>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001196:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	77fb      	strb	r3, [r7, #31]
 80011a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	dd9a      	ble.n	80010e0 <sendCharacter+0x20>
    		}
    	}
    }
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800d9d8 	.word	0x0800d9d8

080011b8 <sendString>:

void sendString(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char* s, uint16_t color, uint8_t size_x, uint8_t size_y) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af04      	add	r7, sp, #16
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	817b      	strh	r3, [r7, #10]
 80011c6:	4613      	mov	r3, r2
 80011c8:	813b      	strh	r3, [r7, #8]
	uint16_t width = (5 + 1) * size_y; // because character has 5 columns, +1 to add space between characters
 80011ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; s[i] != 0; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	e023      	b.n	8001228 <sendString+0x70>
		uint16_t offset = y + i * width;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	8aba      	ldrh	r2, [r7, #20]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	893b      	ldrh	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	827b      	strh	r3, [r7, #18]
		if (offset + width > 479) return; // off the end of the screen
 80011f2:	8a7a      	ldrh	r2, [r7, #18]
 80011f4:	8abb      	ldrh	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80011fc:	da1b      	bge.n	8001236 <sendString+0x7e>
		sendCharacter(spi, x, offset, s[i], color, size_x, size_y);
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	7818      	ldrb	r0, [r3, #0]
 8001206:	8a7a      	ldrh	r2, [r7, #18]
 8001208:	8979      	ldrh	r1, [r7, #10]
 800120a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	8c3b      	ldrh	r3, [r7, #32]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4603      	mov	r3, r0
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff4f 	bl	80010c0 <sendCharacter>
	for (uint8_t i = 0; s[i] != 0; i++) {
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	3301      	adds	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1d5      	bne.n	80011e0 <sendString+0x28>
 8001234:	e000      	b.n	8001238 <sendString+0x80>
		if (offset + width > 479) return; // off the end of the screen
 8001236:	bf00      	nop
	}
}
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <initialize_screen>:

void initialize_screen(SPI_HandleTypeDef* spi) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	printf("Starting initialization.\r\n");
 8001248:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <initialize_screen+0xa8>)
 800124a:	f00a fb7d 	bl	800b948 <puts>

	// hardware reset the display
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001254:	4825      	ldr	r0, [pc, #148]	@ (80012ec <initialize_screen+0xac>)
 8001256:	f003 fd35 	bl	8004cc4 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 800125a:	20fa      	movs	r0, #250	@ 0xfa
 800125c:	f002 f9ee 	bl	800363c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001266:	4821      	ldr	r0, [pc, #132]	@ (80012ec <initialize_screen+0xac>)
 8001268:	f003 fd2c 	bl	8004cc4 <HAL_GPIO_WritePin>

	uint8_t *addr = initd;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <initialize_screen+0xb0>)
 800126e:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 8001270:	e02c      	b.n	80012cc <initialize_screen+0x8c>
		x = *(addr++);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	60fa      	str	r2, [r7, #12]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 800127c:	7abb      	ldrb	r3, [r7, #10]
 800127e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001282:	727b      	strb	r3, [r7, #9]
		if (cmd != 0xFF) { // '255' is ignored
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	2bff      	cmp	r3, #255	@ 0xff
 8001288:	d015      	beq.n	80012b6 <initialize_screen+0x76>
		  if (x & 0x80) {  // If high bit set, numArgs is a delay time
 800128a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da06      	bge.n	80012a0 <initialize_screen+0x60>
			sendCommand(spi, cmd, NULL, 0);
 8001292:	7af9      	ldrb	r1, [r7, #11]
 8001294:	2300      	movs	r3, #0
 8001296:	2200      	movs	r2, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fe2b 	bl	8000ef4 <sendCommand>
 800129e:	e00a      	b.n	80012b6 <initialize_screen+0x76>
		  } else {
			sendCommand(spi, cmd, addr, numArgs);
 80012a0:	7a7b      	ldrb	r3, [r7, #9]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	7af9      	ldrb	r1, [r7, #11]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fe23 	bl	8000ef4 <sendCommand>
			addr += numArgs;
 80012ae:	7a7b      	ldrb	r3, [r7, #9]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
		  }
		}
		if (x & 0x80) {       // If high bit set...
 80012b6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da06      	bge.n	80012cc <initialize_screen+0x8c>
		  HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 80012be:	7a7a      	ldrb	r2, [r7, #9]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 f9b8 	bl	800363c <HAL_Delay>
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60fa      	str	r2, [r7, #12]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	72fb      	strb	r3, [r7, #11]
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ca      	bne.n	8001272 <initialize_screen+0x32>
		}
	}
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	0800d840 	.word	0x0800d840
 80012ec:	48001400 	.word	0x48001400
 80012f0:	20000000 	.word	0x20000000

080012f4 <draw>:

void draw(SPI_HandleTypeDef* spi) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
	printf("Sending pixels.\r\n");
 80012fc:	482b      	ldr	r0, [pc, #172]	@ (80013ac <draw+0xb8>)
 80012fe:	f00a fb23 	bl	800b948 <puts>

	const uint16_t yend = 479;
 8001302:	f240 13df 	movw	r3, #479	@ 0x1df
 8001306:	81fb      	strh	r3, [r7, #14]
	const uint16_t xend = 319;
 8001308:	f240 133f 	movw	r3, #319	@ 0x13f
 800130c:	81bb      	strh	r3, [r7, #12]

	// use https://rgbcolorpicker.com/565 to find pixel values
	sendBlock(spi, 0, xend, 0, yend, 0);
 800130e:	89ba      	ldrh	r2, [r7, #12]
 8001310:	2300      	movs	r3, #0
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	2100      	movs	r1, #0
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe13 	bl	8000f48 <sendBlock>
	sendBlock(spi, 25, 25+75, 50, yend-50, 0x2dab);
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	3b32      	subs	r3, #50	@ 0x32
 8001326:	b29b      	uxth	r3, r3
 8001328:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2332      	movs	r3, #50	@ 0x32
 8001332:	2264      	movs	r2, #100	@ 0x64
 8001334:	2119      	movs	r1, #25
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fe06 	bl	8000f48 <sendBlock>
	sendBlock(spi, 25+75+25, 25+75+25+75, 50, yend-50, 0x2dab);
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	3b32      	subs	r3, #50	@ 0x32
 8001340:	b29b      	uxth	r3, r3
 8001342:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2332      	movs	r3, #50	@ 0x32
 800134c:	22c8      	movs	r2, #200	@ 0xc8
 800134e:	217d      	movs	r1, #125	@ 0x7d
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fdf9 	bl	8000f48 <sendBlock>

	sendString(spi, xend-70, 20, "Delivering for?", 0xffff, 5, 5);
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	3b46      	subs	r3, #70	@ 0x46
 800135a:	b299      	uxth	r1, r3
 800135c:	2305      	movs	r3, #5
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2305      	movs	r3, #5
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <draw+0xbc>)
 800136c:	2214      	movs	r2, #20
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff22 	bl	80011b8 <sendString>
	sendString(spi, 25+75+25 + 10, 50 + 10, "B. Obama", 0x0, 5, 5);
 8001374:	2305      	movs	r3, #5
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2305      	movs	r3, #5
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <draw+0xc0>)
 8001382:	223c      	movs	r2, #60	@ 0x3c
 8001384:	2187      	movs	r1, #135	@ 0x87
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff16 	bl	80011b8 <sendString>
	sendString(spi, 25 + 10, 50 + 10, "Benton E.", 0x0, 5, 5);
 800138c:	2305      	movs	r3, #5
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	2305      	movs	r3, #5
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	2300      	movs	r3, #0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <draw+0xc4>)
 800139a:	223c      	movs	r2, #60	@ 0x3c
 800139c:	2123      	movs	r1, #35	@ 0x23
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff0a 	bl	80011b8 <sendString>
	//sendBlock(spi, 0, 0, 0, 0, 0x17e0);
	//sendBlock(spi, xend, xend, yend, yend, 0xf880);
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800d85c 	.word	0x0800d85c
 80013b0:	0800d870 	.word	0x0800d870
 80013b4:	0800d880 	.word	0x0800d880
 80013b8:	0800d88c 	.word	0x0800d88c

080013bc <writeRegister8>:
#include "touch-defines.h"

// plan is to try stmpe. if it flops, switch to manual
// i2c1_sda is PB9, i2c1_scl is PB8

void writeRegister8(I2C_HandleTypeDef* i2c, uint8_t reg, uint8_t value){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
 80013c8:	4613      	mov	r3, r2
 80013ca:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {reg, value};
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	733b      	strb	r3, [r7, #12]
 80013d0:	78bb      	ldrb	r3, [r7, #2]
 80013d2:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, buffer, 2, 1000);
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2302      	movs	r3, #2
 80013e0:	2182      	movs	r1, #130	@ 0x82
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 fd3a 	bl	8004e5c <HAL_I2C_Master_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <writeRegister8+0x40>
		printf("I2C write to STMPE failed with %d.\r\n", status);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4803      	ldr	r0, [pc, #12]	@ (8001404 <writeRegister8+0x48>)
 80013f8:	f00a fa3e 	bl	800b878 <iprintf>
	}
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	0800d898 	.word	0x0800d898

08001408 <readRegister8>:

uint8_t readRegister8(I2C_HandleTypeDef* i2c, uint8_t reg) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
	// problem is don't know what restart is
	// You are supposed to i2c write the address, then do an empty i2c read
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, &reg, 1, 1000);
 8001414:	1cfa      	adds	r2, r7, #3
 8001416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2182      	movs	r1, #130	@ 0x82
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f003 fd1b 	bl	8004e5c <HAL_I2C_Master_Transmit>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <readRegister8+0x32>
		printf("I2C write (for the purpose of reading) to STMPE failed with %d.\r\n", status);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	4619      	mov	r1, r3
 8001434:	480f      	ldr	r0, [pc, #60]	@ (8001474 <readRegister8+0x6c>)
 8001436:	f00a fa1f 	bl	800b878 <iprintf>
	}

	uint8_t result = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
	// TODO: maybe the byte value here should be 1
	status = HAL_I2C_Master_Receive(i2c, (STMPE_ADDR << 1) | 1, &result, 1, 1000);
 800143e:	f107 020e 	add.w	r2, r7, #14
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	2183      	movs	r1, #131	@ 0x83
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f003 fe1d 	bl	800508c <HAL_I2C_Master_Receive>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <readRegister8+0x62>
		printf("I2C read from STMPE failed with %d.\r\n", status);
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <readRegister8+0x70>)
 8001462:	f00a fa09 	bl	800b878 <iprintf>
		return 0;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <readRegister8+0x64>
	}
	return result;
 800146a:	7bbb      	ldrb	r3, [r7, #14]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800d8c0 	.word	0x0800d8c0
 8001478:	0800d904 	.word	0x0800d904

0800147c <bufferEmpty>:
// 1 is true, 0 is false
uint8_t touched(I2C_HandleTypeDef* i2c) {
	return readRegister8(i2c, STMPE_TSC_CTRL) & 0x80;
}

uint8_t bufferEmpty(I2C_HandleTypeDef* i2c) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	return (readRegister8(i2c, STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
 8001484:	214b      	movs	r1, #75	@ 0x4b
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffbe 	bl	8001408 <readRegister8>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <readPosition>:

void readPosition(I2C_HandleTypeDef* i2c, uint16_t *x, uint16_t *y, uint8_t *z) {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  uint8_t data[4];

  for (uint8_t i = 0; i < 4; i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
 80014ae:	e00e      	b.n	80014ce <readPosition+0x32>
    data[i] = readRegister8(i2c, 0xD7);
 80014b0:	7dfc      	ldrb	r4, [r7, #23]
 80014b2:	21d7      	movs	r1, #215	@ 0xd7
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ffa7 	bl	8001408 <readRegister8>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	f104 0318 	add.w	r3, r4, #24
 80014c2:	443b      	add	r3, r7
 80014c4:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (uint8_t i = 0; i < 4; i++) {
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	3301      	adds	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d9ed      	bls.n	80014b0 <readPosition+0x14>
  }
  *x = data[0];
 80014d4:	7c3b      	ldrb	r3, [r7, #16]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	801a      	strh	r2, [r3, #0]
  *x <<= 4;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	801a      	strh	r2, [r3, #0]
  *x |= (data[1] >> 4);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	7c7a      	ldrb	r2, [r7, #17]
 80014ee:	0912      	lsrs	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	801a      	strh	r2, [r3, #0]
  *y = data[1] & 0x0F;
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	801a      	strh	r2, [r3, #0]
  *y <<= 8;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b29a      	uxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	801a      	strh	r2, [r3, #0]
  *y |= data[2];
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	7cba      	ldrb	r2, [r7, #18]
 8001518:	4313      	orrs	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	801a      	strh	r2, [r3, #0]
  *z = data[3];
 8001520:	7cfa      	ldrb	r2, [r7, #19]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}

0800152e <map>:

// from: https://github.com/arduino/ArduinoCore-API/blob/0c853c5cded2768122fae258d42b2b4c06cdb3b1/api/Common.cpp
uint16_t map(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	1a8a      	subs	r2, r1, r2
 8001548:	fb03 f202 	mul.w	r2, r3, r2
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	fb92 f3f3 	sdiv	r3, r2, r3
 8001556:	b29a      	uxth	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29b      	uxth	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <within>:

uint8_t within(uint16_t x, uint16_t y, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 800156c:	b490      	push	{r4, r7}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	803b      	strh	r3, [r7, #0]
	return (x > x1) && (x < x2) && (y > y1) && (y < y2);
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	429a      	cmp	r2, r3
 8001590:	d90d      	bls.n	80015ae <within+0x42>
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	883b      	ldrh	r3, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d209      	bcs.n	80015ae <within+0x42>
 800159a:	88ba      	ldrh	r2, [r7, #4]
 800159c:	8a3b      	ldrh	r3, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d905      	bls.n	80015ae <within+0x42>
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8abb      	ldrh	r3, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d201      	bcs.n	80015ae <within+0x42>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <within+0x44>
 80015ae:	2300      	movs	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc90      	pop	{r4, r7}
 80015ba:	4770      	bx	lr

080015bc <touchHook>:

const uint16_t yend = 479;
const uint16_t xend = 319;
void touchHook(I2C_HandleTypeDef* i2c) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
	writeRegister8(i2c, STMPE_INT_STA, 0xFF);
 80015c4:	22ff      	movs	r2, #255	@ 0xff
 80015c6:	210b      	movs	r1, #11
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fef7 	bl	80013bc <writeRegister8>
	uint16_t x, y;
	uint8_t z;

	// clear the buffer and take the last thing from the buffer
	while (!bufferEmpty(i2c)) {
 80015ce:	e008      	b.n	80015e2 <touchHook+0x26>
		readPosition(i2c, &x, &y, &z);
 80015d0:	f107 030b 	add.w	r3, r7, #11
 80015d4:	f107 020c 	add.w	r2, r7, #12
 80015d8:	f107 010e 	add.w	r1, r7, #14
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff5d 	bl	800149c <readPosition>
	while (!bufferEmpty(i2c)) {
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff4a 	bl	800147c <bufferEmpty>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <touchHook+0x14>
	}

	x = map(x, 3520, 750, 0, 319);
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f240 133f 	movw	r3, #319	@ 0x13f
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80015fe:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 8001602:	f7ff ff94 	bl	800152e <map>
 8001606:	4603      	mov	r3, r0
 8001608:	81fb      	strh	r3, [r7, #14]
	y = map(y, 3700, 750, 0, 479);
 800160a:	89bb      	ldrh	r3, [r7, #12]
 800160c:	4618      	mov	r0, r3
 800160e:	f240 13df 	movw	r3, #479	@ 0x1df
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800161a:	f640 6174 	movw	r1, #3700	@ 0xe74
 800161e:	f7ff ff86 	bl	800152e <map>
 8001622:	4603      	mov	r3, r0
 8001624:	81bb      	strh	r3, [r7, #12]

	if (within(x, y, 25, 100, 50, yend-50)) {
 8001626:	89f8      	ldrh	r0, [r7, #14]
 8001628:	89b9      	ldrh	r1, [r7, #12]
 800162a:	f240 13df 	movw	r3, #479	@ 0x1df
 800162e:	3b32      	subs	r3, #50	@ 0x32
 8001630:	b29b      	uxth	r3, r3
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2332      	movs	r3, #50	@ 0x32
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	2219      	movs	r2, #25
 800163c:	f7ff ff96 	bl	800156c <within>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <touchHook+0x9a>
		printf("Got a touch: (%d, %d) (within the bottom button)\r\n", x, y);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	4619      	mov	r1, r3
 800164a:	89bb      	ldrh	r3, [r7, #12]
 800164c:	461a      	mov	r2, r3
 800164e:	480f      	ldr	r0, [pc, #60]	@ (800168c <touchHook+0xd0>)
 8001650:	f00a f912 	bl	800b878 <iprintf>
	} else if (within(x, y, 125, 200, 50, yend-50)) {
		printf("Got a touch: (%d, %d) (within the top button)\r\n", x, y);
	}
}
 8001654:	e016      	b.n	8001684 <touchHook+0xc8>
	} else if (within(x, y, 125, 200, 50, yend-50)) {
 8001656:	89f8      	ldrh	r0, [r7, #14]
 8001658:	89b9      	ldrh	r1, [r7, #12]
 800165a:	f240 13df 	movw	r3, #479	@ 0x1df
 800165e:	3b32      	subs	r3, #50	@ 0x32
 8001660:	b29b      	uxth	r3, r3
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2332      	movs	r3, #50	@ 0x32
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	23c8      	movs	r3, #200	@ 0xc8
 800166a:	227d      	movs	r2, #125	@ 0x7d
 800166c:	f7ff ff7e 	bl	800156c <within>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <touchHook+0xc8>
		printf("Got a touch: (%d, %d) (within the top button)\r\n", x, y);
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	4619      	mov	r1, r3
 800167a:	89bb      	ldrh	r3, [r7, #12]
 800167c:	461a      	mov	r2, r3
 800167e:	4804      	ldr	r0, [pc, #16]	@ (8001690 <touchHook+0xd4>)
 8001680:	f00a f8fa 	bl	800b878 <iprintf>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0800d92c 	.word	0x0800d92c
 8001690:	0800d960 	.word	0x0800d960

08001694 <initialize_touch>:

void initialize_touch(I2C_HandleTypeDef* i2c) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	// TODO: only thing I can think of is that you need to read the version here for some reason
	// the problem is that I need to do some sort of request response thing, for read
	// it is a write then request

	printf("Initializing touch.\r\n");
 800169c:	483b      	ldr	r0, [pc, #236]	@ (800178c <initialize_touch+0xf8>)
 800169e:	f00a f953 	bl	800b948 <puts>

	  uint16_t v;
	  v = readRegister8(i2c, 0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff feaf 	bl	8001408 <readRegister8>
 80016aa:	4603      	mov	r3, r0
 80016ac:	81bb      	strh	r3, [r7, #12]
	  v <<= 8;
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	81bb      	strh	r3, [r7, #12]
	  v |= readRegister8(i2c, 1);
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fea6 	bl	8001408 <readRegister8>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	89bb      	ldrh	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	81bb      	strh	r3, [r7, #12]
	  printf("STMPE version is 0x%x\r\n", v);
 80016c6:	89bb      	ldrh	r3, [r7, #12]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4831      	ldr	r0, [pc, #196]	@ (8001790 <initialize_touch+0xfc>)
 80016cc:	f00a f8d4 	bl	800b878 <iprintf>

	  writeRegister8(i2c, STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
 80016d0:	2202      	movs	r2, #2
 80016d2:	2103      	movs	r1, #3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fe71 	bl	80013bc <writeRegister8>

	  HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f001 ffae 	bl	800363c <HAL_Delay>

	  for (uint8_t i = 0; i < 65; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e007      	b.n	80016f6 <initialize_touch+0x62>
	    readRegister8(i2c, i);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fe8c 	bl	8001408 <readRegister8>
	  for (uint8_t i = 0; i < 65; i++) {
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	3301      	adds	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b40      	cmp	r3, #64	@ 0x40
 80016fa:	d9f4      	bls.n	80016e6 <initialize_touch+0x52>
	  }

	  writeRegister8(i2c, STMPE_SYS_CTRL2, 0x0); // turn on clocks!
 80016fc:	2200      	movs	r2, #0
 80016fe:	2104      	movs	r1, #4
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fe5b 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CTRL,
 8001706:	2201      	movs	r2, #1
 8001708:	2140      	movs	r1, #64	@ 0x40
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe56 	bl	80013bc <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(i2c, STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
 8001710:	2201      	movs	r2, #1
 8001712:	210a      	movs	r1, #10
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe51 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
 800171a:	2260      	movs	r2, #96	@ 0x60
 800171c:	2120      	movs	r1, #32
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe4c 	bl	80013bc <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(i2c, STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
 8001724:	2202      	movs	r2, #2
 8001726:	2121      	movs	r1, #33	@ 0x21
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fe47 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
 800172e:	22a4      	movs	r2, #164	@ 0xa4
 8001730:	2141      	movs	r1, #65	@ 0x41
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fe42 	bl	80013bc <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(i2c, STMPE_TSC_FRACTION_Z, 0x6);
 8001738:	2206      	movs	r2, #6
 800173a:	2156      	movs	r1, #86	@ 0x56
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fe3d 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_TH, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	214a      	movs	r1, #74	@ 0x4a
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe38 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
 800174c:	2201      	movs	r2, #1
 800174e:	214b      	movs	r1, #75	@ 0x4b
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fe33 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, 0); // unreset
 8001756:	2200      	movs	r2, #0
 8001758:	214b      	movs	r1, #75	@ 0x4b
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fe2e 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
 8001760:	2201      	movs	r2, #1
 8001762:	2158      	movs	r1, #88	@ 0x58
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe29 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_STA, 0xFF); // reset all ints
 800176a:	22ff      	movs	r2, #255	@ 0xff
 800176c:	210b      	movs	r1, #11
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe24 	bl	80013bc <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_CTRL,
 8001774:	2203      	movs	r2, #3
 8001776:	2109      	movs	r1, #9
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fe1f 	bl	80013bc <writeRegister8>
	                 STMPE_INT_CTRL_POL_LOW | STMPE_INT_CTRL_EDGE | STMPE_INT_CTRL_ENABLE);

	  printf("Finished touch setup.\r\n");
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <initialize_touch+0x100>)
 8001780:	f00a f8e2 	bl	800b948 <puts>
//			  readPosition(i2c, &x, &y, &z);
//			  //printf("yes touch: (%d, %d, %d)\r", x, y, z);
//			  //printf("no  touch: \r");
//		  }
//	  }
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	0800d990 	.word	0x0800d990
 8001790:	0800d9a8 	.word	0x0800d9a8
 8001794:	0800d9c0 	.word	0x0800d9c0

08001798 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
	touchHook(&hi2c1);
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <HAL_GPIO_EXTI_Callback+0x18>)
 80017a4:	f7ff ff0a 	bl	80015bc <touchHook>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000318 	.word	0x20000318

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f001 fecb 	bl	8003552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f838 	bl	8001830 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017c0:	f000 f898 	bl	80018f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f000 fef8 	bl	80025b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017c8:	f000 f8c8 	bl	800195c <MX_ADC1_Init>
  MX_COMP1_Init();
 80017cc:	f000 f92a 	bl	8001a24 <MX_COMP1_Init>
  MX_COMP2_Init();
 80017d0:	f000 f956 	bl	8001a80 <MX_COMP2_Init>
  MX_I2C1_Init();
 80017d4:	f000 f980 	bl	8001ad8 <MX_I2C1_Init>
  MX_I2C2_SMBUS_Init();
 80017d8:	f000 f9be 	bl	8001b58 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 80017dc:	f000 f9fe 	bl	8001bdc <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80017e0:	f000 fa48 	bl	8001c74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017e4:	f000 fa94 	bl	8001d10 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 80017e8:	f000 fade 	bl	8001da8 <MX_SAI1_Init>
  MX_SAI2_Init();
 80017ec:	f000 fb74 	bl	8001ed8 <MX_SAI2_Init>
  MX_SPI1_Init();
 80017f0:	f000 fbda 	bl	8001fa8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80017f4:	f000 fc16 	bl	8002024 <MX_SPI3_Init>
  MX_TIM1_Init();
 80017f8:	f000 fc52 	bl	80020a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017fc:	f000 fd20 	bl	8002240 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001800:	f000 fd82 	bl	8002308 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001804:	f000 fde6 	bl	80023d4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001808:	f000 fe4a 	bl	80024a0 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 800180c:	f000 fecc 	bl	80025a8 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  initialize_screen(&hspi1);
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <main+0x74>)
 8001812:	f7ff fd15 	bl	8001240 <initialize_screen>
  draw(&hspi1);
 8001816:	4804      	ldr	r0, [pc, #16]	@ (8001828 <main+0x74>)
 8001818:	f7ff fd6c 	bl	80012f4 <draw>
  initialize_touch(&hi2c1);
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <main+0x78>)
 800181e:	f7ff ff39 	bl	8001694 <initialize_touch>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <main+0x6e>
 8001826:	bf00      	nop
 8001828:	20000734 	.word	0x20000734
 800182c:	20000318 	.word	0x20000318

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	@ 0x58
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2244      	movs	r2, #68	@ 0x44
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00a f962 	bl	800bb08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001852:	2000      	movs	r0, #0
 8001854:	f004 f86a 	bl	800592c <HAL_PWREx_ControlVoltageScaling>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800185e:	f000 ffb3 	bl	80027c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001862:	f004 f833 	bl	80058cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001866:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <SystemClock_Config+0xc0>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186c:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <SystemClock_Config+0xc0>)
 800186e:	f023 0318 	bic.w	r3, r3, #24
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001876:	2314      	movs	r3, #20
 8001878:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800187e:	2301      	movs	r3, #1
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001886:	2360      	movs	r3, #96	@ 0x60
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188a:	2302      	movs	r3, #2
 800188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800188e:	2301      	movs	r3, #1
 8001890:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001896:	233c      	movs	r3, #60	@ 0x3c
 8001898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f8f2 	bl	8005a94 <HAL_RCC_OscConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018b6:	f000 ff87 	bl	80027c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ba:	230f      	movs	r3, #15
 80018bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018be:	2303      	movs	r3, #3
 80018c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	2105      	movs	r1, #5
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fcf8 	bl	80062c8 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80018de:	f000 ff73 	bl	80027c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018e2:	f006 fa01 	bl	8007ce8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	@ 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a6      	sub	sp, #152	@ 0x98
 80018f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2294      	movs	r2, #148	@ 0x94
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00a f901 	bl	800bb08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8001906:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800190a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800190c:	2300      	movs	r3, #0
 800190e:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001910:	2300      	movs	r3, #0
 8001912:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001914:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800191c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001920:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800192a:	2310      	movs	r3, #16
 800192c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800192e:	2302      	movs	r3, #2
 8001930:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <PeriphCommonClock_Config+0x64>)
 800193c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f004 ff7f 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800194c:	f000 ff3c 	bl	80027c8 <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3798      	adds	r7, #152	@ 0x98
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	01110000 	.word	0x01110000

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001974:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <MX_ADC1_Init+0xc0>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197e:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800198a:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001992:	2204      	movs	r2, #4
 8001994:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001998:	2200      	movs	r2, #0
 800199a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 80019d4:	f001 fff6 	bl	80039c4 <HAL_ADC_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019de:	f000 fef3 	bl	80027c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <MX_ADC1_Init+0xc4>)
 80019e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e6:	2306      	movs	r3, #6
 80019e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019ee:	237f      	movs	r3, #127	@ 0x7f
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f2:	2304      	movs	r3, #4
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_ADC1_Init+0xbc>)
 8001a00:	f002 f926 	bl	8003c50 <HAL_ADC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a0a:	f000 fedd 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000258 	.word	0x20000258
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	04300002 	.word	0x04300002

08001a24 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <MX_COMP1_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <MX_COMP1_Init+0x58>)
 8001a32:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_COMP1_Init+0x50>)
 8001a60:	f002 fd9a 	bl	8004598 <HAL_COMP_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001a6a:	f000 fead 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200002c0 	.word	0x200002c0
 8001a78:	40010200 	.word	0x40010200
 8001a7c:	00800030 	.word	0x00800030

08001a80 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <MX_COMP2_Init+0x54>)
 8001a88:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001a8c:	2270      	movs	r2, #112	@ 0x70
 8001a8e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_COMP2_Init+0x50>)
 8001abc:	f002 fd6c 	bl	8004598 <HAL_COMP_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001ac6:	f000 fe7f 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002ec 	.word	0x200002ec
 8001ad4:	40010204 	.word	0x40010204

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <MX_I2C1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <MX_I2C1_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b14:	f003 f906 	bl	8004d24 <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fe53 	bl	80027c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b26:	f003 fe39 	bl	800579c <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fe4a 	bl	80027c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b38:	f003 fe7b 	bl	8005832 <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fe41 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000318 	.word	0x20000318
 8001b50:	40005400 	.word	0x40005400
 8001b54:	307075b1 	.word	0x307075b1

08001b58 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd4 <MX_I2C2_SMBUS_Init+0x7c>)
 8001b60:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x307075B1;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b64:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd8 <MX_I2C2_SMBUS_Init+0x80>)
 8001b66:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b70:	2202      	movs	r2, #2
 8001b72:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus2.Init.SMBusTimeout = 0x000085B8;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001ba6:	f248 52b8 	movw	r2, #34232	@ 0x85b8
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8001bac:	4808      	ldr	r0, [pc, #32]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001bae:	f006 ff23 	bl	80089f8 <HAL_SMBUS_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001bb8:	f000 fe06 	bl	80027c8 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <MX_I2C2_SMBUS_Init+0x78>)
 8001bbe:	f006 ffd3 	bl	8008b68 <HAL_SMBUS_EnableAlert_IT>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001bc8:	f000 fdfe 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000036c 	.word	0x2000036c
 8001bd4:	40005800 	.word	0x40005800
 8001bd8:	307075b1 	.word	0x307075b1

08001bdc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001be2:	4a23      	ldr	r2, [pc, #140]	@ (8001c70 <MX_LPUART1_UART_Init+0x94>)
 8001be4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001be8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c18:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c24:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c26:	f008 fa17 	bl	800a058 <HAL_UART_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c30:	f000 fdca 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c34:	2100      	movs	r1, #0
 8001c36:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c38:	f009 f83a 	bl	800acb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c42:	f000 fdc1 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c46:	2100      	movs	r1, #0
 8001c48:	4808      	ldr	r0, [pc, #32]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c4a:	f009 f86f 	bl	800ad2c <HAL_UARTEx_SetRxFifoThreshold>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c54:	f000 fdb8 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <MX_LPUART1_UART_Init+0x90>)
 8001c5a:	f008 fff0 	bl	800ac3e <HAL_UARTEx_DisableFifoMode>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c64:	f000 fdb0 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200003bc 	.word	0x200003bc
 8001c70:	40008000 	.word	0x40008000

08001c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c7a:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <MX_USART2_UART_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001ca0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ca4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cbe:	4812      	ldr	r0, [pc, #72]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cc0:	f008 f9ca 	bl	800a058 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 fd7d 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cd2:	f008 ffed 	bl	800acb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001cdc:	f000 fd74 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4809      	ldr	r0, [pc, #36]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001ce4:	f009 f822 	bl	800ad2c <HAL_UARTEx_SetRxFifoThreshold>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 fd6b 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_USART2_UART_Init+0x94>)
 8001cf4:	f008 ffa3 	bl	800ac3e <HAL_UARTEx_DisableFifoMode>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001cfe:	f000 fd63 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000450 	.word	0x20000450
 8001d0c:	40004400 	.word	0x40004400

08001d10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d14:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <MX_USART3_UART_Init+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d5a:	f008 f97d 	bl	800a058 <HAL_UART_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d64:	f000 fd30 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d6c:	f008 ffa0 	bl	800acb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d76:	f000 fd27 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d7e:	f008 ffd5 	bl	800ad2c <HAL_UARTEx_SetRxFifoThreshold>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f000 fd1e 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_USART3_UART_Init+0x90>)
 8001d8e:	f008 ff56 	bl	800ac3e <HAL_UARTEx_DisableFifoMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 fd16 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200004e4 	.word	0x200004e4
 8001da4:	40004800 	.word	0x40004800

08001da8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001dac:	4b45      	ldr	r3, [pc, #276]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dae:	4a46      	ldr	r2, [pc, #280]	@ (8001ec8 <MX_SAI1_Init+0x120>)
 8001db0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001db2:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001db8:	4b42      	ldr	r3, [pc, #264]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dc0:	2240      	movs	r2, #64	@ 0x40
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ddc:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001de2:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001de8:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dee:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001df0:	4a36      	ldr	r2, [pc, #216]	@ (8001ecc <MX_SAI1_Init+0x124>)
 8001df2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df4:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dfa:	4b32      	ldr	r3, [pc, #200]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e00:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e06:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e24:	2208      	movs	r2, #8
 8001e26:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001e28:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e34:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001e40:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001e58:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <MX_SAI1_Init+0x11c>)
 8001e5a:	f006 fa81 	bl	8008360 <HAL_SAI_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001e64:	f000 fcb0 	bl	80027c8 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed4 <MX_SAI1_Init+0x12c>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e74:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <MX_SAI1_Init+0x124>)
 8001e90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001eaa:	2302      	movs	r3, #2
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <MX_SAI1_Init+0x128>)
 8001eb2:	f006 fa23 	bl	80082fc <HAL_SAI_InitProtocol>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8001ebc:	f000 fc84 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000578 	.word	0x20000578
 8001ec8:	40015424 	.word	0x40015424
 8001ecc:	0002ee00 	.word	0x0002ee00
 8001ed0:	2000060c 	.word	0x2000060c
 8001ed4:	40015404 	.word	0x40015404

08001ed8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001ede:	4a30      	ldr	r2, [pc, #192]	@ (8001fa0 <MX_SAI2_Init+0xc8>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001eee:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001ef0:	2240      	movs	r2, #64	@ 0x40
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ef4:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001efa:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f20:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <MX_SAI2_Init+0xcc>)
 8001f22:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001f44:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f54:	2208      	movs	r2, #8
 8001f56:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f64:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	@ (8001f9c <MX_SAI2_Init+0xc4>)
 8001f8a:	f006 f9e9 	bl	8008360 <HAL_SAI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001f94:	f000 fc18 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200006a0 	.word	0x200006a0
 8001fa0:	40015804 	.word	0x40015804
 8001fa4:	0002ee00 	.word	0x0002ee00

08001fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <MX_SPI1_Init+0x78>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fde:	2210      	movs	r2, #16
 8001fe0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <MX_SPI1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	@ (800201c <MX_SPI1_Init+0x74>)
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <MX_SPI1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <MX_SPI1_Init+0x74>)
 8002002:	2208      	movs	r2, #8
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_SPI1_Init+0x74>)
 8002008:	f006 fe01 	bl	8008c0e <HAL_SPI_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002012:	f000 fbd9 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000734 	.word	0x20000734
 8002020:	40013000 	.word	0x40013000

08002024 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_SPI3_Init+0x74>)
 800202a:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <MX_SPI3_Init+0x78>)
 800202c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002030:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002034:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800203c:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <MX_SPI3_Init+0x74>)
 800203e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002042:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204a:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <MX_SPI3_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002056:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <MX_SPI3_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205e:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <MX_SPI3_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002072:	2207      	movs	r2, #7
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <MX_SPI3_Init+0x74>)
 800207e:	2208      	movs	r2, #8
 8002080:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_SPI3_Init+0x74>)
 8002084:	f006 fdc3 	bl	8008c0e <HAL_SPI_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800208e:	f000 fb9b 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000798 	.word	0x20000798
 800209c:	40003c00 	.word	0x40003c00

080020a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b098      	sub	sp, #96	@ 0x60
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80020b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	222c      	movs	r2, #44	@ 0x2c
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f009 fd15 	bl	800bb08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020de:	4b56      	ldr	r3, [pc, #344]	@ (8002238 <MX_TIM1_Init+0x198>)
 80020e0:	4a56      	ldr	r2, [pc, #344]	@ (800223c <MX_TIM1_Init+0x19c>)
 80020e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020e4:	4b54      	ldr	r3, [pc, #336]	@ (8002238 <MX_TIM1_Init+0x198>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <MX_TIM1_Init+0x198>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020f0:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <MX_TIM1_Init+0x198>)
 80020f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002238 <MX_TIM1_Init+0x198>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002238 <MX_TIM1_Init+0x198>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <MX_TIM1_Init+0x198>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800210a:	484b      	ldr	r0, [pc, #300]	@ (8002238 <MX_TIM1_Init+0x198>)
 800210c:	f007 f8fc 	bl	8009308 <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002116:	f000 fb57 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002126:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800212a:	4619      	mov	r1, r3
 800212c:	4842      	ldr	r0, [pc, #264]	@ (8002238 <MX_TIM1_Init+0x198>)
 800212e:	f007 fdc7 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002138:	f000 fb46 	bl	80027c8 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800213c:	2301      	movs	r3, #1
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002140:	2301      	movs	r3, #1
 8002142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002144:	2300      	movs	r3, #0
 8002146:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002148:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	4839      	ldr	r0, [pc, #228]	@ (8002238 <MX_TIM1_Init+0x198>)
 8002152:	f007 febb 	bl	8009ecc <HAL_TIMEx_ConfigBreakInput>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800215c:	f000 fb34 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8002160:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002164:	461a      	mov	r2, r3
 8002166:	2102      	movs	r1, #2
 8002168:	4833      	ldr	r0, [pc, #204]	@ (8002238 <MX_TIM1_Init+0x198>)
 800216a:	f007 feaf 	bl	8009ecc <HAL_TIMEx_ConfigBreakInput>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002174:	f000 fb28 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	2360      	movs	r3, #96	@ 0x60
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002184:	2300      	movs	r3, #0
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	4826      	ldr	r0, [pc, #152]	@ (8002238 <MX_TIM1_Init+0x198>)
 800219e:	f007 f90b 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80021a8:	f000 fb0e 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b0:	2204      	movs	r2, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4820      	ldr	r0, [pc, #128]	@ (8002238 <MX_TIM1_Init+0x198>)
 80021b6:	f007 f8ff 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80021c0:	f000 fb02 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c8:	2208      	movs	r2, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	481a      	ldr	r0, [pc, #104]	@ (8002238 <MX_TIM1_Init+0x198>)
 80021ce:	f007 f8f3 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80021d8:	f000 faf6 	bl	80027c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80021dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80021e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80021f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8002200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002204:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002214:	463b      	mov	r3, r7
 8002216:	4619      	mov	r1, r3
 8002218:	4807      	ldr	r0, [pc, #28]	@ (8002238 <MX_TIM1_Init+0x198>)
 800221a:	f007 fdd9 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8002224:	f000 fad0 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002228:	4803      	ldr	r0, [pc, #12]	@ (8002238 <MX_TIM1_Init+0x198>)
 800222a:	f000 fe95 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 800222e:	bf00      	nop
 8002230:	3760      	adds	r7, #96	@ 0x60
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200007fc 	.word	0x200007fc
 800223c:	40012c00 	.word	0x40012c00

08002240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
 8002260:	615a      	str	r2, [r3, #20]
 8002262:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002264:	4b27      	ldr	r3, [pc, #156]	@ (8002304 <MX_TIM2_Init+0xc4>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226c:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <MX_TIM2_Init+0xc4>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <MX_TIM2_Init+0xc4>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002278:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <MX_TIM2_Init+0xc4>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <MX_TIM2_Init+0xc4>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <MX_TIM2_Init+0xc4>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800228c:	481d      	ldr	r0, [pc, #116]	@ (8002304 <MX_TIM2_Init+0xc4>)
 800228e:	f007 f83b 	bl	8009308 <HAL_TIM_PWM_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002298:	f000 fa96 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4816      	ldr	r0, [pc, #88]	@ (8002304 <MX_TIM2_Init+0xc4>)
 80022ac:	f007 fd08 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80022b6:	f000 fa87 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ba:	2360      	movs	r3, #96	@ 0x60
 80022bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <MX_TIM2_Init+0xc4>)
 80022d2:	f007 f871 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80022dc:	f000 fa74 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	2208      	movs	r2, #8
 80022e4:	4619      	mov	r1, r3
 80022e6:	4807      	ldr	r0, [pc, #28]	@ (8002304 <MX_TIM2_Init+0xc4>)
 80022e8:	f007 f866 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80022f2:	f000 fa69 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022f6:	4803      	ldr	r0, [pc, #12]	@ (8002304 <MX_TIM2_Init+0xc4>)
 80022f8:	f000 fe2e 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000848 	.word	0x20000848

08002308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231a:	463b      	mov	r3, r7
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
 8002328:	615a      	str	r2, [r3, #20]
 800232a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <MX_TIM3_Init+0xc4>)
 800232e:	4a28      	ldr	r2, [pc, #160]	@ (80023d0 <MX_TIM3_Init+0xc8>)
 8002330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002332:	4b26      	ldr	r3, [pc, #152]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <MX_TIM3_Init+0xc4>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <MX_TIM3_Init+0xc4>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002352:	481e      	ldr	r0, [pc, #120]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002354:	f006 ffd8 	bl	8009308 <HAL_TIM_PWM_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800235e:	f000 fa33 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	4816      	ldr	r0, [pc, #88]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002372:	f007 fca5 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800237c:	f000 fa24 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002380:	2360      	movs	r3, #96	@ 0x60
 8002382:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	2204      	movs	r2, #4
 8002394:	4619      	mov	r1, r3
 8002396:	480d      	ldr	r0, [pc, #52]	@ (80023cc <MX_TIM3_Init+0xc4>)
 8002398:	f007 f80e 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80023a2:	f000 fa11 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a6:	463b      	mov	r3, r7
 80023a8:	2208      	movs	r2, #8
 80023aa:	4619      	mov	r1, r3
 80023ac:	4807      	ldr	r0, [pc, #28]	@ (80023cc <MX_TIM3_Init+0xc4>)
 80023ae:	f007 f803 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80023b8:	f000 fa06 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023bc:	4803      	ldr	r0, [pc, #12]	@ (80023cc <MX_TIM3_Init+0xc4>)
 80023be:	f000 fdcb 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000894 	.word	0x20000894
 80023d0:	40000400 	.word	0x40000400

080023d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
 80023f4:	615a      	str	r2, [r3, #20]
 80023f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <MX_TIM4_Init+0xc4>)
 80023fa:	4a28      	ldr	r2, [pc, #160]	@ (800249c <MX_TIM4_Init+0xc8>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <MX_TIM4_Init+0xc4>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <MX_TIM4_Init+0xc4>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <MX_TIM4_Init+0xc4>)
 800240c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002410:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <MX_TIM4_Init+0xc4>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <MX_TIM4_Init+0xc4>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800241e:	481e      	ldr	r0, [pc, #120]	@ (8002498 <MX_TIM4_Init+0xc4>)
 8002420:	f006 ff72 	bl	8009308 <HAL_TIM_PWM_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800242a:	f000 f9cd 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	4816      	ldr	r0, [pc, #88]	@ (8002498 <MX_TIM4_Init+0xc4>)
 800243e:	f007 fc3f 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002448:	f000 f9be 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244c:	2360      	movs	r3, #96	@ 0x60
 800244e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	2208      	movs	r2, #8
 8002460:	4619      	mov	r1, r3
 8002462:	480d      	ldr	r0, [pc, #52]	@ (8002498 <MX_TIM4_Init+0xc4>)
 8002464:	f006 ffa8 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800246e:	f000 f9ab 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002472:	463b      	mov	r3, r7
 8002474:	220c      	movs	r2, #12
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	@ (8002498 <MX_TIM4_Init+0xc4>)
 800247a:	f006 ff9d 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002484:	f000 f9a0 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <MX_TIM4_Init+0xc4>)
 800248a:	f000 fd65 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	@ 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200008e0 	.word	0x200008e0
 800249c:	40000800 	.word	0x40000800

080024a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b096      	sub	sp, #88	@ 0x58
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	222c      	movs	r2, #44	@ 0x2c
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f009 fb1b 	bl	800bb08 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024d2:	4b33      	ldr	r3, [pc, #204]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024d4:	4a33      	ldr	r2, [pc, #204]	@ (80025a4 <MX_TIM15_Init+0x104>)
 80024d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80024d8:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80024e4:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024f2:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <MX_TIM15_Init+0x100>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80024fe:	4828      	ldr	r0, [pc, #160]	@ (80025a0 <MX_TIM15_Init+0x100>)
 8002500:	f006 ff02 	bl	8009308 <HAL_TIM_PWM_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800250a:	f000 f95d 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002516:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800251a:	4619      	mov	r1, r3
 800251c:	4820      	ldr	r0, [pc, #128]	@ (80025a0 <MX_TIM15_Init+0x100>)
 800251e:	f007 fbcf 	bl	8009cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002528:	f000 f94e 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252c:	2360      	movs	r3, #96	@ 0x60
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4813      	ldr	r0, [pc, #76]	@ (80025a0 <MX_TIM15_Init+0x100>)
 8002552:	f006 ff31 	bl	80093b8 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800255c:	f000 f934 	bl	80027c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4807      	ldr	r0, [pc, #28]	@ (80025a0 <MX_TIM15_Init+0x100>)
 8002584:	f007 fc24 	bl	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800258e:	f000 f91b 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002592:	4803      	ldr	r0, [pc, #12]	@ (80025a0 <MX_TIM15_Init+0x100>)
 8002594:	f000 fce0 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 8002598:	bf00      	nop
 800259a:	3758      	adds	r7, #88	@ 0x58
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000092c 	.word	0x2000092c
 80025a4:	40014000 	.word	0x40014000

080025a8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08e      	sub	sp, #56	@ 0x38
 80025bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ce:	4b71      	ldr	r3, [pc, #452]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	4a70      	ldr	r2, [pc, #448]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025da:	4b6e      	ldr	r3, [pc, #440]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f2:	4b68      	ldr	r3, [pc, #416]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025fe:	4b65      	ldr	r3, [pc, #404]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	4a64      	ldr	r2, [pc, #400]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260a:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	4a5e      	ldr	r2, [pc, #376]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002622:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	4b59      	ldr	r3, [pc, #356]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263a:	4b56      	ldr	r3, [pc, #344]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002652:	4b50      	ldr	r3, [pc, #320]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265e:	4b4d      	ldr	r3, [pc, #308]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	4a4c      	ldr	r2, [pc, #304]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002664:	f043 0308 	orr.w	r3, r3, #8
 8002668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267a:	4a46      	ldr	r2, [pc, #280]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 800267c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002682:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <MX_GPIO_Init+0x1dc>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800268e:	f003 f9f1 	bl	8005a74 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002698:	483f      	ldr	r0, [pc, #252]	@ (8002798 <MX_GPIO_Init+0x1e0>)
 800269a:	f002 fb13 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800269e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b4:	4619      	mov	r1, r3
 80026b6:	4838      	ldr	r0, [pc, #224]	@ (8002798 <MX_GPIO_Init+0x1e0>)
 80026b8:	f002 f972 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	4831      	ldr	r0, [pc, #196]	@ (8002798 <MX_GPIO_Init+0x1e0>)
 80026d4:	f002 f964 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026d8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026ea:	230c      	movs	r3, #12
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	4829      	ldr	r0, [pc, #164]	@ (800279c <MX_GPIO_Init+0x1e4>)
 80026f6:	f002 f953 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026fa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800270c:	230a      	movs	r3, #10
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271a:	f002 f941 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800271e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002736:	f002 f933 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800273a:	2301      	movs	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800274a:	2309      	movs	r3, #9
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	4812      	ldr	r0, [pc, #72]	@ (80027a0 <MX_GPIO_Init+0x1e8>)
 8002756:	f002 f923 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800275a:	2304      	movs	r3, #4
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800276a:	230c      	movs	r3, #12
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002772:	4619      	mov	r1, r3
 8002774:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <MX_GPIO_Init+0x1e8>)
 8002776:	f002 f913 	bl	80049a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2028      	movs	r0, #40	@ 0x28
 8002780:	f002 f8d7 	bl	8004932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002784:	2028      	movs	r0, #40	@ 0x28
 8002786:	f002 f8f0 	bl	800496a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800278a:	bf00      	nop
 800278c:	3738      	adds	r7, #56	@ 0x38
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	48001400 	.word	0x48001400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00

080027a4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80027ac:	1d39      	adds	r1, r7, #4
 80027ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b2:	2201      	movs	r2, #1
 80027b4:	4803      	ldr	r0, [pc, #12]	@ (80027c4 <__io_putchar+0x20>)
 80027b6:	f007 fc9f 	bl	800a0f8 <HAL_UART_Transmit>
  return ch;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200003bc 	.word	0x200003bc

080027c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <Error_Handler+0x8>

080027d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_MspInit+0x44>)
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <HAL_MspInit+0x44>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_MspInit+0x44>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_MspInit+0x44>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a08      	ldr	r2, [pc, #32]	@ (8002818 <HAL_MspInit+0x44>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_MspInit+0x44>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	@ 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2d      	ldr	r2, [pc, #180]	@ (80028f0 <HAL_ADC_MspInit+0xd4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d154      	bne.n	80028e8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	4a2c      	ldr	r2, [pc, #176]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800284a:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	4a26      	ldr	r2, [pc, #152]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	4a20      	ldr	r2, [pc, #128]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287a:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <HAL_ADC_MspInit+0xd8>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800289e:	233f      	movs	r3, #63	@ 0x3f
 80028a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80028a2:	230b      	movs	r3, #11
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4811      	ldr	r0, [pc, #68]	@ (80028f8 <HAL_ADC_MspInit+0xdc>)
 80028b2:	f002 f875 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80028b6:	230a      	movs	r3, #10
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80028ba:	230b      	movs	r3, #11
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028cc:	f002 f868 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80028d4:	230b      	movs	r3, #11
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	4806      	ldr	r0, [pc, #24]	@ (80028fc <HAL_ADC_MspInit+0xe0>)
 80028e4:	f002 f85c 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3730      	adds	r7, #48	@ 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	50040000 	.word	0x50040000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	48000800 	.word	0x48000800
 80028fc:	48000400 	.word	0x48000400

08002900 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1e      	ldr	r2, [pc, #120]	@ (8002998 <HAL_COMP_MspInit+0x98>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d118      	bne.n	8002954 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800293a:	2304      	movs	r3, #4
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293e:	2303      	movs	r3, #3
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4814      	ldr	r0, [pc, #80]	@ (80029a0 <HAL_COMP_MspInit+0xa0>)
 800294e:	f002 f827 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002952:	e01c      	b.n	800298e <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_COMP_MspInit+0xa4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d117      	bne.n	800298e <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	4a0e      	ldr	r2, [pc, #56]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296a:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_COMP_MspInit+0x9c>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002976:	23c0      	movs	r3, #192	@ 0xc0
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297a:	2303      	movs	r3, #3
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <HAL_COMP_MspInit+0xa0>)
 800298a:	f002 f809 	bl	80049a0 <HAL_GPIO_Init>
}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	@ 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40010200 	.word	0x40010200
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	40010204 	.word	0x40010204

080029a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b0ae      	sub	sp, #184	@ 0xb8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2294      	movs	r2, #148	@ 0x94
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f009 f89d 	bl	800bb08 <memset>
  if(hi2c->Instance==I2C1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <HAL_I2C_MspInit+0xb0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d13b      	bne.n	8002a50 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029d8:	2340      	movs	r3, #64	@ 0x40
 80029da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029dc:	2300      	movs	r3, #0
 80029de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 ff2d 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80029f0:	f7ff feea 	bl	80027c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	4a18      	ldr	r2, [pc, #96]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a00:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a14:	2312      	movs	r3, #18
 8002a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a26:	2304      	movs	r3, #4
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a30:	4619      	mov	r1, r3
 8002a32:	480b      	ldr	r0, [pc, #44]	@ (8002a60 <HAL_I2C_MspInit+0xb8>)
 8002a34:	f001 ffb4 	bl	80049a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 8002a3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_I2C_MspInit+0xb4>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	37b8      	adds	r7, #184	@ 0xb8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40005400 	.word	0x40005400
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	48000400 	.word	0x48000400

08002a64 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0ae      	sub	sp, #184	@ 0xb8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a7c:	f107 0310 	add.w	r3, r7, #16
 8002a80:	2294      	movs	r2, #148	@ 0x94
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f009 f83f 	bl	800bb08 <memset>
  if(hsmbus->Instance==I2C2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_SMBUS_MspInit+0xb0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d13a      	bne.n	8002b0a <HAL_SMBUS_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fecf 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002aac:	f7ff fe8c 	bl	80027c8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002abc:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ae6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aea:	4619      	mov	r1, r3
 8002aec:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <HAL_SMBUS_MspInit+0xb8>)
 8002aee:	f001 ff57 	bl	80049a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002af8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_SMBUS_MspInit+0xb4>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	37b8      	adds	r7, #184	@ 0xb8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40005800 	.word	0x40005800
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48001400 	.word	0x48001400

08002b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0b2      	sub	sp, #200	@ 0xc8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	2294      	movs	r2, #148	@ 0x94
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f008 ffe1 	bl	800bb08 <memset>
  if(huart->Instance==LPUART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a64      	ldr	r2, [pc, #400]	@ (8002cdc <HAL_UART_MspInit+0x1bc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d13e      	bne.n	8002bce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b50:	2320      	movs	r3, #32
 8002b52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fe71 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b68:	f7ff fe2e 	bl	80027c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b78:	4b59      	ldr	r3, [pc, #356]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b84:	4b56      	ldr	r3, [pc, #344]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	4a55      	ldr	r2, [pc, #340]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b90:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002b9c:	f002 ff6a 	bl	8005a74 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ba0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002bba:	2308      	movs	r3, #8
 8002bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4847      	ldr	r0, [pc, #284]	@ (8002ce4 <HAL_UART_MspInit+0x1c4>)
 8002bc8:	f001 feea 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bcc:	e081      	b.n	8002cd2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a45      	ldr	r2, [pc, #276]	@ (8002ce8 <HAL_UART_MspInit+0x1c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d13b      	bne.n	8002c50 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be0:	f107 0320 	add.w	r3, r7, #32
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fe2d 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002bf0:	f7ff fdea 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf8:	4a39      	ldr	r2, [pc, #228]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c00:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c10:	4a33      	ldr	r2, [pc, #204]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c24:	2378      	movs	r3, #120	@ 0x78
 8002c26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c42:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4828      	ldr	r0, [pc, #160]	@ (8002cec <HAL_UART_MspInit+0x1cc>)
 8002c4a:	f001 fea9 	bl	80049a0 <HAL_GPIO_Init>
}
 8002c4e:	e040      	b.n	8002cd2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a26      	ldr	r2, [pc, #152]	@ (8002cf0 <HAL_UART_MspInit+0x1d0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d13b      	bne.n	8002cd2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fdec 	bl	8006844 <HAL_RCCEx_PeriphCLKConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002c72:	f7ff fda9 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c82:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_UART_MspInit+0x1c0>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4807      	ldr	r0, [pc, #28]	@ (8002cec <HAL_UART_MspInit+0x1cc>)
 8002cce:	f001 fe67 	bl	80049a0 <HAL_GPIO_Init>
}
 8002cd2:	bf00      	nop
 8002cd4:	37c8      	adds	r7, #200	@ 0xc8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40008000 	.word	0x40008000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	48001800 	.word	0x48001800
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	40004800 	.word	0x40004800

08002cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	@ 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	@ (8002dcc <HAL_SPI_MspInit+0xd8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d129      	bne.n	8002d6a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d16:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d22:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b28      	ldr	r3, [pc, #160]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	4a27      	ldr	r2, [pc, #156]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3a:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d46:	23f0      	movs	r3, #240	@ 0xf0
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d56:	2305      	movs	r3, #5
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d64:	f001 fe1c 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_SPI_MspInit+0xe0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d127      	bne.n	8002dc4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d90:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d98:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_SPI_MspInit+0xdc>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002da4:	2338      	movs	r3, #56	@ 0x38
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002db4:	2306      	movs	r3, #6
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4806      	ldr	r0, [pc, #24]	@ (8002dd8 <HAL_SPI_MspInit+0xe4>)
 8002dc0:	f001 fdee 	bl	80049a0 <HAL_GPIO_Init>
}
 8002dc4:	bf00      	nop
 8002dc6:	3730      	adds	r7, #48	@ 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40013000 	.word	0x40013000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40003c00 	.word	0x40003c00
 8002dd8:	48000400 	.word	0x48000400

08002ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a51      	ldr	r2, [pc, #324]	@ (8002f40 <HAL_TIM_PWM_MspInit+0x164>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d139      	bne.n	8002e72 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	4a50      	ldr	r2, [pc, #320]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e16:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e22:	4b48      	ldr	r3, [pc, #288]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e46:	4619      	mov	r1, r3
 8002e48:	483f      	ldr	r0, [pc, #252]	@ (8002f48 <HAL_TIM_PWM_MspInit+0x16c>)
 8002e4a:	f001 fda9 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e4e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002e60:	2303      	movs	r3, #3
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4837      	ldr	r0, [pc, #220]	@ (8002f48 <HAL_TIM_PWM_MspInit+0x16c>)
 8002e6c:	f001 fd98 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002e70:	e062      	b.n	8002f38 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d10c      	bne.n	8002e96 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e7c:	4b31      	ldr	r3, [pc, #196]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	4a30      	ldr	r2, [pc, #192]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e88:	4b2e      	ldr	r3, [pc, #184]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]
}
 8002e94:	e050      	b.n	8002f38 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f4c <HAL_TIM_PWM_MspInit+0x170>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea0:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	4a27      	ldr	r2, [pc, #156]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ea6:	f043 0302 	orr.w	r3, r3, #2
 8002eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eac:	4b25      	ldr	r3, [pc, #148]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
}
 8002eb8:	e03e      	b.n	8002f38 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_TIM_PWM_MspInit+0x174>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d128      	bne.n	8002f16 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002ee2:	f043 0310 	orr.w	r3, r3, #16
 8002ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f04:	2302      	movs	r3, #2
 8002f06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480e      	ldr	r0, [pc, #56]	@ (8002f48 <HAL_TIM_PWM_MspInit+0x16c>)
 8002f10:	f001 fd46 	bl	80049a0 <HAL_GPIO_Init>
}
 8002f14:	e010      	b.n	8002f38 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f54 <HAL_TIM_PWM_MspInit+0x178>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10b      	bne.n	8002f38 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f24:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_TIM_PWM_MspInit+0x168>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	3738      	adds	r7, #56	@ 0x38
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48001000 	.word	0x48001000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40014000 	.word	0x40014000

08002f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	@ 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a73      	ldr	r2, [pc, #460]	@ (8003144 <HAL_TIM_MspPostInit+0x1ec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d11d      	bne.n	8002fb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f7a:	4b73      	ldr	r3, [pc, #460]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7e:	4a72      	ldr	r2, [pc, #456]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002f80:	f043 0310 	orr.w	r3, r3, #16
 8002f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f86:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f92:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fac:	4619      	mov	r1, r3
 8002fae:	4867      	ldr	r0, [pc, #412]	@ (800314c <HAL_TIM_MspPostInit+0x1f4>)
 8002fb0:	f001 fcf6 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002fb4:	e0c2      	b.n	800313c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fbe:	d13a      	bne.n	8003036 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b61      	ldr	r3, [pc, #388]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc4:	4a60      	ldr	r2, [pc, #384]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003000:	2301      	movs	r3, #1
 8003002:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800300e:	f001 fcc7 	bl	80049a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003024:	2301      	movs	r3, #1
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	4848      	ldr	r0, [pc, #288]	@ (8003150 <HAL_TIM_MspPostInit+0x1f8>)
 8003030:	f001 fcb6 	bl	80049a0 <HAL_GPIO_Init>
}
 8003034:	e082      	b.n	800313c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a46      	ldr	r2, [pc, #280]	@ (8003154 <HAL_TIM_MspPostInit+0x1fc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d138      	bne.n	80030b2 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003040:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003044:	4a40      	ldr	r2, [pc, #256]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304c:	4b3e      	ldr	r3, [pc, #248]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003058:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 800305a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305c:	4a3a      	ldr	r2, [pc, #232]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003064:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003080:	2302      	movs	r3, #2
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003088:	4619      	mov	r1, r3
 800308a:	4831      	ldr	r0, [pc, #196]	@ (8003150 <HAL_TIM_MspPostInit+0x1f8>)
 800308c:	f001 fc88 	bl	80049a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030a0:	2302      	movs	r3, #2
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a8:	4619      	mov	r1, r3
 80030aa:	482b      	ldr	r0, [pc, #172]	@ (8003158 <HAL_TIM_MspPostInit+0x200>)
 80030ac:	f001 fc78 	bl	80049a0 <HAL_GPIO_Init>
}
 80030b0:	e044      	b.n	800313c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_TIM_MspPostInit+0x204>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d11d      	bne.n	80030f8 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030bc:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 80030be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c0:	4a21      	ldr	r2, [pc, #132]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80030d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030e6:	2302      	movs	r3, #2
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ee:	4619      	mov	r1, r3
 80030f0:	481b      	ldr	r0, [pc, #108]	@ (8003160 <HAL_TIM_MspPostInit+0x208>)
 80030f2:	f001 fc55 	bl	80049a0 <HAL_GPIO_Init>
}
 80030f6:	e021      	b.n	800313c <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	@ (8003164 <HAL_TIM_MspPostInit+0x20c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11c      	bne.n	800313c <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_TIM_MspPostInit+0x1f0>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800311a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800312c:	230e      	movs	r3, #14
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003134:	4619      	mov	r1, r3
 8003136:	4806      	ldr	r0, [pc, #24]	@ (8003150 <HAL_TIM_MspPostInit+0x1f8>)
 8003138:	f001 fc32 	bl	80049a0 <HAL_GPIO_Init>
}
 800313c:	bf00      	nop
 800313e:	3738      	adds	r7, #56	@ 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40021000 	.word	0x40021000
 800314c:	48001000 	.word	0x48001000
 8003150:	48000400 	.word	0x48000400
 8003154:	40000400 	.word	0x40000400
 8003158:	48000800 	.word	0x48000800
 800315c:	40000800 	.word	0x40000800
 8003160:	48000c00 	.word	0x48000c00
 8003164:	40014000 	.word	0x40014000

08003168 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a50      	ldr	r2, [pc, #320]	@ (80032b8 <HAL_SAI_MspInit+0x150>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d124      	bne.n	80031c4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800317a:	4b50      	ldr	r3, [pc, #320]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003182:	4b4f      	ldr	r3, [pc, #316]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003186:	4a4e      	ldr	r2, [pc, #312]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 8003188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800318c:	6613      	str	r3, [r2, #96]	@ 0x60
 800318e:	4b4c      	ldr	r3, [pc, #304]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800319a:	4b48      	ldr	r3, [pc, #288]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 80031a2:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80031a4:	2374      	movs	r3, #116	@ 0x74
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80031b4:	230d      	movs	r3, #13
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4841      	ldr	r0, [pc, #260]	@ (80032c4 <HAL_SAI_MspInit+0x15c>)
 80031c0:	f001 fbee 	bl	80049a0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3f      	ldr	r2, [pc, #252]	@ (80032c8 <HAL_SAI_MspInit+0x160>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d135      	bne.n	800323a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80031ce:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	4a39      	ldr	r2, [pc, #228]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 80031dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031e2:	4b37      	ldr	r3, [pc, #220]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80031ee:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a31      	ldr	r2, [pc, #196]	@ (80032bc <HAL_SAI_MspInit+0x154>)
 80031f6:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031f8:	2308      	movs	r3, #8
 80031fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003208:	230d      	movs	r3, #13
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4619      	mov	r1, r3
 8003212:	482c      	ldr	r0, [pc, #176]	@ (80032c4 <HAL_SAI_MspInit+0x15c>)
 8003214:	f001 fbc4 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003218:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800322a:	230d      	movs	r3, #13
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4825      	ldr	r0, [pc, #148]	@ (80032cc <HAL_SAI_MspInit+0x164>)
 8003236:	f001 fbb3 	bl	80049a0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <HAL_SAI_MspInit+0x168>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d135      	bne.n	80032b0 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003244:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_SAI_MspInit+0x16c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	4a1b      	ldr	r2, [pc, #108]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 8003252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003256:	6613      	str	r3, [r2, #96]	@ 0x60
 8003258:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_SAI_MspInit+0x158>)
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8003264:	4b1b      	ldr	r3, [pc, #108]	@ (80032d4 <HAL_SAI_MspInit+0x16c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <HAL_SAI_MspInit+0x16c>)
 800326c:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800326e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8003272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003280:	230d      	movs	r3, #13
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	4813      	ldr	r0, [pc, #76]	@ (80032d8 <HAL_SAI_MspInit+0x170>)
 800328c:	f001 fb88 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003290:	2340      	movs	r3, #64	@ 0x40
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80032a0:	230d      	movs	r3, #13
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	480c      	ldr	r0, [pc, #48]	@ (80032dc <HAL_SAI_MspInit+0x174>)
 80032ac:	f001 fb78 	bl	80049a0 <HAL_GPIO_Init>

    }
}
 80032b0:	bf00      	nop
 80032b2:	3728      	adds	r7, #40	@ 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40015404 	.word	0x40015404
 80032bc:	20000978 	.word	0x20000978
 80032c0:	40021000 	.word	0x40021000
 80032c4:	48001000 	.word	0x48001000
 80032c8:	40015424 	.word	0x40015424
 80032cc:	48001400 	.word	0x48001400
 80032d0:	40015804 	.word	0x40015804
 80032d4:	2000097c 	.word	0x2000097c
 80032d8:	48000400 	.word	0x48000400
 80032dc:	48000800 	.word	0x48000800

080032e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <NMI_Handler+0x4>

080032e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <MemManage_Handler+0x4>

080032f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <BusFault_Handler+0x4>

08003300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <UsageFault_Handler+0x4>

08003308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003336:	f000 f961 	bl	80035fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}

0800333e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003342:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003346:	f001 fcd5 	bl	8004cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}

0800334e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  return 1;
 8003352:	2301      	movs	r3, #1
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_kill>:

int _kill(int pid, int sig)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003368:	f008 fc20 	bl	800bbac <__errno>
 800336c:	4603      	mov	r3, r0
 800336e:	2216      	movs	r2, #22
 8003370:	601a      	str	r2, [r3, #0]
  return -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_exit>:

void _exit (int status)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003386:	f04f 31ff 	mov.w	r1, #4294967295
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ffe7 	bl	800335e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <_exit+0x12>

08003394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
  }

  return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f9db 	bl	80027a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf1      	blt.n	80033e0 <_write+0x12>
  }
  return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342e:	605a      	str	r2, [r3, #4]
  return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	@ (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f008 fb84 	bl	800bbac <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200a0000 	.word	0x200a0000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	20000980 	.word	0x20000980
 80034d8:	20000ad8 	.word	0x20000ad8

080034dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003538 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003504:	f7ff ffea 	bl	80034dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003508:	480c      	ldr	r0, [pc, #48]	@ (800353c <LoopForever+0x6>)
  ldr r1, =_edata
 800350a:	490d      	ldr	r1, [pc, #52]	@ (8003540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800350c:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <LoopForever+0xe>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003510:	e002      	b.n	8003518 <LoopCopyDataInit>

08003512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003516:	3304      	adds	r3, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800351c:	d3f9      	bcc.n	8003512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003520:	4c0a      	ldr	r4, [pc, #40]	@ (800354c <LoopForever+0x16>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003524:	e001      	b.n	800352a <LoopFillZerobss>

08003526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003528:	3204      	adds	r2, #4

0800352a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800352c:	d3fb      	bcc.n	8003526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800352e:	f008 fb43 	bl	800bbb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003532:	f7fe f93f 	bl	80017b4 <main>

08003536 <LoopForever>:

LoopForever:
    b LoopForever
 8003536:	e7fe      	b.n	8003536 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003538:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8003544:	0800e2c8 	.word	0x0800e2c8
  ldr r2, =_sbss
 8003548:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 800354c:	20000ad4 	.word	0x20000ad4

08003550 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC1_IRQHandler>

08003552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355c:	2003      	movs	r0, #3
 800355e:	f001 f9dd 	bl	800491c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003562:	2000      	movs	r0, #0
 8003564:	f000 f80e 	bl	8003584 <HAL_InitTick>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	71fb      	strb	r3, [r7, #7]
 8003572:	e001      	b.n	8003578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003574:	f7ff f92e 	bl	80027d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003578:	79fb      	ldrb	r3, [r7, #7]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003590:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <HAL_InitTick+0x6c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d023      	beq.n	80035e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003598:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <HAL_InitTick+0x70>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_InitTick+0x6c>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f9e9 	bl	8004986 <HAL_SYSTICK_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d809      	bhi.n	80035d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c0:	2200      	movs	r2, #0
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	f001 f9b3 	bl	8004932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035cc:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <HAL_InitTick+0x74>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e007      	b.n	80035e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e004      	b.n	80035e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e001      	b.n	80035e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000070 	.word	0x20000070
 80035f4:	20000068 	.word	0x20000068
 80035f8:	2000006c 	.word	0x2000006c

080035fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <HAL_IncTick+0x20>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_IncTick+0x24>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4413      	add	r3, r2
 800360c:	4a04      	ldr	r2, [pc, #16]	@ (8003620 <HAL_IncTick+0x24>)
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000070 	.word	0x20000070
 8003620:	20000984 	.word	0x20000984

08003624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return uwTick;
 8003628:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_GetTick+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000984 	.word	0x20000984

0800363c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003644:	f7ff ffee 	bl	8003624 <HAL_GetTick>
 8003648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d005      	beq.n	8003662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003656:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <HAL_Delay+0x44>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003662:	bf00      	nop
 8003664:	f7ff ffde 	bl	8003624 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d8f7      	bhi.n	8003664 <HAL_Delay+0x28>
  {
  }
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000070 	.word	0x20000070

08003684 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	609a      	str	r2, [r3, #8]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3360      	adds	r3, #96	@ 0x60
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <LL_ADC_SetOffset+0x44>)
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	4313      	orrs	r3, r2
 800371c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	03fff000 	.word	0x03fff000

08003734 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3360      	adds	r3, #96	@ 0x60
 8003742:	461a      	mov	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3360      	adds	r3, #96	@ 0x60
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	431a      	orrs	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	615a      	str	r2, [r3, #20]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3330      	adds	r3, #48	@ 0x30
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	4413      	add	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	211f      	movs	r1, #31
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	401a      	ands	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 011f 	and.w	r1, r3, #31
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	431a      	orrs	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3314      	adds	r3, #20
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0e5b      	lsrs	r3, r3, #25
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0d1b      	lsrs	r3, r3, #20
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2107      	movs	r1, #7
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	0d1b      	lsrs	r3, r3, #20
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003884:	43db      	mvns	r3, r3
 8003886:	401a      	ands	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0318 	and.w	r3, r3, #24
 800388e:	4908      	ldr	r1, [pc, #32]	@ (80038b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003890:	40d9      	lsrs	r1, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	400b      	ands	r3, r1
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	0007ffff 	.word	0x0007ffff

080038b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6093      	str	r3, [r2, #8]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ec:	d101      	bne.n	80038f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003914:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800393c:	d101      	bne.n	8003942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <LL_ADC_IsEnabled+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_ADC_IsEnabled+0x1a>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d101      	bne.n	800398e <LL_ADC_REG_IsConversionOngoing+0x18>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d101      	bne.n	80039b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e129      	b.n	8003c32 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fe ff15 	bl	800281c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff67 	bl	80038d8 <LL_ADC_IsDeepPowerDownEnabled>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff4d 	bl	80038b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff82 	bl	8003928 <LL_ADC_IsInternalRegulatorEnabled>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff66 	bl	8003900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a34:	4b81      	ldr	r3, [pc, #516]	@ (8003c3c <HAL_ADC_Init+0x278>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	4a81      	ldr	r2, [pc, #516]	@ (8003c40 <HAL_ADC_Init+0x27c>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a48:	e002      	b.n	8003a50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff64 	bl	8003928 <LL_ADC_IsInternalRegulatorEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	f043 0210 	orr.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f043 0201 	orr.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff75 	bl	8003976 <LL_ADC_REG_IsConversionOngoing>
 8003a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 80c2 	bne.w	8003c20 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 80be 	bne.w	8003c20 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003aac:	f043 0202 	orr.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff49 	bl	8003950 <LL_ADC_IsEnabled>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ac4:	485f      	ldr	r0, [pc, #380]	@ (8003c44 <HAL_ADC_Init+0x280>)
 8003ac6:	f7ff ff43 	bl	8003950 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	485c      	ldr	r0, [pc, #368]	@ (8003c48 <HAL_ADC_Init+0x284>)
 8003ad8:	f7ff fdd4 	bl	8003684 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7e5b      	ldrb	r3, [r3, #25]
 8003ae0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ae6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003aec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003af2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d106      	bne.n	8003b18 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	045b      	lsls	r3, r3, #17
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b44      	ldr	r3, [pc, #272]	@ (8003c4c <HAL_ADC_Init+0x288>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff25 	bl	800399c <LL_ADC_INJ_IsConversionOngoing>
 8003b52:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d140      	bne.n	8003bdc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13d      	bne.n	8003bdc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e1b      	ldrb	r3, [r3, #24]
 8003b68:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b6a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b82:	f023 0306 	bic.w	r3, r3, #6
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d118      	bne.n	8003bcc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e007      	b.n	8003bdc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d10c      	bne.n	8003bfe <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f023 010f 	bic.w	r1, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	1e5a      	subs	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bfc:	e007      	b.n	8003c0e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 020f 	bic.w	r2, r2, #15
 8003c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c1e:	e007      	b.n	8003c30 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000068 	.word	0x20000068
 8003c40:	053e2d63 	.word	0x053e2d63
 8003c44:	50040000 	.word	0x50040000
 8003c48:	50040300 	.word	0x50040300
 8003c4c:	fff0c007 	.word	0xfff0c007

08003c50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b0b6      	sub	sp, #216	@ 0xd8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x22>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e3d5      	b.n	800441e <HAL_ADC_ConfigChannel+0x7ce>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fe79 	bl	8003976 <LL_ADC_REG_IsConversionOngoing>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 83ba 	bne.w	8004400 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d824      	bhi.n	8003ce6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	3b02      	subs	r3, #2
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d81b      	bhi.n	8003cde <HAL_ADC_ConfigChannel+0x8e>
 8003ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <HAL_ADC_ConfigChannel+0x5c>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc5 	.word	0x08003cc5
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cd5 	.word	0x08003cd5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cc2:	e010      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003cc4:	2312      	movs	r3, #18
 8003cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cca:	e00c      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003ccc:	2318      	movs	r3, #24
 8003cce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cd2:	e008      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003cdc:	e003      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003cde:	2306      	movs	r3, #6
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ce4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003cf4:	f7ff fd62 	bl	80037bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fe3a 	bl	8003976 <LL_ADC_REG_IsConversionOngoing>
 8003d02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fe46 	bl	800399c <LL_ADC_INJ_IsConversionOngoing>
 8003d10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 81bf 	bne.w	800409c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 81ba 	bne.w	800409c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d30:	d10f      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f7ff fd69 	bl	8003814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fd23 	bl	8003796 <LL_ADC_SetSamplingTimeCommonConfig>
 8003d50:	e00e      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f7ff fd58 	bl	8003814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fd13 	bl	8003796 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d00a      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6919      	ldr	r1, [r3, #16]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da2:	f7ff fca3 	bl	80036ec <LL_ADC_SetOffset>
 8003da6:	e179      	b.n	800409c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fcc0 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x184>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fcb5 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	e01e      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x1c2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fcaa 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003df6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e004      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x1da>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	e018      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x20c>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e004      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fc79 	bl	8003760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fc5d 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x24a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fc52 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	0e9b      	lsrs	r3, r3, #26
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	e01e      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x288>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fc47 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	e004      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x2a0>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	e018      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x2d2>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e004      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d106      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fc16 	bl	8003760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fbfa 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x310>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fbef 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	e01e      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x34e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fbe4 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003f8e:	2320      	movs	r3, #32
 8003f90:	e004      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x366>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	e014      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x390>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	e004      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d106      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fbb7 	bl	8003760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fb9b 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_ADC_ConfigChannel+0x3ce>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2103      	movs	r1, #3
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fb90 	bl	8003734 <LL_ADC_GetOffsetChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	e017      	b.n	800404e <HAL_ADC_ConfigChannel+0x3fe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2103      	movs	r1, #3
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fb85 	bl	8003734 <LL_ADC_GetOffsetChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004038:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800403a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x416>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	0e9b      	lsrs	r3, r3, #26
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	e011      	b.n	800408a <HAL_ADC_ConfigChannel+0x43a>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004076:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e003      	b.n	800408a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800408a:	429a      	cmp	r2, r3
 800408c:	d106      	bne.n	800409c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	2103      	movs	r1, #3
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fb62 	bl	8003760 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fc55 	bl	8003950 <LL_ADC_IsEnabled>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 813f 	bne.w	800432c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7ff fbd6 	bl	800386c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004300 <HAL_ADC_ConfigChannel+0x6b0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	f040 8130 	bne.w	800432c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x4a4>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0e9b      	lsrs	r3, r3, #26
 80040e2:	3301      	adds	r3, #1
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2b09      	cmp	r3, #9
 80040ea:	bf94      	ite	ls
 80040ec:	2301      	movls	r3, #1
 80040ee:	2300      	movhi	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e019      	b.n	8004128 <HAL_ADC_ConfigChannel+0x4d8>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b09      	cmp	r3, #9
 8004120:	bf94      	ite	ls
 8004122:	2301      	movls	r3, #1
 8004124:	2300      	movhi	r3, #0
 8004126:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004128:	2b00      	cmp	r3, #0
 800412a:	d079      	beq.n	8004220 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x4f8>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	3301      	adds	r3, #1
 8004140:	069b      	lsls	r3, r3, #26
 8004142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004146:	e015      	b.n	8004174 <HAL_ADC_ConfigChannel+0x524>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004158:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800415a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	069b      	lsls	r3, r3, #26
 8004170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x544>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	3301      	adds	r3, #1
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	e017      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x574>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80041a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e003      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80041b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	ea42 0103 	orr.w	r1, r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x59a>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0e9b      	lsrs	r3, r3, #26
 80041da:	3301      	adds	r3, #1
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	051b      	lsls	r3, r3, #20
 80041e8:	e018      	b.n	800421c <HAL_ADC_ConfigChannel+0x5cc>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004202:	2320      	movs	r3, #32
 8004204:	e003      	b.n	800420e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	3301      	adds	r3, #1
 8004210:	f003 021f 	and.w	r2, r3, #31
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800421c:	430b      	orrs	r3, r1
 800421e:	e080      	b.n	8004322 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <HAL_ADC_ConfigChannel+0x5ec>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	069b      	lsls	r3, r3, #26
 8004236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423a:	e015      	b.n	8004268 <HAL_ADC_ConfigChannel+0x618>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x638>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	e017      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x668>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	61bb      	str	r3, [r7, #24]
  return result;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80042a0:	2320      	movs	r3, #32
 80042a2:	e003      	b.n	80042ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	ea42 0103 	orr.w	r1, r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x694>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	3301      	adds	r3, #1
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	3b1e      	subs	r3, #30
 80042dc:	051b      	lsls	r3, r3, #20
 80042de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	e01d      	b.n	8004320 <HAL_ADC_ConfigChannel+0x6d0>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	60fb      	str	r3, [r7, #12]
  return result;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80042fc:	2320      	movs	r3, #32
 80042fe:	e005      	b.n	800430c <HAL_ADC_ConfigChannel+0x6bc>
 8004300:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f003 021f 	and.w	r2, r3, #31
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	3b1e      	subs	r3, #30
 800431a:	051b      	lsls	r3, r3, #20
 800431c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004320:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004326:	4619      	mov	r1, r3
 8004328:	f7ff fa74 	bl	8003814 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b3d      	ldr	r3, [pc, #244]	@ (8004428 <HAL_ADC_ConfigChannel+0x7d8>)
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d06c      	beq.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004338:	483c      	ldr	r0, [pc, #240]	@ (800442c <HAL_ADC_ConfigChannel+0x7dc>)
 800433a:	f7ff f9c9 	bl	80036d0 <LL_ADC_GetCommonPathInternalCh>
 800433e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3a      	ldr	r2, [pc, #232]	@ (8004430 <HAL_ADC_ConfigChannel+0x7e0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d127      	bne.n	800439c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800434c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d121      	bne.n	800439c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <HAL_ADC_ConfigChannel+0x7e4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d157      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800436a:	4619      	mov	r1, r3
 800436c:	482f      	ldr	r0, [pc, #188]	@ (800442c <HAL_ADC_ConfigChannel+0x7dc>)
 800436e:	f7ff f99c 	bl	80036aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_ADC_ConfigChannel+0x7e8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	4a30      	ldr	r2, [pc, #192]	@ (800443c <HAL_ADC_ConfigChannel+0x7ec>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800438c:	e002      	b.n	8004394 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3b01      	subs	r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f9      	bne.n	800438e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800439a:	e03a      	b.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a27      	ldr	r2, [pc, #156]	@ (8004440 <HAL_ADC_ConfigChannel+0x7f0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d113      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_ADC_ConfigChannel+0x7e4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d12a      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c4:	4619      	mov	r1, r3
 80043c6:	4819      	ldr	r0, [pc, #100]	@ (800442c <HAL_ADC_ConfigChannel+0x7dc>)
 80043c8:	f7ff f96f 	bl	80036aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043cc:	e021      	b.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <HAL_ADC_ConfigChannel+0x7f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d11c      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a12      	ldr	r2, [pc, #72]	@ (8004434 <HAL_ADC_ConfigChannel+0x7e4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d111      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043f6:	4619      	mov	r1, r3
 80043f8:	480c      	ldr	r0, [pc, #48]	@ (800442c <HAL_ADC_ConfigChannel+0x7dc>)
 80043fa:	f7ff f956 	bl	80036aa <LL_ADC_SetCommonPathInternalCh>
 80043fe:	e008      	b.n	8004412 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800441a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800441e:	4618      	mov	r0, r3
 8004420:	37d8      	adds	r7, #216	@ 0xd8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	80080000 	.word	0x80080000
 800442c:	50040300 	.word	0x50040300
 8004430:	c7520000 	.word	0xc7520000
 8004434:	50040000 	.word	0x50040000
 8004438:	20000068 	.word	0x20000068
 800443c:	053e2d63 	.word	0x053e2d63
 8004440:	cb840000 	.word	0xcb840000
 8004444:	80000001 	.word	0x80000001

08004448 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <LL_EXTI_EnableIT_0_31+0x20>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4904      	ldr	r1, [pc, #16]	@ (8004468 <LL_EXTI_EnableIT_0_31+0x20>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40010400 	.word	0x40010400

0800446c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <LL_EXTI_DisableIT_0_31+0x24>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	43db      	mvns	r3, r3
 800447c:	4904      	ldr	r1, [pc, #16]	@ (8004490 <LL_EXTI_DisableIT_0_31+0x24>)
 800447e:	4013      	ands	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40010400 	.word	0x40010400

08004494 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4904      	ldr	r1, [pc, #16]	@ (80044b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]

}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40010400 	.word	0x40010400

080044b8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	4904      	ldr	r1, [pc, #16]	@ (80044dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010400 	.word	0x40010400

080044e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4904      	ldr	r1, [pc, #16]	@ (8004500 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]

}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40010400 	.word	0x40010400

08004504 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800450c:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	43db      	mvns	r3, r3
 8004514:	4904      	ldr	r1, [pc, #16]	@ (8004528 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004516:	4013      	ands	r3, r2
 8004518:	608b      	str	r3, [r1, #8]

}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010400 	.word	0x40010400

0800452c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004534:	4b05      	ldr	r3, [pc, #20]	@ (800454c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4904      	ldr	r1, [pc, #16]	@ (800454c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4313      	orrs	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40010400 	.word	0x40010400

08004550 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	43db      	mvns	r3, r3
 8004560:	4904      	ldr	r1, [pc, #16]	@ (8004574 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004562:	4013      	ands	r3, r2
 8004564:	60cb      	str	r3, [r1, #12]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010400 	.word	0x40010400

08004578 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004580:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6153      	str	r3, [r2, #20]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010400 	.word	0x40010400

08004598 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e0d1      	b.n	8004758 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045c2:	d102      	bne.n	80045ca <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e0c6      	b.n	8004758 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004764 <HAL_COMP_Init+0x1cc>)
 80045e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004764 <HAL_COMP_Init+0x1cc>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80045f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004764 <HAL_COMP_Init+0x1cc>)
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fe f97f 	bl	8002900 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800460c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b4b      	ldr	r3, [pc, #300]	@ (8004768 <HAL_COMP_Init+0x1d0>)
 800463a:	4013      	ands	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	6979      	ldr	r1, [r7, #20]
 8004642:	430b      	orrs	r3, r1
 8004644:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464e:	d106      	bne.n	800465e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004650:	4b46      	ldr	r3, [pc, #280]	@ (800476c <HAL_COMP_Init+0x1d4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a45      	ldr	r2, [pc, #276]	@ (800476c <HAL_COMP_Init+0x1d4>)
 8004656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e005      	b.n	800466a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800465e:	4b43      	ldr	r3, [pc, #268]	@ (800476c <HAL_COMP_Init+0x1d4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_COMP_Init+0x1d4>)
 8004664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004668:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_COMP_Init+0x10e>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d113      	bne.n	80046a6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800467e:	4b3c      	ldr	r3, [pc, #240]	@ (8004770 <HAL_COMP_Init+0x1d8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	4a3b      	ldr	r2, [pc, #236]	@ (8004774 <HAL_COMP_Init+0x1dc>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	099b      	lsrs	r3, r3, #6
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004698:	e002      	b.n	80046a0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b01      	subs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f9      	bne.n	800469a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a33      	ldr	r2, [pc, #204]	@ (8004778 <HAL_COMP_Init+0x1e0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d102      	bne.n	80046b6 <HAL_COMP_Init+0x11e>
 80046b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046b4:	e001      	b.n	80046ba <HAL_COMP_Init+0x122>
 80046b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046ba:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d037      	beq.n	8004738 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80046d4:	6938      	ldr	r0, [r7, #16]
 80046d6:	f7ff ff03 	bl	80044e0 <LL_EXTI_EnableRisingTrig_0_31>
 80046da:	e002      	b.n	80046e2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80046dc:	6938      	ldr	r0, [r7, #16]
 80046de:	f7ff ff11 	bl	8004504 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7ff ff1c 	bl	800452c <LL_EXTI_EnableFallingTrig_0_31>
 80046f4:	e002      	b.n	80046fc <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f7ff ff2a 	bl	8004550 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80046fc:	6938      	ldr	r0, [r7, #16]
 80046fe:	f7ff ff3b 	bl	8004578 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f7ff fec0 	bl	8004494 <LL_EXTI_EnableEvent_0_31>
 8004714:	e002      	b.n	800471c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004716:	6938      	ldr	r0, [r7, #16]
 8004718:	f7ff fece 	bl	80044b8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004728:	6938      	ldr	r0, [r7, #16]
 800472a:	f7ff fe8d 	bl	8004448 <LL_EXTI_EnableIT_0_31>
 800472e:	e009      	b.n	8004744 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004730:	6938      	ldr	r0, [r7, #16]
 8004732:	f7ff fe9b 	bl	800446c <LL_EXTI_DisableIT_0_31>
 8004736:	e005      	b.n	8004744 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004738:	6938      	ldr	r0, [r7, #16]
 800473a:	f7ff febd 	bl	80044b8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800473e:	6938      	ldr	r0, [r7, #16]
 8004740:	f7ff fe94 	bl	800446c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	ff207d03 	.word	0xff207d03
 800476c:	40010204 	.word	0x40010204
 8004770:	20000068 	.word	0x20000068
 8004774:	053e2d63 	.word	0x053e2d63
 8004778:	40010200 	.word	0x40010200

0800477c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800478c:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <__NVIC_SetPriorityGrouping+0x44>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004798:	4013      	ands	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ae:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <__NVIC_SetPriorityGrouping+0x44>)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	60d3      	str	r3, [r2, #12]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__NVIC_GetPriorityGrouping+0x18>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 0307 	and.w	r3, r3, #7
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	db0b      	blt.n	800480a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	f003 021f 	and.w	r2, r3, #31
 80047f8:	4907      	ldr	r1, [pc, #28]	@ (8004818 <__NVIC_EnableIRQ+0x38>)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2001      	movs	r0, #1
 8004802:	fa00 f202 	lsl.w	r2, r0, r2
 8004806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	e000e100 	.word	0xe000e100

0800481c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db0a      	blt.n	8004846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	490c      	ldr	r1, [pc, #48]	@ (8004868 <__NVIC_SetPriority+0x4c>)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	440b      	add	r3, r1
 8004840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004844:	e00a      	b.n	800485c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4908      	ldr	r1, [pc, #32]	@ (800486c <__NVIC_SetPriority+0x50>)
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	3b04      	subs	r3, #4
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	440b      	add	r3, r1
 800485a:	761a      	strb	r2, [r3, #24]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000e100 	.word	0xe000e100
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	@ 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f1c3 0307 	rsb	r3, r3, #7
 800488a:	2b04      	cmp	r3, #4
 800488c:	bf28      	it	cs
 800488e:	2304      	movcs	r3, #4
 8004890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3304      	adds	r3, #4
 8004896:	2b06      	cmp	r3, #6
 8004898:	d902      	bls.n	80048a0 <NVIC_EncodePriority+0x30>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3b03      	subs	r3, #3
 800489e:	e000      	b.n	80048a2 <NVIC_EncodePriority+0x32>
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	401a      	ands	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b8:	f04f 31ff 	mov.w	r1, #4294967295
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa01 f303 	lsl.w	r3, r1, r3
 80048c2:	43d9      	mvns	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	4313      	orrs	r3, r2
         );
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	@ 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048e8:	d301      	bcc.n	80048ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ea:	2301      	movs	r3, #1
 80048ec:	e00f      	b.n	800490e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <SysTick_Config+0x40>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048f6:	210f      	movs	r1, #15
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	f7ff ff8e 	bl	800481c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <SysTick_Config+0x40>)
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004906:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <SysTick_Config+0x40>)
 8004908:	2207      	movs	r2, #7
 800490a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000e010 	.word	0xe000e010

0800491c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff29 	bl	800477c <__NVIC_SetPriorityGrouping>
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004944:	f7ff ff3e 	bl	80047c4 <__NVIC_GetPriorityGrouping>
 8004948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	6978      	ldr	r0, [r7, #20]
 8004950:	f7ff ff8e 	bl	8004870 <NVIC_EncodePriority>
 8004954:	4602      	mov	r2, r0
 8004956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff5d 	bl	800481c <__NVIC_SetPriority>
}
 8004962:	bf00      	nop
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff ff31 	bl	80047e0 <__NVIC_EnableIRQ>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff ffa2 	bl	80048d8 <SysTick_Config>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ae:	e166      	b.n	8004c7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8158 	beq.w	8004c78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d005      	beq.n	80049e0 <HAL_GPIO_Init+0x40>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d130      	bne.n	8004a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a16:	2201      	movs	r2, #1
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0201 	and.w	r2, r3, #1
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d017      	beq.n	8004a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d123      	bne.n	8004ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	08da      	lsrs	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3208      	adds	r2, #8
 8004a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	08da      	lsrs	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3208      	adds	r2, #8
 8004acc:	6939      	ldr	r1, [r7, #16]
 8004ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2203      	movs	r2, #3
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80b2 	beq.w	8004c78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b14:	4b61      	ldr	r3, [pc, #388]	@ (8004c9c <HAL_GPIO_Init+0x2fc>)
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	4a60      	ldr	r2, [pc, #384]	@ (8004c9c <HAL_GPIO_Init+0x2fc>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b20:	4b5e      	ldr	r3, [pc, #376]	@ (8004c9c <HAL_GPIO_Init+0x2fc>)
 8004b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	3302      	adds	r3, #2
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	220f      	movs	r2, #15
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b56:	d02b      	beq.n	8004bb0 <HAL_GPIO_Init+0x210>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a52      	ldr	r2, [pc, #328]	@ (8004ca4 <HAL_GPIO_Init+0x304>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d025      	beq.n	8004bac <HAL_GPIO_Init+0x20c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a51      	ldr	r2, [pc, #324]	@ (8004ca8 <HAL_GPIO_Init+0x308>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d01f      	beq.n	8004ba8 <HAL_GPIO_Init+0x208>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a50      	ldr	r2, [pc, #320]	@ (8004cac <HAL_GPIO_Init+0x30c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d019      	beq.n	8004ba4 <HAL_GPIO_Init+0x204>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a4f      	ldr	r2, [pc, #316]	@ (8004cb0 <HAL_GPIO_Init+0x310>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_GPIO_Init+0x200>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb4 <HAL_GPIO_Init+0x314>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00d      	beq.n	8004b9c <HAL_GPIO_Init+0x1fc>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a4d      	ldr	r2, [pc, #308]	@ (8004cb8 <HAL_GPIO_Init+0x318>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <HAL_GPIO_Init+0x1f8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8004cbc <HAL_GPIO_Init+0x31c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_GPIO_Init+0x1f4>
 8004b90:	2307      	movs	r3, #7
 8004b92:	e00e      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004b94:	2308      	movs	r3, #8
 8004b96:	e00c      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	e00a      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004b9c:	2305      	movs	r3, #5
 8004b9e:	e008      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	e006      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e004      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e002      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_GPIO_Init+0x212>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	f002 0203 	and.w	r2, r2, #3
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	4093      	lsls	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bc2:	4937      	ldr	r1, [pc, #220]	@ (8004ca0 <HAL_GPIO_Init+0x300>)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	3302      	adds	r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bf4:	4a32      	ldr	r2, [pc, #200]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bfa:	4b31      	ldr	r3, [pc, #196]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c1e:	4a28      	ldr	r2, [pc, #160]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c24:	4b26      	ldr	r3, [pc, #152]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c48:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c72:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <HAL_GPIO_Init+0x320>)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f ae91 	bne.w	80049b0 <HAL_GPIO_Init+0x10>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	48000400 	.word	0x48000400
 8004ca8:	48000800 	.word	0x48000800
 8004cac:	48000c00 	.word	0x48000c00
 8004cb0:	48001000 	.word	0x48001000
 8004cb4:	48001400 	.word	0x48001400
 8004cb8:	48001800 	.word	0x48001800
 8004cbc:	48001c00 	.word	0x48001c00
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	807b      	strh	r3, [r7, #2]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cd4:	787b      	ldrb	r3, [r7, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ce0:	e002      	b.n	8004ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cfe:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fd40 	bl	8001798 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40010400 	.word	0x40010400

08004d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e08d      	b.n	8004e52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd fe2c 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	@ 0x24
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d107      	bne.n	8004d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	e006      	b.n	8004dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d108      	bne.n	8004dc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	e007      	b.n	8004dd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	f040 80fd 	bne.w	8005078 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_I2C_Master_Transmit+0x30>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0f6      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e94:	f7fe fbc6 	bl	8003624 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2319      	movs	r3, #25
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa0a 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0e1      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2221      	movs	r2, #33	@ 0x21
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	893a      	ldrh	r2, [r7, #8]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2bff      	cmp	r3, #255	@ 0xff
 8004ee6:	d906      	bls.n	8004ef6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	22ff      	movs	r2, #255	@ 0xff
 8004eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e007      	b.n	8004f06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d024      	beq.n	8004f58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	8979      	ldrh	r1, [r7, #10]
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005084 <HAL_I2C_Master_Transmit+0x228>)
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fbf1 	bl	8005738 <I2C_TransferConfig>
 8004f56:	e066      	b.n	8005026 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	8979      	ldrh	r1, [r7, #10]
 8004f60:	4b48      	ldr	r3, [pc, #288]	@ (8005084 <HAL_I2C_Master_Transmit+0x228>)
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fbe6 	bl	8005738 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f6c:	e05b      	b.n	8005026 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f9f3 	bl	800535e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07b      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d034      	beq.n	8005026 <HAL_I2C_Master_Transmit+0x1ca>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d130      	bne.n	8005026 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	@ 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f976 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e04d      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2bff      	cmp	r3, #255	@ 0xff
 8004fe6:	d90e      	bls.n	8005006 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	@ 0xff
 8004fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	8979      	ldrh	r1, [r7, #10]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fb9a 	bl	8005738 <I2C_TransferConfig>
 8005004:	e00f      	b.n	8005026 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	b2da      	uxtb	r2, r3
 8005016:	8979      	ldrh	r1, [r7, #10]
 8005018:	2300      	movs	r3, #0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fb89 	bl	8005738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d19e      	bne.n	8004f6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	6a39      	ldr	r1, [r7, #32]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f9d9 	bl	80053ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e01a      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2220      	movs	r2, #32
 800504a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6859      	ldr	r1, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <HAL_I2C_Master_Transmit+0x22c>)
 8005058:	400b      	ands	r3, r1
 800505a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	e000      	b.n	800507a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
  }
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	80002000 	.word	0x80002000
 8005088:	fe00e800 	.word	0xfe00e800

0800508c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	460b      	mov	r3, r1
 800509a:	817b      	strh	r3, [r7, #10]
 800509c:	4613      	mov	r3, r2
 800509e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	f040 80db 	bne.w	8005264 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_Master_Receive+0x30>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0d4      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050c4:	f7fe faae 	bl	8003624 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2319      	movs	r3, #25
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8f2 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0bf      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2222      	movs	r2, #34	@ 0x22
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2bff      	cmp	r3, #255	@ 0xff
 8005116:	d90e      	bls.n	8005136 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	22ff      	movs	r2, #255	@ 0xff
 800511c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	8979      	ldrh	r1, [r7, #10]
 8005126:	4b52      	ldr	r3, [pc, #328]	@ (8005270 <HAL_I2C_Master_Receive+0x1e4>)
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fb02 	bl	8005738 <I2C_TransferConfig>
 8005134:	e06d      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	b2da      	uxtb	r2, r3
 8005146:	8979      	ldrh	r1, [r7, #10]
 8005148:	4b49      	ldr	r3, [pc, #292]	@ (8005270 <HAL_I2C_Master_Receive+0x1e4>)
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 faf1 	bl	8005738 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005156:	e05c      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	6a39      	ldr	r1, [r7, #32]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f989 	bl	8005474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e07c      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d034      	beq.n	8005212 <HAL_I2C_Master_Receive+0x186>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d130      	bne.n	8005212 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2180      	movs	r1, #128	@ 0x80
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f880 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e04d      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2bff      	cmp	r3, #255	@ 0xff
 80051d2:	d90e      	bls.n	80051f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	22ff      	movs	r2, #255	@ 0xff
 80051d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 faa4 	bl	8005738 <I2C_TransferConfig>
 80051f0:	e00f      	b.n	8005212 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	b2da      	uxtb	r2, r3
 8005202:	8979      	ldrh	r1, [r7, #10]
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fa93 	bl	8005738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d19d      	bne.n	8005158 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	6a39      	ldr	r1, [r7, #32]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f8e3 	bl	80053ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01a      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2220      	movs	r2, #32
 8005236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6859      	ldr	r1, [r3, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <HAL_I2C_Master_Receive+0x1e8>)
 8005244:	400b      	ands	r3, r1
 8005246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	80002400 	.word	0x80002400
 8005274:	fe00e800 	.word	0xfe00e800

08005278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d103      	bne.n	8005296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d007      	beq.n	80052b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	619a      	str	r2, [r3, #24]
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d0:	e031      	b.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d02d      	beq.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe f9a3 	bl	8003624 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d122      	bne.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	429a      	cmp	r2, r3
 800530c:	d113      	bne.n	8005336 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e00f      	b.n	8005356 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	429a      	cmp	r2, r3
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	429a      	cmp	r2, r3
 8005352:	d0be      	beq.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800536a:	e033      	b.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f901 	bl	8005578 <I2C_IsErrorOccurred>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e031      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d025      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005388:	f7fe f94c 	bl	8003624 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11a      	bne.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d013      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d1c4      	bne.n	800536c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f8:	e02f      	b.n	800545a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8ba 	bl	8005578 <I2C_IsErrorOccurred>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e02d      	b.n	800546a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fe f909 	bl	8003624 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11a      	bne.n	800545a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b20      	cmp	r3, #32
 8005430:	d013      	beq.n	800545a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e007      	b.n	800546a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b20      	cmp	r3, #32
 8005466:	d1c8      	bne.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005480:	e06b      	b.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f876 	bl	8005578 <I2C_IsErrorOccurred>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e069      	b.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d138      	bne.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d105      	bne.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e055      	b.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d107      	bne.n	80054dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2210      	movs	r2, #16
 80054d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2204      	movs	r2, #4
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80054da:	e002      	b.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2220      	movs	r2, #32
 80054e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005574 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80054f6:	400b      	ands	r3, r1
 80054f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e029      	b.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fe f885 	bl	8003624 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d00f      	beq.n	800555a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e007      	b.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b04      	cmp	r3, #4
 8005566:	d18c      	bne.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	fe00e800 	.word	0xfe00e800

08005578 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d068      	beq.n	8005676 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2210      	movs	r2, #16
 80055aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055ac:	e049      	b.n	8005642 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d045      	beq.n	8005642 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fe f835 	bl	8003624 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <I2C_IsErrorOccurred+0x54>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13a      	bne.n	8005642 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ee:	d121      	bne.n	8005634 <I2C_IsErrorOccurred+0xbc>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055f6:	d01d      	beq.n	8005634 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d01a      	beq.n	8005634 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800560c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800560e:	f7fe f809 	bl	8003624 <HAL_GetTick>
 8005612:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005614:	e00e      	b.n	8005634 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005616:	f7fe f805 	bl	8003624 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b19      	cmp	r3, #25
 8005622:	d907      	bls.n	8005634 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f043 0320 	orr.w	r3, r3, #32
 800562a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005632:	e006      	b.n	8005642 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b20      	cmp	r3, #32
 8005640:	d1e9      	bne.n	8005616 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d003      	beq.n	8005658 <I2C_IsErrorOccurred+0xe0>
 8005650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0aa      	beq.n	80055ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565c:	2b00      	cmp	r3, #0
 800565e:	d103      	bne.n	8005668 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2220      	movs	r2, #32
 8005666:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	f043 0304 	orr.w	r3, r3, #4
 800566e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f043 0308 	orr.w	r3, r3, #8
 80056b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80056e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01c      	beq.n	8005726 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fdc3 	bl	8005278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005734 <I2C_IsErrorOccurred+0x1bc>)
 80056fe:	400b      	ands	r3, r1
 8005700:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	@ 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	fe00e800 	.word	0xfe00e800

08005738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	4613      	mov	r3, r2
 8005748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005750:	7a7b      	ldrb	r3, [r7, #9]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005758:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	4313      	orrs	r3, r2
 8005762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005766:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	0d5b      	lsrs	r3, r3, #21
 8005772:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005776:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <I2C_TransferConfig+0x60>)
 8005778:	430b      	orrs	r3, r1
 800577a:	43db      	mvns	r3, r3
 800577c:	ea02 0103 	and.w	r1, r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	03ff63ff 	.word	0x03ff63ff

0800579c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d138      	bne.n	8005824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057bc:	2302      	movs	r3, #2
 80057be:	e032      	b.n	8005826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2224      	movs	r2, #36	@ 0x24
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b20      	cmp	r3, #32
 8005846:	d139      	bne.n	80058bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005852:	2302      	movs	r3, #2
 8005854:	e033      	b.n	80058be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	@ 0x24
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d0:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40007000 	.word	0x40007000

080058ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <HAL_PWREx_GetVoltageRange+0x3c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fc:	d102      	bne.n	8005904 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80058fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005902:	e00b      	b.n	800591c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005904:	4b08      	ldr	r3, [pc, #32]	@ (8005928 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005912:	d102      	bne.n	800591a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005918:	e000      	b.n	800591c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800591a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40007000 	.word	0x40007000

0800592c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d141      	bne.n	80059be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800593a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005946:	d131      	bne.n	80059ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005948:	4b47      	ldr	r3, [pc, #284]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594e:	4a46      	ldr	r2, [pc, #280]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005954:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005958:	4b43      	ldr	r3, [pc, #268]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005960:	4a41      	ldr	r2, [pc, #260]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005968:	4b40      	ldr	r3, [pc, #256]	@ (8005a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2232      	movs	r2, #50	@ 0x32
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	4a3f      	ldr	r2, [pc, #252]	@ (8005a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	0c9b      	lsrs	r3, r3, #18
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800597e:	e002      	b.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b01      	subs	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005992:	d102      	bne.n	800599a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f2      	bne.n	8005980 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d158      	bne.n	8005a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e057      	b.n	8005a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059bc:	e04d      	b.n	8005a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c4:	d141      	bne.n	8005a4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059c6:	4b28      	ldr	r3, [pc, #160]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d2:	d131      	bne.n	8005a38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059d4:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	4a23      	ldr	r2, [pc, #140]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059e4:	4b20      	ldr	r3, [pc, #128]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80059f4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2232      	movs	r2, #50	@ 0x32
 80059fa:	fb02 f303 	mul.w	r3, r2, r3
 80059fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	0c9b      	lsrs	r3, r3, #18
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a0a:	e002      	b.n	8005a12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a12:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1e:	d102      	bne.n	8005a26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f2      	bne.n	8005a0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a32:	d112      	bne.n	8005a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e011      	b.n	8005a5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a38:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a48:	e007      	b.n	8005a5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a4a:	4b07      	ldr	r3, [pc, #28]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a52:	4a05      	ldr	r2, [pc, #20]	@ (8005a68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	20000068 	.word	0x20000068
 8005a70:	431bde83 	.word	0x431bde83

08005a74 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a82:	6053      	str	r3, [r2, #4]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40007000 	.word	0x40007000

08005a94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f000 bc08 	b.w	80062b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa8:	4b96      	ldr	r3, [pc, #600]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 030c 	and.w	r3, r3, #12
 8005ab0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab2:	4b94      	ldr	r3, [pc, #592]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80e4 	beq.w	8005c92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x4c>
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	f040 808b 	bne.w	8005bee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	f040 8087 	bne.w	8005bee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ae0:	4b88      	ldr	r3, [pc, #544]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_OscConfig+0x64>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e3df      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	4b81      	ldr	r3, [pc, #516]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <HAL_RCC_OscConfig+0x7e>
 8005b08:	4b7e      	ldr	r3, [pc, #504]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b10:	e005      	b.n	8005b1e <HAL_RCC_OscConfig+0x8a>
 8005b12:	4b7c      	ldr	r3, [pc, #496]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d223      	bcs.n	8005b6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fdcc 	bl	80066c4 <RCC_SetFlashLatencyFromMSIRange>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e3c0      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b36:	4b73      	ldr	r3, [pc, #460]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a72      	ldr	r2, [pc, #456]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b3c:	f043 0308 	orr.w	r3, r3, #8
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	4b70      	ldr	r3, [pc, #448]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	496d      	ldr	r1, [pc, #436]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b54:	4b6b      	ldr	r3, [pc, #428]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	4968      	ldr	r1, [pc, #416]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
 8005b68:	e025      	b.n	8005bb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b6a:	4b66      	ldr	r3, [pc, #408]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a65      	ldr	r2, [pc, #404]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b70:	f043 0308 	orr.w	r3, r3, #8
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b63      	ldr	r3, [pc, #396]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	4960      	ldr	r1, [pc, #384]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b88:	4b5e      	ldr	r3, [pc, #376]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	495b      	ldr	r1, [pc, #364]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fd8c 	bl	80066c4 <RCC_SetFlashLatencyFromMSIRange>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e380      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb6:	f000 fcc1 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b51      	ldr	r3, [pc, #324]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	4950      	ldr	r1, [pc, #320]	@ (8005d08 <HAL_RCC_OscConfig+0x274>)
 8005bc8:	5ccb      	ldrb	r3, [r1, r3]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8005d0c <HAL_RCC_OscConfig+0x278>)
 8005bd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005d10 <HAL_RCC_OscConfig+0x27c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fd fcd2 	bl	8003584 <HAL_InitTick>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d052      	beq.n	8005c90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	e364      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d032      	beq.n	8005c5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bf6:	4b43      	ldr	r3, [pc, #268]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a42      	ldr	r2, [pc, #264]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c02:	f7fd fd0f 	bl	8003624 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c0a:	f7fd fd0b 	bl	8003624 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e34d      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c1c:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c28:	4b36      	ldr	r3, [pc, #216]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a35      	ldr	r2, [pc, #212]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	f043 0308 	orr.w	r3, r3, #8
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	4b33      	ldr	r3, [pc, #204]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	4930      	ldr	r1, [pc, #192]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c46:	4b2f      	ldr	r3, [pc, #188]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	492b      	ldr	r1, [pc, #172]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]
 8005c5a:	e01a      	b.n	8005c92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c5c:	4b29      	ldr	r3, [pc, #164]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a28      	ldr	r2, [pc, #160]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c68:	f7fd fcdc 	bl	8003624 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c70:	f7fd fcd8 	bl	8003624 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e31a      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c82:	4b20      	ldr	r3, [pc, #128]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x1dc>
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d073      	beq.n	8005d86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x21c>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d10b      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb0:	4b14      	ldr	r3, [pc, #80]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d063      	beq.n	8005d84 <HAL_RCC_OscConfig+0x2f0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d15f      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e2f7      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x24c>
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e025      	b.n	8005d2c <HAL_RCC_OscConfig+0x298>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ce8:	d114      	bne.n	8005d14 <HAL_RCC_OscConfig+0x280>
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a05      	ldr	r2, [pc, #20]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4b03      	ldr	r3, [pc, #12]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a02      	ldr	r2, [pc, #8]	@ (8005d04 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e013      	b.n	8005d2c <HAL_RCC_OscConfig+0x298>
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800ded8 	.word	0x0800ded8
 8005d0c:	20000068 	.word	0x20000068
 8005d10:	2000006c 	.word	0x2000006c
 8005d14:	4ba0      	ldr	r3, [pc, #640]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a9f      	ldr	r2, [pc, #636]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	4b9d      	ldr	r3, [pc, #628]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a9c      	ldr	r2, [pc, #624]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d013      	beq.n	8005d5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d34:	f7fd fc76 	bl	8003624 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d3c:	f7fd fc72 	bl	8003624 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b64      	cmp	r3, #100	@ 0x64
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e2b4      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4e:	4b92      	ldr	r3, [pc, #584]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x2a8>
 8005d5a:	e014      	b.n	8005d86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fd fc62 	bl	8003624 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d64:	f7fd fc5e 	bl	8003624 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	@ 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e2a0      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d76:	4b88      	ldr	r3, [pc, #544]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x2d0>
 8005d82:	e000      	b.n	8005d86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d060      	beq.n	8005e54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_OscConfig+0x310>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d119      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d116      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005da4:	4b7c      	ldr	r3, [pc, #496]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_OscConfig+0x328>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e27d      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b76      	ldr	r3, [pc, #472]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	4973      	ldr	r1, [pc, #460]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd0:	e040      	b.n	8005e54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d023      	beq.n	8005e22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dda:	4b6f      	ldr	r3, [pc, #444]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6e      	ldr	r2, [pc, #440]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fd fc1d 	bl	8003624 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fd fc19 	bl	8003624 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e25b      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e00:	4b65      	ldr	r3, [pc, #404]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0c:	4b62      	ldr	r3, [pc, #392]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	495f      	ldr	r1, [pc, #380]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
 8005e20:	e018      	b.n	8005e54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e22:	4b5d      	ldr	r3, [pc, #372]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a5c      	ldr	r2, [pc, #368]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fd fbf9 	bl	8003624 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e36:	f7fd fbf5 	bl	8003624 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e237      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e48:	4b53      	ldr	r3, [pc, #332]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d03c      	beq.n	8005eda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e78:	f7fd fbd4 	bl	8003624 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e80:	f7fd fbd0 	bl	8003624 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e212      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e92:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ef      	beq.n	8005e80 <HAL_RCC_OscConfig+0x3ec>
 8005ea0:	e01b      	b.n	8005eda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb2:	f7fd fbb7 	bl	8003624 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eba:	f7fd fbb3 	bl	8003624 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1f5      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ecc:	4b32      	ldr	r3, [pc, #200]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ef      	bne.n	8005eba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a6 	beq.w	8006034 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005eec:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef8:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	4a26      	ldr	r2, [pc, #152]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f04:	4b24      	ldr	r3, [pc, #144]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f14:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <HAL_RCC_OscConfig+0x508>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d118      	bne.n	8005f52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f20:	4b1e      	ldr	r3, [pc, #120]	@ (8005f9c <HAL_RCC_OscConfig+0x508>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	@ (8005f9c <HAL_RCC_OscConfig+0x508>)
 8005f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f2c:	f7fd fb7a 	bl	8003624 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f34:	f7fd fb76 	bl	8003624 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e1b8      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f46:	4b15      	ldr	r3, [pc, #84]	@ (8005f9c <HAL_RCC_OscConfig+0x508>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d108      	bne.n	8005f6c <HAL_RCC_OscConfig+0x4d8>
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f60:	4a0d      	ldr	r2, [pc, #52]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f6a:	e029      	b.n	8005fc0 <HAL_RCC_OscConfig+0x52c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x50c>
 8005f74:	4b08      	ldr	r3, [pc, #32]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7a:	4a07      	ldr	r2, [pc, #28]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f7c:	f043 0304 	orr.w	r3, r3, #4
 8005f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f84:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	4a03      	ldr	r2, [pc, #12]	@ (8005f98 <HAL_RCC_OscConfig+0x504>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f94:	e014      	b.n	8005fc0 <HAL_RCC_OscConfig+0x52c>
 8005f96:	bf00      	nop
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	4b9d      	ldr	r3, [pc, #628]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa6:	4a9c      	ldr	r2, [pc, #624]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fb0:	4b99      	ldr	r3, [pc, #612]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	4a98      	ldr	r2, [pc, #608]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8005fb8:	f023 0304 	bic.w	r3, r3, #4
 8005fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d016      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fd fb2c 	bl	8003624 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd0:	f7fd fb28 	bl	8003624 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e168      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ed      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x53c>
 8005ff4:	e015      	b.n	8006022 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fb15 	bl	8003624 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fd fb11 	bl	8003624 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e151      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006014:	4b80      	ldr	r3, [pc, #512]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ed      	bne.n	8005ffe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006022:	7ffb      	ldrb	r3, [r7, #31]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d105      	bne.n	8006034 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006028:	4b7b      	ldr	r3, [pc, #492]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	4a7a      	ldr	r2, [pc, #488]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 800602e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d03c      	beq.n	80060ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01c      	beq.n	8006082 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006048:	4b73      	ldr	r3, [pc, #460]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 800604a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800604e:	4a72      	ldr	r2, [pc, #456]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006058:	f7fd fae4 	bl	8003624 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006060:	f7fd fae0 	bl	8003624 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e122      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006072:	4b69      	ldr	r3, [pc, #420]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0ef      	beq.n	8006060 <HAL_RCC_OscConfig+0x5cc>
 8006080:	e01b      	b.n	80060ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006082:	4b65      	ldr	r3, [pc, #404]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006088:	4a63      	ldr	r2, [pc, #396]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006092:	f7fd fac7 	bl	8003624 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800609a:	f7fd fac3 	bl	8003624 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e105      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80060ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1ef      	bne.n	800609a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80f9 	beq.w	80062b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f040 80cf 	bne.w	800626c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060ce:	4b52      	ldr	r3, [pc, #328]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f003 0203 	and.w	r2, r3, #3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d12c      	bne.n	800613c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	3b01      	subs	r3, #1
 80060ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d123      	bne.n	800613c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d11b      	bne.n	800613c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006110:	429a      	cmp	r2, r3
 8006112:	d113      	bne.n	800613c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	3b01      	subs	r3, #1
 8006122:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d109      	bne.n	800613c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	3b01      	subs	r3, #1
 8006136:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d071      	beq.n	8006220 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d068      	beq.n	8006214 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006142:	4b35      	ldr	r3, [pc, #212]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800614e:	4b32      	ldr	r3, [pc, #200]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e0ac      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800615e:	4b2e      	ldr	r3, [pc, #184]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006164:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006168:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800616a:	f7fd fa5b 	bl	8003624 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006172:	f7fd fa57 	bl	8003624 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e099      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006184:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f0      	bne.n	8006172 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	4b21      	ldr	r3, [pc, #132]	@ (800621c <HAL_RCC_OscConfig+0x788>)
 8006196:	4013      	ands	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061a0:	3a01      	subs	r2, #1
 80061a2:	0112      	lsls	r2, r2, #4
 80061a4:	4311      	orrs	r1, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061aa:	0212      	lsls	r2, r2, #8
 80061ac:	4311      	orrs	r1, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061b2:	0852      	lsrs	r2, r2, #1
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0552      	lsls	r2, r2, #21
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061be:	0852      	lsrs	r2, r2, #1
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0652      	lsls	r2, r2, #25
 80061c4:	4311      	orrs	r1, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061ca:	06d2      	lsls	r2, r2, #27
 80061cc:	430a      	orrs	r2, r1
 80061ce:	4912      	ldr	r1, [pc, #72]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061d4:	4b10      	ldr	r3, [pc, #64]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80061da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 80061e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061ec:	f7fd fa1a 	bl	8003624 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fd fa16 	bl	8003624 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e058      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006206:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <HAL_RCC_OscConfig+0x784>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006212:	e050      	b.n	80062b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e04f      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
 8006218:	40021000 	.word	0x40021000
 800621c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006220:	4b27      	ldr	r3, [pc, #156]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d144      	bne.n	80062b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800622c:	4b24      	ldr	r3, [pc, #144]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a23      	ldr	r2, [pc, #140]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 8006232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006238:	4b21      	ldr	r3, [pc, #132]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a20      	ldr	r2, [pc, #128]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 800623e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006244:	f7fd f9ee 	bl	8003624 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fd f9ea 	bl	8003624 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e02c      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625e:	4b18      	ldr	r3, [pc, #96]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x7b8>
 800626a:	e024      	b.n	80062b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d01f      	beq.n	80062b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006272:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 8006278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800627c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fd f9d1 	bl	8003624 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006286:	f7fd f9cd 	bl	8003624 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e00f      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006298:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f0      	bne.n	8006286 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	4905      	ldr	r1, [pc, #20]	@ (80062c0 <HAL_RCC_OscConfig+0x82c>)
 80062aa:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <HAL_RCC_OscConfig+0x830>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60cb      	str	r3, [r1, #12]
 80062b0:	e001      	b.n	80062b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40021000 	.word	0x40021000
 80062c4:	feeefffc 	.word	0xfeeefffc

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e11d      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e0:	4b90      	ldr	r3, [pc, #576]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d910      	bls.n	8006310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	498b      	ldr	r1, [pc, #556]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b89      	ldr	r3, [pc, #548]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e105      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d010      	beq.n	800633e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	4b81      	ldr	r3, [pc, #516]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006328:	429a      	cmp	r2, r3
 800632a:	d908      	bls.n	800633e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632c:	4b7e      	ldr	r3, [pc, #504]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	497b      	ldr	r1, [pc, #492]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d079      	beq.n	800643e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d11e      	bne.n	8006390 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006352:	4b75      	ldr	r3, [pc, #468]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e0dc      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006362:	f000 fa09 	bl	8006778 <RCC_GetSysClockFreqFromPLLSource>
 8006366:	4603      	mov	r3, r0
 8006368:	4a70      	ldr	r2, [pc, #448]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d946      	bls.n	80063fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800636e:	4b6e      	ldr	r3, [pc, #440]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d140      	bne.n	80063fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800637a:	4b6b      	ldr	r3, [pc, #428]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006382:	4a69      	ldr	r2, [pc, #420]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800638a:	2380      	movs	r3, #128	@ 0x80
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e035      	b.n	80063fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d107      	bne.n	80063a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006398:	4b63      	ldr	r3, [pc, #396]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d115      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0b9      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063b0:	4b5d      	ldr	r3, [pc, #372]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0ad      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c0:	4b59      	ldr	r3, [pc, #356]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0a5      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80063d0:	f000 f8b4 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a55      	ldr	r2, [pc, #340]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d90f      	bls.n	80063fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80063dc:	4b52      	ldr	r3, [pc, #328]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063e8:	4b4f      	ldr	r3, [pc, #316]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063f0:	4a4d      	ldr	r2, [pc, #308]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063f8:	2380      	movs	r3, #128	@ 0x80
 80063fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 0203 	bic.w	r2, r3, #3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4947      	ldr	r1, [pc, #284]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640e:	f7fd f909 	bl	8003624 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006414:	e00a      	b.n	800642c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006416:	f7fd f905 	bl	8003624 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006424:	4293      	cmp	r3, r2
 8006426:	d901      	bls.n	800642c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e077      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642c:	4b3e      	ldr	r3, [pc, #248]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 020c 	and.w	r2, r3, #12
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	429a      	cmp	r2, r3
 800643c:	d1eb      	bne.n	8006416 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b80      	cmp	r3, #128	@ 0x80
 8006442:	d105      	bne.n	8006450 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006444:	4b38      	ldr	r3, [pc, #224]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a37      	ldr	r2, [pc, #220]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800644a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800644e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	4b31      	ldr	r3, [pc, #196]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006468:	429a      	cmp	r2, r3
 800646a:	d208      	bcs.n	800647e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800646c:	4b2e      	ldr	r3, [pc, #184]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	492b      	ldr	r1, [pc, #172]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800647e:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d210      	bcs.n	80064ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f023 020f 	bic.w	r2, r3, #15
 8006494:	4923      	ldr	r1, [pc, #140]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649c:	4b21      	ldr	r3, [pc, #132]	@ (8006524 <HAL_RCC_ClockConfig+0x25c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e036      	b.n	800651c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4918      	ldr	r1, [pc, #96]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d8:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4910      	ldr	r1, [pc, #64]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064ec:	f000 f826 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	490c      	ldr	r1, [pc, #48]	@ (8006530 <HAL_RCC_ClockConfig+0x268>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
 8006508:	4a0a      	ldr	r2, [pc, #40]	@ (8006534 <HAL_RCC_ClockConfig+0x26c>)
 800650a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <HAL_RCC_ClockConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd f837 	bl	8003584 <HAL_InitTick>
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]

  return status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40022000 	.word	0x40022000
 8006528:	40021000 	.word	0x40021000
 800652c:	04c4b400 	.word	0x04c4b400
 8006530:	0800ded8 	.word	0x0800ded8
 8006534:	20000068 	.word	0x20000068
 8006538:	2000006c 	.word	0x2000006c

0800653c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800653c:	b480      	push	{r7}
 800653e:	b089      	sub	sp, #36	@ 0x24
 8006540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800654a:	4b3e      	ldr	r3, [pc, #248]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 030c 	and.w	r3, r3, #12
 8006552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006554:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_RCC_GetSysClockFreq+0x34>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d121      	bne.n	80065ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d11e      	bne.n	80065ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006570:	4b34      	ldr	r3, [pc, #208]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800657c:	4b31      	ldr	r3, [pc, #196]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 800657e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e005      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800658c:	4b2d      	ldr	r3, [pc, #180]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006598:	4a2b      	ldr	r2, [pc, #172]	@ (8006648 <HAL_RCC_GetSysClockFreq+0x10c>)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065ac:	e00a      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d102      	bne.n	80065ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <HAL_RCC_GetSysClockFreq+0x110>)
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e004      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065c0:	4b23      	ldr	r3, [pc, #140]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x114>)
 80065c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	d134      	bne.n	8006634 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d003      	beq.n	80065e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d003      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0xac>
 80065e0:	e005      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065e2:	4b1a      	ldr	r3, [pc, #104]	@ (800664c <HAL_RCC_GetSysClockFreq+0x110>)
 80065e4:	617b      	str	r3, [r7, #20]
      break;
 80065e6:	e005      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065e8:	4b19      	ldr	r3, [pc, #100]	@ (8006650 <HAL_RCC_GetSysClockFreq+0x114>)
 80065ea:	617b      	str	r3, [r7, #20]
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	617b      	str	r3, [r7, #20]
      break;
 80065f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065f4:	4b13      	ldr	r3, [pc, #76]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	3301      	adds	r3, #1
 8006600:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006602:	4b10      	ldr	r3, [pc, #64]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	fb03 f202 	mul.w	r2, r3, r2
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800661a:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x108>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	0e5b      	lsrs	r3, r3, #25
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	3301      	adds	r3, #1
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006634:	69bb      	ldr	r3, [r7, #24]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3724      	adds	r7, #36	@ 0x24
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	0800def0 	.word	0x0800def0
 800664c:	00f42400 	.word	0x00f42400
 8006650:	007a1200 	.word	0x007a1200

08006654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006658:	4b03      	ldr	r3, [pc, #12]	@ (8006668 <HAL_RCC_GetHCLKFreq+0x14>)
 800665a:	681b      	ldr	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000068 	.word	0x20000068

0800666c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006670:	f7ff fff0 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 8006674:	4602      	mov	r2, r0
 8006676:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	0a1b      	lsrs	r3, r3, #8
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	4904      	ldr	r1, [pc, #16]	@ (8006694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006682:	5ccb      	ldrb	r3, [r1, r3]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000
 8006694:	0800dee8 	.word	0x0800dee8

08006698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800669c:	f7ff ffda 	bl	8006654 <HAL_RCC_GetHCLKFreq>
 80066a0:	4602      	mov	r2, r0
 80066a2:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0adb      	lsrs	r3, r3, #11
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	4904      	ldr	r1, [pc, #16]	@ (80066c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ae:	5ccb      	ldrb	r3, [r1, r3]
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40021000 	.word	0x40021000
 80066c0:	0800dee8 	.word	0x0800dee8

080066c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066d0:	4b27      	ldr	r3, [pc, #156]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066dc:	f7ff f906 	bl	80058ec <HAL_PWREx_GetVoltageRange>
 80066e0:	6178      	str	r0, [r7, #20]
 80066e2:	e014      	b.n	800670e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e4:	4b22      	ldr	r3, [pc, #136]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e8:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80066f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066fc:	f7ff f8f6 	bl	80058ec <HAL_PWREx_GetVoltageRange>
 8006700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006702:	4b1b      	ldr	r3, [pc, #108]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006706:	4a1a      	ldr	r2, [pc, #104]	@ (8006770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006714:	d10b      	bne.n	800672e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b80      	cmp	r3, #128	@ 0x80
 800671a:	d913      	bls.n	8006744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006720:	d902      	bls.n	8006728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006722:	2302      	movs	r3, #2
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e00d      	b.n	8006744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006728:	2301      	movs	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	e00a      	b.n	8006744 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b7f      	cmp	r3, #127	@ 0x7f
 8006732:	d902      	bls.n	800673a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006734:	2302      	movs	r3, #2
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e004      	b.n	8006744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b70      	cmp	r3, #112	@ 0x70
 800673e:	d101      	bne.n	8006744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006740:	2301      	movs	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006744:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 020f 	bic.w	r2, r3, #15
 800674c:	4909      	ldr	r1, [pc, #36]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006754:	4b07      	ldr	r3, [pc, #28]	@ (8006774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d001      	beq.n	8006766 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40021000 	.word	0x40021000
 8006774:	40022000 	.word	0x40022000

08006778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800677e:	4b2d      	ldr	r3, [pc, #180]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d00b      	beq.n	80067a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d825      	bhi.n	80067e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d008      	beq.n	80067ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d11f      	bne.n	80067e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80067a0:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80067a2:	613b      	str	r3, [r7, #16]
    break;
 80067a4:	e01f      	b.n	80067e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80067a6:	4b25      	ldr	r3, [pc, #148]	@ (800683c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80067a8:	613b      	str	r3, [r7, #16]
    break;
 80067aa:	e01c      	b.n	80067e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067ac:	4b21      	ldr	r3, [pc, #132]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d107      	bne.n	80067c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e005      	b.n	80067d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	091b      	lsrs	r3, r3, #4
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80067d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067dc:	613b      	str	r3, [r7, #16]
    break;
 80067de:	e002      	b.n	80067e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
    break;
 80067e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067e6:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	3301      	adds	r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	fb03 f202 	mul.w	r2, r3, r2
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800680c:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	0e5b      	lsrs	r3, r3, #25
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	3301      	adds	r3, #1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006826:	683b      	ldr	r3, [r7, #0]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40021000 	.word	0x40021000
 8006838:	00f42400 	.word	0x00f42400
 800683c:	007a1200 	.word	0x007a1200
 8006840:	0800def0 	.word	0x0800def0

08006844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800684c:	2300      	movs	r3, #0
 800684e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006850:	2300      	movs	r3, #0
 8006852:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800685c:	2b00      	cmp	r3, #0
 800685e:	d040      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006864:	2b80      	cmp	r3, #128	@ 0x80
 8006866:	d02a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006868:	2b80      	cmp	r3, #128	@ 0x80
 800686a:	d825      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800686c:	2b60      	cmp	r3, #96	@ 0x60
 800686e:	d026      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006870:	2b60      	cmp	r3, #96	@ 0x60
 8006872:	d821      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	d006      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d81d      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d010      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006884:	e018      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006886:	4b89      	ldr	r3, [pc, #548]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	4a88      	ldr	r2, [pc, #544]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800688c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006890:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006892:	e015      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fa34 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068a4:	e00c      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3320      	adds	r3, #32
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fb1f 	bl	8007ef0 <RCCEx_PLLSAI2_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	74fb      	strb	r3, [r7, #19]
      break;
 80068bc:	e000      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80068be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c0:	7cfb      	ldrb	r3, [r7, #19]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c6:	4b79      	ldr	r3, [pc, #484]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d4:	4975      	ldr	r1, [pc, #468]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80068dc:	e001      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	7cfb      	ldrb	r3, [r7, #19]
 80068e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d047      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f6:	d030      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fc:	d82a      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80068fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006902:	d02a      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006908:	d824      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800690a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800690e:	d008      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006914:	d81e      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800691a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691e:	d010      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006920:	e018      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006922:	4b62      	ldr	r3, [pc, #392]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4a61      	ldr	r2, [pc, #388]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800692e:	e015      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2100      	movs	r1, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f9e6 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3320      	adds	r3, #32
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fad1 	bl	8007ef0 <RCCEx_PLLSAI2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006952:	e003      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	74fb      	strb	r3, [r7, #19]
      break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7cfb      	ldrb	r3, [r7, #19]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006962:	4b52      	ldr	r3, [pc, #328]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006970:	494e      	ldr	r1, [pc, #312]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006978:	e001      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 809f 	beq.w	8006aca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800698c:	2300      	movs	r3, #0
 800698e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006990:	4b46      	ldr	r3, [pc, #280]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00d      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a6:	4b41      	ldr	r3, [pc, #260]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069aa:	4a40      	ldr	r2, [pc, #256]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069b2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069be:	2301      	movs	r3, #1
 80069c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3a      	ldr	r2, [pc, #232]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069ce:	f7fc fe29 	bl	8003624 <HAL_GetTick>
 80069d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069d4:	e009      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d6:	f7fc fe25 	bl	8003624 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d902      	bls.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	74fb      	strb	r3, [r7, #19]
        break;
 80069e8:	e005      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069ea:	4b31      	ldr	r3, [pc, #196]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80069f6:	7cfb      	ldrb	r3, [r7, #19]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d15b      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069fc:	4b2b      	ldr	r3, [pc, #172]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01f      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d019      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a1a:	4b24      	ldr	r3, [pc, #144]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a26:	4b21      	ldr	r3, [pc, #132]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a36:	4b1d      	ldr	r3, [pc, #116]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a46:	4a19      	ldr	r2, [pc, #100]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fc fde4 	bl	8003624 <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a5e:	e00b      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a60:	f7fc fde0 	bl	8003624 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d902      	bls.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	74fb      	strb	r3, [r7, #19]
            break;
 8006a76:	e006      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a78:	4b0c      	ldr	r3, [pc, #48]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0ec      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a8c:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9c:	4903      	ldr	r1, [pc, #12]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aa6:	7cfb      	ldrb	r3, [r7, #19]
 8006aa8:	74bb      	strb	r3, [r7, #18]
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
 8006ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ab8:	7c7b      	ldrb	r3, [r7, #17]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d105      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abe:	4ba0      	ldr	r3, [pc, #640]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	4a9f      	ldr	r2, [pc, #636]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ad6:	4b9a      	ldr	r3, [pc, #616]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	f023 0203 	bic.w	r2, r3, #3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	4996      	ldr	r1, [pc, #600]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006af8:	4b91      	ldr	r3, [pc, #580]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afe:	f023 020c 	bic.w	r2, r3, #12
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	498e      	ldr	r1, [pc, #568]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b1a:	4b89      	ldr	r3, [pc, #548]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b28:	4985      	ldr	r1, [pc, #532]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b3c:	4b80      	ldr	r3, [pc, #512]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4a:	497d      	ldr	r1, [pc, #500]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b5e:	4b78      	ldr	r3, [pc, #480]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6c:	4974      	ldr	r1, [pc, #464]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0320 	and.w	r3, r3, #32
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b80:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8e:	496c      	ldr	r1, [pc, #432]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ba2:	4b67      	ldr	r3, [pc, #412]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	4963      	ldr	r1, [pc, #396]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd2:	495b      	ldr	r1, [pc, #364]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006be6:	4b56      	ldr	r3, [pc, #344]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf4:	4952      	ldr	r1, [pc, #328]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c08:	4b4d      	ldr	r3, [pc, #308]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c16:	494a      	ldr	r1, [pc, #296]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c2a:	4b45      	ldr	r3, [pc, #276]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c38:	4941      	ldr	r1, [pc, #260]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c52:	f023 0203 	bic.w	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5a:	4939      	ldr	r1, [pc, #228]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d028      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c6e:	4b34      	ldr	r3, [pc, #208]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	4930      	ldr	r1, [pc, #192]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	4a2b      	ldr	r2, [pc, #172]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c98:	60d3      	str	r3, [r2, #12]
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f82b 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006cb6:	7cfb      	ldrb	r3, [r7, #19]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d04d      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd4:	d108      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cdc:	4a18      	ldr	r2, [pc, #96]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ce2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006ce6:	e012      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cee:	4a14      	ldr	r2, [pc, #80]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006cf8:	4b11      	ldr	r3, [pc, #68]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d06:	490e      	ldr	r1, [pc, #56]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a08      	ldr	r2, [pc, #32]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
 8006d24:	e020      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d2e:	d109      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d30:	4b03      	ldr	r3, [pc, #12]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4a02      	ldr	r2, [pc, #8]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d3a:	60d3      	str	r3, [r2, #12]
 8006d3c:	e014      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006d3e:	bf00      	nop
 8006d40:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	2101      	movs	r1, #1
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 ffd7 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d028      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d74:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d82:	4947      	ldr	r1, [pc, #284]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d92:	d106      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d94:	4b42      	ldr	r3, [pc, #264]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a41      	ldr	r2, [pc, #260]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d9e:	60d3      	str	r3, [r2, #12]
 8006da0:	e011      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006daa:	d10c      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	2101      	movs	r1, #1
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 ffa8 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006dc2:	7cfb      	ldrb	r3, [r7, #19]
 8006dc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01e      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dd2:	4b33      	ldr	r3, [pc, #204]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de2:	492f      	ldr	r1, [pc, #188]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 ff83 	bl	8007d08 <RCCEx_PLLSAI1_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e06:	7cfb      	ldrb	r3, [r7, #19]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e22:	f023 0204 	bic.w	r2, r3, #4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e2c:	491c      	ldr	r1, [pc, #112]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e40:	4b17      	ldr	r3, [pc, #92]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e46:	f023 0218 	bic.w	r2, r3, #24
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e50:	4913      	ldr	r1, [pc, #76]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e74:	490a      	ldr	r1, [pc, #40]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e86:	d105      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40021000 	.word	0x40021000

08006ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb6:	d13e      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006eb8:	4bb6      	ldr	r3, [pc, #728]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eca:	d028      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ed2:	f200 86f4 	bhi.w	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006edc:	d005      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee4:	d00e      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006ee6:	f000 beea 	b.w	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006eea:	4baa      	ldr	r3, [pc, #680]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	f040 86e4 	bne.w	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006efe:	61fb      	str	r3, [r7, #28]
      break;
 8006f00:	f000 bedf 	b.w	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006f04:	4ba3      	ldr	r3, [pc, #652]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	f040 86d9 	bne.w	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006f14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f18:	61fb      	str	r3, [r7, #28]
      break;
 8006f1a:	f000 bed4 	b.w	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f1e:	4b9d      	ldr	r3, [pc, #628]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f2a:	f040 86ce 	bne.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006f2e:	4b9a      	ldr	r3, [pc, #616]	@ (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f30:	61fb      	str	r3, [r7, #28]
      break;
 8006f32:	f000 beca 	b.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f36:	4b97      	ldr	r3, [pc, #604]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d036      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d840      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d003      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d020      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006f58:	e039      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f5a:	4b8e      	ldr	r3, [pc, #568]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d116      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f66:	4b8b      	ldr	r3, [pc, #556]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006f72:	4b88      	ldr	r3, [pc, #544]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	e005      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006f7e:	4b85      	ldr	r3, [pc, #532]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f84:	0a1b      	lsrs	r3, r3, #8
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	4a84      	ldr	r2, [pc, #528]	@ (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006f92:	e01f      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
      break;
 8006f98:	e01c      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fa6:	d102      	bne.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006faa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006fac:	e012      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61bb      	str	r3, [r7, #24]
      break;
 8006fb2:	e00f      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fb4:	4b77      	ldr	r3, [pc, #476]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fc0:	d102      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006fc2:	4b78      	ldr	r3, [pc, #480]	@ (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006fc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
      break;
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]
      break;
 8006fd2:	bf00      	nop
    }

    switch(PeriphClk)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fda:	f000 8606 	beq.w	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe4:	f200 8673 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fee:	f000 8469 	beq.w	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ff8:	f200 8669 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007002:	f000 8531 	beq.w	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800700c:	f200 865f 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007016:	f000 8187 	beq.w	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007020:	f200 8655 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800702a:	f000 80cd 	beq.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007034:	f200 864b 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703e:	f000 8430 	beq.w	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007048:	f200 8641 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007052:	f000 83e4 	beq.w	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800705c:	f200 8637 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007066:	f000 80af 	beq.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007070:	f200 862d 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	f000 809d 	beq.w	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007084:	f200 8623 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708e:	f000 808b 	beq.w	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007098:	f200 8619 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070a2:	f000 8554 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ac:	f200 860f 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070b6:	f000 8500 	beq.w	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c0:	f200 8605 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ca:	f000 84a1 	beq.w	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d4:	f200 85fb 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b80      	cmp	r3, #128	@ 0x80
 80070dc:	f000 846c 	beq.w	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b80      	cmp	r3, #128	@ 0x80
 80070e4:	f200 85f3 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d84c      	bhi.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 85ec 	beq.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	2b1f      	cmp	r3, #31
 80070fc:	f200 85e7 	bhi.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007100:	a201      	add	r2, pc, #4	@ (adr r2, 8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800751d 	.word	0x0800751d
 800710c:	0800758b 	.word	0x0800758b
 8007110:	08007ccf 	.word	0x08007ccf
 8007114:	0800761f 	.word	0x0800761f
 8007118:	08007ccf 	.word	0x08007ccf
 800711c:	08007ccf 	.word	0x08007ccf
 8007120:	08007ccf 	.word	0x08007ccf
 8007124:	08007697 	.word	0x08007697
 8007128:	08007ccf 	.word	0x08007ccf
 800712c:	08007ccf 	.word	0x08007ccf
 8007130:	08007ccf 	.word	0x08007ccf
 8007134:	08007ccf 	.word	0x08007ccf
 8007138:	08007ccf 	.word	0x08007ccf
 800713c:	08007ccf 	.word	0x08007ccf
 8007140:	08007ccf 	.word	0x08007ccf
 8007144:	0800771b 	.word	0x0800771b
 8007148:	08007ccf 	.word	0x08007ccf
 800714c:	08007ccf 	.word	0x08007ccf
 8007150:	08007ccf 	.word	0x08007ccf
 8007154:	08007ccf 	.word	0x08007ccf
 8007158:	08007ccf 	.word	0x08007ccf
 800715c:	08007ccf 	.word	0x08007ccf
 8007160:	08007ccf 	.word	0x08007ccf
 8007164:	08007ccf 	.word	0x08007ccf
 8007168:	08007ccf 	.word	0x08007ccf
 800716c:	08007ccf 	.word	0x08007ccf
 8007170:	08007ccf 	.word	0x08007ccf
 8007174:	08007ccf 	.word	0x08007ccf
 8007178:	08007ccf 	.word	0x08007ccf
 800717c:	08007ccf 	.word	0x08007ccf
 8007180:	08007ccf 	.word	0x08007ccf
 8007184:	0800779d 	.word	0x0800779d
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b40      	cmp	r3, #64	@ 0x40
 800718c:	f000 83e8 	beq.w	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007190:	f000 bd9d 	b.w	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007194:	40021000 	.word	0x40021000
 8007198:	0003d090 	.word	0x0003d090
 800719c:	0800def0 	.word	0x0800def0
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80071ae:	f000 ff93 	bl	80080d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80071b2:	61f8      	str	r0, [r7, #28]
      break;
 80071b4:	f000 bd8e 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80071b8:	69b9      	ldr	r1, [r7, #24]
 80071ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80071be:	f000 ff8b 	bl	80080d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80071c2:	61f8      	str	r0, [r7, #28]
      break;
 80071c4:	f000 bd86 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80071c8:	4b9a      	ldr	r3, [pc, #616]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ce:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80071da:	d015      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80071e2:	f200 8092 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ec:	d029      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071f4:	f200 8089 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d07b      	beq.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007204:	d04a      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007206:	e080      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007208:	4b8a      	ldr	r3, [pc, #552]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d17d      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007214:	4b87      	ldr	r3, [pc, #540]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8007220:	4b84      	ldr	r3, [pc, #528]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	e005      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800722c:	4b81      	ldr	r3, [pc, #516]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800722e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	4a7f      	ldr	r2, [pc, #508]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800723a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800723e:	61fb      	str	r3, [r7, #28]
          break;
 8007240:	e066      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007242:	4b7c      	ldr	r3, [pc, #496]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800724e:	d162      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007250:	4b78      	ldr	r3, [pc, #480]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800725c:	d15b      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800725e:	4b75      	ldr	r3, [pc, #468]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007268:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	fb03 f202 	mul.w	r2, r3, r2
 8007272:	4b70      	ldr	r3, [pc, #448]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	091b      	lsrs	r3, r3, #4
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	3301      	adds	r3, #1
 800727e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007282:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007284:	4b6b      	ldr	r3, [pc, #428]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	0d5b      	lsrs	r3, r3, #21
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	3301      	adds	r3, #1
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	61fb      	str	r3, [r7, #28]
          break;
 800729a:	e03c      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800729c:	4b65      	ldr	r3, [pc, #404]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a8:	d138      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80072aa:	4b62      	ldr	r3, [pc, #392]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072b6:	d131      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80072b8:	4b5e      	ldr	r3, [pc, #376]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	0a1b      	lsrs	r3, r3, #8
 80072be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	fb03 f202 	mul.w	r2, r3, r2
 80072cc:	4b59      	ldr	r3, [pc, #356]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	091b      	lsrs	r3, r3, #4
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	3301      	adds	r3, #1
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80072de:	4b55      	ldr	r3, [pc, #340]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	0d5b      	lsrs	r3, r3, #21
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	3301      	adds	r3, #1
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	61fb      	str	r3, [r7, #28]
          break;
 80072f4:	e012      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80072f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80072f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d10e      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007304:	4b4d      	ldr	r3, [pc, #308]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007306:	61fb      	str	r3, [r7, #28]
          break;
 8007308:	e00b      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800730a:	bf00      	nop
 800730c:	f000 bce2 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007310:	bf00      	nop
 8007312:	f000 bcdf 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007316:	bf00      	nop
 8007318:	f000 bcdc 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800731c:	bf00      	nop
 800731e:	f000 bcd9 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007322:	bf00      	nop
        break;
 8007324:	f000 bcd6 	b.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007328:	4b42      	ldr	r3, [pc, #264]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800732a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800732e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007332:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007336:	d13d      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007338:	4b3e      	ldr	r3, [pc, #248]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007344:	f040 84c5 	bne.w	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007348:	4b3a      	ldr	r3, [pc, #232]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007354:	f040 84bd 	bne.w	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007358:	4b36      	ldr	r3, [pc, #216]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007362:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	fb03 f202 	mul.w	r2, r3, r2
 800736c:	4b31      	ldr	r3, [pc, #196]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	3301      	adds	r3, #1
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800737e:	4b2d      	ldr	r3, [pc, #180]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	0edb      	lsrs	r3, r3, #27
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007390:	4b28      	ldr	r3, [pc, #160]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800739c:	2311      	movs	r3, #17
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e001      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80073a2:	2307      	movs	r3, #7
 80073a4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	61fb      	str	r3, [r7, #28]
      break;
 80073b0:	f000 bc8f 	b.w	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80073b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80073c6:	d016      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80073ce:	f200 809b 	bhi.w	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073d8:	d032      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e0:	f200 8092 	bhi.w	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8084 	beq.w	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073f2:	d052      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80073f4:	e088      	b.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80073f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b02      	cmp	r3, #2
 8007400:	f040 8084 	bne.w	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007404:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007410:	4b08      	ldr	r3, [pc, #32]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	e005      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800741c:	4b05      	ldr	r3, [pc, #20]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800741e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	4a03      	ldr	r2, [pc, #12]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800742a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742e:	61fb      	str	r3, [r7, #28]
          break;
 8007430:	e06c      	b.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8007432:	bf00      	nop
 8007434:	40021000 	.word	0x40021000
 8007438:	0800def0 	.word	0x0800def0
 800743c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007440:	4ba5      	ldr	r3, [pc, #660]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007448:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800744c:	d160      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800744e:	4ba2      	ldr	r3, [pc, #648]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745a:	d159      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800745c:	4b9e      	ldr	r3, [pc, #632]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007466:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	fb03 f202 	mul.w	r2, r3, r2
 8007470:	4b99      	ldr	r3, [pc, #612]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	091b      	lsrs	r3, r3, #4
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	3301      	adds	r3, #1
 800747c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007480:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007482:	4b95      	ldr	r3, [pc, #596]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	0d5b      	lsrs	r3, r3, #21
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	3301      	adds	r3, #1
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	61fb      	str	r3, [r7, #28]
          break;
 8007498:	e03a      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800749a:	4b8f      	ldr	r3, [pc, #572]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a6:	d135      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80074a8:	4b8b      	ldr	r3, [pc, #556]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074b4:	d12e      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80074b6:	4b88      	ldr	r3, [pc, #544]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	fb03 f202 	mul.w	r2, r3, r2
 80074ca:	4b83      	ldr	r3, [pc, #524]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	3301      	adds	r3, #1
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80074dc:	4b7e      	ldr	r3, [pc, #504]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	0d5b      	lsrs	r3, r3, #21
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	3301      	adds	r3, #1
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f0:	61fb      	str	r3, [r7, #28]
          break;
 80074f2:	e00f      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80074f4:	4b78      	ldr	r3, [pc, #480]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d10a      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007502:	4b76      	ldr	r3, [pc, #472]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007504:	61fb      	str	r3, [r7, #28]
          break;
 8007506:	e007      	b.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007508:	bf00      	nop
 800750a:	e3e2      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800750c:	bf00      	nop
 800750e:	e3e0      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007510:	bf00      	nop
 8007512:	e3de      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007514:	bf00      	nop
 8007516:	e3dc      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007518:	bf00      	nop
      break;
 800751a:	e3da      	b.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800751c:	4b6e      	ldr	r3, [pc, #440]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d827      	bhi.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007545 	.word	0x08007545
 8007538:	0800754d 	.word	0x0800754d
 800753c:	08007555 	.word	0x08007555
 8007540:	08007569 	.word	0x08007569
          frequency = HAL_RCC_GetPCLK2Freq();
 8007544:	f7ff f8a8 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 8007548:	61f8      	str	r0, [r7, #28]
          break;
 800754a:	e01d      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800754c:	f7fe fff6 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007550:	61f8      	str	r0, [r7, #28]
          break;
 8007552:	e019      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007554:	4b60      	ldr	r3, [pc, #384]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800755c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007560:	d10f      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8007562:	4b5f      	ldr	r3, [pc, #380]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007564:	61fb      	str	r3, [r7, #28]
          break;
 8007566:	e00c      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007568:	4b5b      	ldr	r3, [pc, #364]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b02      	cmp	r3, #2
 8007574:	d107      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8007576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800757a:	61fb      	str	r3, [r7, #28]
          break;
 800757c:	e003      	b.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800757e:	bf00      	nop
 8007580:	e3a8      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007582:	bf00      	nop
 8007584:	e3a6      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007586:	bf00      	nop
        break;
 8007588:	e3a4      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800758a:	4b53      	ldr	r3, [pc, #332]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	f003 030c 	and.w	r3, r3, #12
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b0c      	cmp	r3, #12
 800759a:	d83a      	bhi.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800759c:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075d9 	.word	0x080075d9
 80075a8:	08007613 	.word	0x08007613
 80075ac:	08007613 	.word	0x08007613
 80075b0:	08007613 	.word	0x08007613
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	08007613 	.word	0x08007613
 80075bc:	08007613 	.word	0x08007613
 80075c0:	08007613 	.word	0x08007613
 80075c4:	080075e9 	.word	0x080075e9
 80075c8:	08007613 	.word	0x08007613
 80075cc:	08007613 	.word	0x08007613
 80075d0:	08007613 	.word	0x08007613
 80075d4:	080075fd 	.word	0x080075fd
          frequency = HAL_RCC_GetPCLK1Freq();
 80075d8:	f7ff f848 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 80075dc:	61f8      	str	r0, [r7, #28]
          break;
 80075de:	e01d      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80075e0:	f7fe ffac 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80075e4:	61f8      	str	r0, [r7, #28]
          break;
 80075e6:	e019      	b.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075e8:	4b3b      	ldr	r3, [pc, #236]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f4:	d10f      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80075f6:	4b3a      	ldr	r3, [pc, #232]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80075f8:	61fb      	str	r3, [r7, #28]
          break;
 80075fa:	e00c      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075fc:	4b36      	ldr	r3, [pc, #216]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b02      	cmp	r3, #2
 8007608:	d107      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800760a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800760e:	61fb      	str	r3, [r7, #28]
          break;
 8007610:	e003      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007612:	bf00      	nop
 8007614:	e35e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007616:	bf00      	nop
 8007618:	e35c      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800761a:	bf00      	nop
        break;
 800761c:	e35a      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800761e:	4b2e      	ldr	r3, [pc, #184]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b30      	cmp	r3, #48	@ 0x30
 800762e:	d021      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b30      	cmp	r3, #48	@ 0x30
 8007634:	d829      	bhi.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b20      	cmp	r3, #32
 800763a:	d011      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b20      	cmp	r3, #32
 8007640:	d823      	bhi.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b10      	cmp	r3, #16
 800764c:	d004      	beq.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800764e:	e01c      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007650:	f7ff f80c 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007654:	61f8      	str	r0, [r7, #28]
          break;
 8007656:	e01d      	b.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007658:	f7fe ff70 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800765c:	61f8      	str	r0, [r7, #28]
          break;
 800765e:	e019      	b.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007660:	4b1d      	ldr	r3, [pc, #116]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800766c:	d10f      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800766e:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007670:	61fb      	str	r3, [r7, #28]
          break;
 8007672:	e00c      	b.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007674:	4b18      	ldr	r3, [pc, #96]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d107      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007686:	61fb      	str	r3, [r7, #28]
          break;
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800768a:	bf00      	nop
 800768c:	e322      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800768e:	bf00      	nop
 8007690:	e320      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007692:	bf00      	nop
        break;
 8007694:	e31e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007696:	4b10      	ldr	r3, [pc, #64]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a6:	d027      	beq.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ac:	d82f      	bhi.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b80      	cmp	r3, #128	@ 0x80
 80076b2:	d017      	beq.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b80      	cmp	r3, #128	@ 0x80
 80076b8:	d829      	bhi.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b40      	cmp	r3, #64	@ 0x40
 80076c4:	d004      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80076c6:	e022      	b.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80076c8:	f7fe ffd0 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 80076cc:	61f8      	str	r0, [r7, #28]
          break;
 80076ce:	e023      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80076d0:	f7fe ff34 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80076d4:	61f8      	str	r0, [r7, #28]
          break;
 80076d6:	e01f      	b.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80076d8:	40021000 	.word	0x40021000
 80076dc:	02dc6c00 	.word	0x02dc6c00
 80076e0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076e4:	4b9b      	ldr	r3, [pc, #620]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076f0:	d10f      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80076f2:	4b99      	ldr	r3, [pc, #612]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80076f4:	61fb      	str	r3, [r7, #28]
          break;
 80076f6:	e00c      	b.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076f8:	4b96      	ldr	r3, [pc, #600]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d107      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800770a:	61fb      	str	r3, [r7, #28]
          break;
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800770e:	bf00      	nop
 8007710:	e2e0      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007712:	bf00      	nop
 8007714:	e2de      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007716:	bf00      	nop
        break;
 8007718:	e2dc      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800771a:	4b8e      	ldr	r3, [pc, #568]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800772c:	d025      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007734:	d82c      	bhi.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800773c:	d013      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007744:	d824      	bhi.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007752:	d004      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007754:	e01c      	b.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007756:	f7fe ff89 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 800775a:	61f8      	str	r0, [r7, #28]
          break;
 800775c:	e01d      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800775e:	f7fe feed 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007762:	61f8      	str	r0, [r7, #28]
          break;
 8007764:	e019      	b.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007766:	4b7b      	ldr	r3, [pc, #492]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007772:	d10f      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8007774:	4b78      	ldr	r3, [pc, #480]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007776:	61fb      	str	r3, [r7, #28]
          break;
 8007778:	e00c      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800777a:	4b76      	ldr	r3, [pc, #472]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d107      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800778c:	61fb      	str	r3, [r7, #28]
          break;
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007790:	bf00      	nop
 8007792:	e29f      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007794:	bf00      	nop
 8007796:	e29d      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007798:	bf00      	nop
        break;
 800779a:	e29b      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800779c:	4b6d      	ldr	r3, [pc, #436]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077ae:	d025      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077b6:	d82c      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077be:	d013      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077c6:	d824      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d4:	d004      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80077d6:	e01c      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077d8:	f7fe ff48 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 80077dc:	61f8      	str	r0, [r7, #28]
          break;
 80077de:	e01d      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80077e0:	f7fe feac 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80077e4:	61f8      	str	r0, [r7, #28]
          break;
 80077e6:	e019      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f4:	d10f      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80077f6:	4b58      	ldr	r3, [pc, #352]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80077f8:	61fb      	str	r3, [r7, #28]
          break;
 80077fa:	e00c      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077fc:	4b55      	ldr	r3, [pc, #340]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800780a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800780e:	61fb      	str	r3, [r7, #28]
          break;
 8007810:	e003      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007812:	bf00      	nop
 8007814:	e25e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007816:	bf00      	nop
 8007818:	e25c      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800781a:	bf00      	nop
        break;
 800781c:	e25a      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800781e:	4b4d      	ldr	r3, [pc, #308]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007824:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007830:	d007      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007838:	d12f      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800783a:	f7fe fe7f 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800783e:	61f8      	str	r0, [r7, #28]
          break;
 8007840:	e02e      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007842:	4b44      	ldr	r3, [pc, #272]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800784a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800784e:	d126      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007850:	4b40      	ldr	r3, [pc, #256]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d020      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800785c:	4b3d      	ldr	r3, [pc, #244]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007866:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	fb03 f202 	mul.w	r2, r3, r2
 8007870:	4b38      	ldr	r3, [pc, #224]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	3301      	adds	r3, #1
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007882:	4b34      	ldr	r3, [pc, #208]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	0e5b      	lsrs	r3, r3, #25
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	3301      	adds	r3, #1
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	61fb      	str	r3, [r7, #28]
          break;
 8007898:	e001      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800789a:	bf00      	nop
 800789c:	e21a      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800789e:	bf00      	nop
        break;
 80078a0:	e218      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80078a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80078a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe fef0 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 80078b8:	61f8      	str	r0, [r7, #28]
        break;
 80078ba:	e20b      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80078bc:	f7fe fe3e 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80078c0:	61f8      	str	r0, [r7, #28]
        break;
 80078c2:	e207      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80078c4:	4b23      	ldr	r3, [pc, #140]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80078c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ca:	f003 0318 	and.w	r3, r3, #24
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d010      	beq.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d834      	bhi.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d024      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80078e8:	e02d      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80078f0:	f000 fbf2 	bl	80080d8 <RCCEx_GetSAIxPeriphCLKFreq>
 80078f4:	61f8      	str	r0, [r7, #28]
          break;
 80078f6:	e02b      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80078f8:	4b16      	ldr	r3, [pc, #88]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d122      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007904:	4b13      	ldr	r3, [pc, #76]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007910:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	091b      	lsrs	r3, r3, #4
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	e005      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800791c:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	61fb      	str	r3, [r7, #28]
          break;
 8007930:	e00b      	b.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007932:	4b08      	ldr	r3, [pc, #32]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800793a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800793e:	d106      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007942:	61fb      	str	r3, [r7, #28]
          break;
 8007944:	e003      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007946:	bf00      	nop
 8007948:	e1c4      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800794a:	bf00      	nop
 800794c:	e1c2      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800794e:	bf00      	nop
        break;
 8007950:	e1c0      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007952:	bf00      	nop
 8007954:	40021000 	.word	0x40021000
 8007958:	00f42400 	.word	0x00f42400
 800795c:	0800def0 	.word	0x0800def0
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007960:	4b96      	ldr	r3, [pc, #600]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007972:	d013      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800797a:	d819      	bhi.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007988:	d004      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800798a:	e011      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800798c:	f7fe fe6e 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007990:	61f8      	str	r0, [r7, #28]
          break;
 8007992:	e010      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007994:	f7fe fdd2 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007998:	61f8      	str	r0, [r7, #28]
          break;
 800799a:	e00c      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800799c:	4b87      	ldr	r3, [pc, #540]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a8:	d104      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80079aa:	4b85      	ldr	r3, [pc, #532]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80079ac:	61fb      	str	r3, [r7, #28]
          break;
 80079ae:	e001      	b.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80079b0:	bf00      	nop
 80079b2:	e18f      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079b4:	bf00      	nop
        break;
 80079b6:	e18d      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80079b8:	4b80      	ldr	r3, [pc, #512]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ca:	d013      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d2:	d819      	bhi.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079e0:	d004      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80079e2:	e011      	b.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fe fe42 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 80079e8:	61f8      	str	r0, [r7, #28]
          break;
 80079ea:	e010      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80079ec:	f7fe fda6 	bl	800653c <HAL_RCC_GetSysClockFreq>
 80079f0:	61f8      	str	r0, [r7, #28]
          break;
 80079f2:	e00c      	b.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f4:	4b71      	ldr	r3, [pc, #452]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a00:	d104      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007a02:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007a04:	61fb      	str	r3, [r7, #28]
          break;
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007a08:	bf00      	nop
 8007a0a:	e163      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a0c:	bf00      	nop
        break;
 8007a0e:	e161      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007a10:	4b6a      	ldr	r3, [pc, #424]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a22:	d013      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2a:	d819      	bhi.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d004      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a38:	d004      	beq.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007a3a:	e011      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a3c:	f7fe fe16 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007a40:	61f8      	str	r0, [r7, #28]
          break;
 8007a42:	e010      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a44:	f7fe fd7a 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007a48:	61f8      	str	r0, [r7, #28]
          break;
 8007a4a:	e00c      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a58:	d104      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8007a5a:	4b59      	ldr	r3, [pc, #356]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007a5c:	61fb      	str	r3, [r7, #28]
          break;
 8007a5e:	e001      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007a60:	bf00      	nop
 8007a62:	e137      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a64:	bf00      	nop
        break;
 8007a66:	e135      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a68:	4b54      	ldr	r3, [pc, #336]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d011      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d818      	bhi.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d004      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007a8c:	e011      	b.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a8e:	f7fe fded 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007a92:	61f8      	str	r0, [r7, #28]
          break;
 8007a94:	e010      	b.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a96:	f7fe fd51 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007a9a:	61f8      	str	r0, [r7, #28]
          break;
 8007a9c:	e00c      	b.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a9e:	4b47      	ldr	r3, [pc, #284]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aaa:	d104      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007aac:	4b44      	ldr	r3, [pc, #272]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007aae:	61fb      	str	r3, [r7, #28]
          break;
 8007ab0:	e001      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007ab2:	bf00      	nop
 8007ab4:	e10e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ab6:	bf00      	nop
        break;
 8007ab8:	e10c      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007aba:	4b40      	ldr	r3, [pc, #256]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007acc:	d02c      	beq.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ad4:	d833      	bhi.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007adc:	d01a      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ae4:	d82b      	bhi.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af2:	d004      	beq.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007af4:	e023      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007af6:	f7fe fdb9 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007afa:	61f8      	str	r0, [r7, #28]
          break;
 8007afc:	e026      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007afe:	4b2f      	ldr	r3, [pc, #188]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d11a      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007b0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b10:	61fb      	str	r3, [r7, #28]
          break;
 8007b12:	e016      	b.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b14:	4b29      	ldr	r3, [pc, #164]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b20:	d111      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8007b22:	4b27      	ldr	r3, [pc, #156]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007b24:	61fb      	str	r3, [r7, #28]
          break;
 8007b26:	e00e      	b.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b28:	4b24      	ldr	r3, [pc, #144]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d109      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8007b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b3a:	61fb      	str	r3, [r7, #28]
          break;
 8007b3c:	e005      	b.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007b3e:	bf00      	nop
 8007b40:	e0c8      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b42:	bf00      	nop
 8007b44:	e0c6      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b46:	bf00      	nop
 8007b48:	e0c4      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b4a:	bf00      	nop
        break;
 8007b4c:	e0c2      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b60:	d030      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b68:	d837      	bhi.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b70:	d01a      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b78:	d82f      	bhi.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b86:	d004      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007b88:	e027      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b8a:	f7fe fd6f 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 8007b8e:	61f8      	str	r0, [r7, #28]
          break;
 8007b90:	e02a      	b.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007b92:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d11e      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007ba0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ba4:	61fb      	str	r3, [r7, #28]
          break;
 8007ba6:	e01a      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ba8:	4b04      	ldr	r3, [pc, #16]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb4:	d115      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007bb6:	4b02      	ldr	r3, [pc, #8]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007bb8:	61fb      	str	r3, [r7, #28]
          break;
 8007bba:	e012      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bc4:	4b46      	ldr	r3, [pc, #280]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d109      	bne.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bd6:	61fb      	str	r3, [r7, #28]
          break;
 8007bd8:	e005      	b.n	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007bda:	bf00      	nop
 8007bdc:	e07a      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bde:	bf00      	nop
 8007be0:	e078      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007be2:	bf00      	nop
 8007be4:	e076      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007be6:	bf00      	nop
        break;
 8007be8:	e074      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007bea:	4b3d      	ldr	r3, [pc, #244]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bf0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bfc:	d02c      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c04:	d855      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c12:	d004      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007c14:	e04d      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fe fc91 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8007c1a:	61f8      	str	r0, [r7, #28]
          break;
 8007c1c:	e04e      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c1e:	4b30      	ldr	r3, [pc, #192]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d145      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007c36:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	e005      	b.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007c42:	4b27      	ldr	r3, [pc, #156]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	4a25      	ldr	r2, [pc, #148]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c54:	61fb      	str	r3, [r7, #28]
          break;
 8007c56:	e02e      	b.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c58:	4b21      	ldr	r3, [pc, #132]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c64:	d129      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007c66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c72:	d122      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007c74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	fb03 f202 	mul.w	r2, r3, r2
 8007c88:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	3301      	adds	r3, #1
 8007c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c98:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007c9a:	4b11      	ldr	r3, [pc, #68]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	0d5b      	lsrs	r3, r3, #21
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	61fb      	str	r3, [r7, #28]
          break;
 8007cb0:	e003      	b.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007cb2:	bf00      	nop
 8007cb4:	e00e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cb6:	bf00      	nop
 8007cb8:	e00c      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cba:	bf00      	nop
        break;
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e006      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e004      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e002      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007cd2:	bf00      	nop
    }
  }

  return(frequency);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	0800def0 	.word	0x0800def0

08007ce8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007cec:	4b05      	ldr	r3, [pc, #20]	@ (8007d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a04      	ldr	r2, [pc, #16]	@ (8007d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007cf2:	f043 0304 	orr.w	r3, r3, #4
 8007cf6:	6013      	str	r3, [r2, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40021000 	.word	0x40021000

08007d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d16:	4b72      	ldr	r3, [pc, #456]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00e      	beq.n	8007d40 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007d22:	4b6f      	ldr	r3, [pc, #444]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f003 0203 	and.w	r2, r3, #3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d103      	bne.n	8007d3a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
       ||
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d142      	bne.n	8007dc0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
 8007d3e:	e03f      	b.n	8007dc0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d018      	beq.n	8007d7a <RCCEx_PLLSAI1_Config+0x72>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d825      	bhi.n	8007d98 <RCCEx_PLLSAI1_Config+0x90>
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d002      	beq.n	8007d56 <RCCEx_PLLSAI1_Config+0x4e>
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d009      	beq.n	8007d68 <RCCEx_PLLSAI1_Config+0x60>
 8007d54:	e020      	b.n	8007d98 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d56:	4b62      	ldr	r3, [pc, #392]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d11d      	bne.n	8007d9e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d66:	e01a      	b.n	8007d9e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d68:	4b5d      	ldr	r3, [pc, #372]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d116      	bne.n	8007da2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d78:	e013      	b.n	8007da2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d7a:	4b59      	ldr	r3, [pc, #356]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10f      	bne.n	8007da6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d86:	4b56      	ldr	r3, [pc, #344]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d96:	e006      	b.n	8007da6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9c:	e004      	b.n	8007da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d108      	bne.n	8007dc0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007dae:	4b4c      	ldr	r3, [pc, #304]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 0203 	bic.w	r2, r3, #3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4949      	ldr	r1, [pc, #292]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 8086 	bne.w	8007ed4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007dc8:	4b45      	ldr	r3, [pc, #276]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a44      	ldr	r2, [pc, #272]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd4:	f7fb fc26 	bl	8003624 <HAL_GetTick>
 8007dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dda:	e009      	b.n	8007df0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ddc:	f7fb fc22 	bl	8003624 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d902      	bls.n	8007df0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	73fb      	strb	r3, [r7, #15]
        break;
 8007dee:	e005      	b.n	8007dfc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007df0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1ef      	bne.n	8007ddc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d168      	bne.n	8007ed4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d113      	bne.n	8007e30 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e08:	4b35      	ldr	r3, [pc, #212]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	4b35      	ldr	r3, [pc, #212]	@ (8007ee4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6892      	ldr	r2, [r2, #8]
 8007e14:	0211      	lsls	r1, r2, #8
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	68d2      	ldr	r2, [r2, #12]
 8007e1a:	06d2      	lsls	r2, r2, #27
 8007e1c:	4311      	orrs	r1, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6852      	ldr	r2, [r2, #4]
 8007e22:	3a01      	subs	r2, #1
 8007e24:	0112      	lsls	r2, r2, #4
 8007e26:	430a      	orrs	r2, r1
 8007e28:	492d      	ldr	r1, [pc, #180]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	610b      	str	r3, [r1, #16]
 8007e2e:	e02d      	b.n	8007e8c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d115      	bne.n	8007e62 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e36:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6892      	ldr	r2, [r2, #8]
 8007e42:	0211      	lsls	r1, r2, #8
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6912      	ldr	r2, [r2, #16]
 8007e48:	0852      	lsrs	r2, r2, #1
 8007e4a:	3a01      	subs	r2, #1
 8007e4c:	0552      	lsls	r2, r2, #21
 8007e4e:	4311      	orrs	r1, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6852      	ldr	r2, [r2, #4]
 8007e54:	3a01      	subs	r2, #1
 8007e56:	0112      	lsls	r2, r2, #4
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	4921      	ldr	r1, [pc, #132]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	610b      	str	r3, [r1, #16]
 8007e60:	e014      	b.n	8007e8c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	4b21      	ldr	r3, [pc, #132]	@ (8007eec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6892      	ldr	r2, [r2, #8]
 8007e6e:	0211      	lsls	r1, r2, #8
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6952      	ldr	r2, [r2, #20]
 8007e74:	0852      	lsrs	r2, r2, #1
 8007e76:	3a01      	subs	r2, #1
 8007e78:	0652      	lsls	r2, r2, #25
 8007e7a:	4311      	orrs	r1, r2
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6852      	ldr	r2, [r2, #4]
 8007e80:	3a01      	subs	r2, #1
 8007e82:	0112      	lsls	r2, r2, #4
 8007e84:	430a      	orrs	r2, r1
 8007e86:	4916      	ldr	r1, [pc, #88]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a13      	ldr	r2, [pc, #76]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e98:	f7fb fbc4 	bl	8003624 <HAL_GetTick>
 8007e9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e9e:	e009      	b.n	8007eb4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ea0:	f7fb fbc0 	bl	8003624 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d902      	bls.n	8007eb4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	73fb      	strb	r3, [r7, #15]
          break;
 8007eb2:	e005      	b.n	8007ec0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0ef      	beq.n	8007ea0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007ec6:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	4904      	ldr	r1, [pc, #16]	@ (8007ee0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	07ff800f 	.word	0x07ff800f
 8007ee8:	ff9f800f 	.word	0xff9f800f
 8007eec:	f9ff800f 	.word	0xf9ff800f

08007ef0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007efe:	4b72      	ldr	r3, [pc, #456]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00e      	beq.n	8007f28 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0203 	and.w	r2, r3, #3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d103      	bne.n	8007f22 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
       ||
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d142      	bne.n	8007fa8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	e03f      	b.n	8007fa8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d018      	beq.n	8007f62 <RCCEx_PLLSAI2_Config+0x72>
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d825      	bhi.n	8007f80 <RCCEx_PLLSAI2_Config+0x90>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d002      	beq.n	8007f3e <RCCEx_PLLSAI2_Config+0x4e>
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d009      	beq.n	8007f50 <RCCEx_PLLSAI2_Config+0x60>
 8007f3c:	e020      	b.n	8007f80 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f3e:	4b62      	ldr	r3, [pc, #392]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11d      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f4e:	e01a      	b.n	8007f86 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f50:	4b5d      	ldr	r3, [pc, #372]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d116      	bne.n	8007f8a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f60:	e013      	b.n	8007f8a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f62:	4b59      	ldr	r3, [pc, #356]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10f      	bne.n	8007f8e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f6e:	4b56      	ldr	r3, [pc, #344]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f7e:	e006      	b.n	8007f8e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e004      	b.n	8007f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d108      	bne.n	8007fa8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007f96:	4b4c      	ldr	r3, [pc, #304]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f023 0203 	bic.w	r2, r3, #3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4949      	ldr	r1, [pc, #292]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 8086 	bne.w	80080bc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007fb0:	4b45      	ldr	r3, [pc, #276]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a44      	ldr	r2, [pc, #272]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbc:	f7fb fb32 	bl	8003624 <HAL_GetTick>
 8007fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fc2:	e009      	b.n	8007fd8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fc4:	f7fb fb2e 	bl	8003624 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d902      	bls.n	8007fd8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8007fd6:	e005      	b.n	8007fe4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1ef      	bne.n	8007fc4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d168      	bne.n	80080bc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d113      	bne.n	8008018 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ff0:	4b35      	ldr	r3, [pc, #212]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	4b35      	ldr	r3, [pc, #212]	@ (80080cc <RCCEx_PLLSAI2_Config+0x1dc>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6892      	ldr	r2, [r2, #8]
 8007ffc:	0211      	lsls	r1, r2, #8
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	68d2      	ldr	r2, [r2, #12]
 8008002:	06d2      	lsls	r2, r2, #27
 8008004:	4311      	orrs	r1, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6852      	ldr	r2, [r2, #4]
 800800a:	3a01      	subs	r2, #1
 800800c:	0112      	lsls	r2, r2, #4
 800800e:	430a      	orrs	r2, r1
 8008010:	492d      	ldr	r1, [pc, #180]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008012:	4313      	orrs	r3, r2
 8008014:	614b      	str	r3, [r1, #20]
 8008016:	e02d      	b.n	8008074 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d115      	bne.n	800804a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800801e:	4b2a      	ldr	r3, [pc, #168]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008020:	695a      	ldr	r2, [r3, #20]
 8008022:	4b2b      	ldr	r3, [pc, #172]	@ (80080d0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008024:	4013      	ands	r3, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6892      	ldr	r2, [r2, #8]
 800802a:	0211      	lsls	r1, r2, #8
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6912      	ldr	r2, [r2, #16]
 8008030:	0852      	lsrs	r2, r2, #1
 8008032:	3a01      	subs	r2, #1
 8008034:	0552      	lsls	r2, r2, #21
 8008036:	4311      	orrs	r1, r2
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6852      	ldr	r2, [r2, #4]
 800803c:	3a01      	subs	r2, #1
 800803e:	0112      	lsls	r2, r2, #4
 8008040:	430a      	orrs	r2, r1
 8008042:	4921      	ldr	r1, [pc, #132]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008044:	4313      	orrs	r3, r2
 8008046:	614b      	str	r3, [r1, #20]
 8008048:	e014      	b.n	8008074 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800804a:	4b1f      	ldr	r3, [pc, #124]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	4b21      	ldr	r3, [pc, #132]	@ (80080d4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008050:	4013      	ands	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6892      	ldr	r2, [r2, #8]
 8008056:	0211      	lsls	r1, r2, #8
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6952      	ldr	r2, [r2, #20]
 800805c:	0852      	lsrs	r2, r2, #1
 800805e:	3a01      	subs	r2, #1
 8008060:	0652      	lsls	r2, r2, #25
 8008062:	4311      	orrs	r1, r2
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6852      	ldr	r2, [r2, #4]
 8008068:	3a01      	subs	r2, #1
 800806a:	0112      	lsls	r2, r2, #4
 800806c:	430a      	orrs	r2, r1
 800806e:	4916      	ldr	r1, [pc, #88]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008070:	4313      	orrs	r3, r2
 8008072:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008074:	4b14      	ldr	r3, [pc, #80]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a13      	ldr	r2, [pc, #76]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800807a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800807e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008080:	f7fb fad0 	bl	8003624 <HAL_GetTick>
 8008084:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008086:	e009      	b.n	800809c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008088:	f7fb facc 	bl	8003624 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d902      	bls.n	800809c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	73fb      	strb	r3, [r7, #15]
          break;
 800809a:	e005      	b.n	80080a8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0ef      	beq.n	8008088 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80080ae:	4b06      	ldr	r3, [pc, #24]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4904      	ldr	r1, [pc, #16]	@ (80080c8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40021000 	.word	0x40021000
 80080cc:	07ff800f 	.word	0x07ff800f
 80080d0:	ff9f800f 	.word	0xff9f800f
 80080d4:	f9ff800f 	.word	0xf9ff800f

080080d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80080d8:	b480      	push	{r7}
 80080da:	b089      	sub	sp, #36	@ 0x24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080f4:	d10b      	bne.n	800810e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80080f6:	4b7e      	ldr	r3, [pc, #504]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008100:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b60      	cmp	r3, #96	@ 0x60
 8008106:	d112      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008108:	4b7a      	ldr	r3, [pc, #488]	@ (80082f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e00f      	b.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008114:	d10b      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008116:	4b76      	ldr	r3, [pc, #472]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800811c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008120:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008128:	d101      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800812a:	4b72      	ldr	r3, [pc, #456]	@ (80082f4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800812c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 80d6 	bne.w	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2b40      	cmp	r3, #64	@ 0x40
 800813e:	d003      	beq.n	8008148 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008146:	d13b      	bne.n	80081c0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008148:	4b69      	ldr	r3, [pc, #420]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008154:	f040 80c4 	bne.w	80082e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008158:	4b65      	ldr	r3, [pc, #404]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80bd 	beq.w	80082e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008166:	4b62      	ldr	r3, [pc, #392]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	091b      	lsrs	r3, r3, #4
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	3301      	adds	r3, #1
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	fbb2 f3f3 	udiv	r3, r2, r3
 8008178:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800817a:	4b5d      	ldr	r3, [pc, #372]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008184:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008186:	4b5a      	ldr	r3, [pc, #360]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	0edb      	lsrs	r3, r3, #27
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008198:	4b55      	ldr	r3, [pc, #340]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80081a4:	2311      	movs	r3, #17
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e001      	b.n	80081ae <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80081aa:	2307      	movs	r3, #7
 80081ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	fb03 f202 	mul.w	r2, r3, r2
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80081be:	e08f      	b.n	80082e0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d13a      	bne.n	800823c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80081c6:	4b4a      	ldr	r3, [pc, #296]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081d2:	f040 8086 	bne.w	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80081d6:	4b46      	ldr	r3, [pc, #280]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d07f      	beq.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80081e2:	4b43      	ldr	r3, [pc, #268]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	3301      	adds	r3, #1
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80081f6:	4b3e      	ldr	r3, [pc, #248]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008200:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008202:	4b3b      	ldr	r3, [pc, #236]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	0edb      	lsrs	r3, r3, #27
 8008208:	f003 031f 	and.w	r3, r3, #31
 800820c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008214:	4b36      	ldr	r3, [pc, #216]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008220:	2311      	movs	r3, #17
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e001      	b.n	800822a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008226:	2307      	movs	r3, #7
 8008228:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	fb03 f202 	mul.w	r2, r3, r2
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	fbb2 f3f3 	udiv	r3, r2, r3
 8008238:	61fb      	str	r3, [r7, #28]
 800823a:	e052      	b.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b80      	cmp	r3, #128	@ 0x80
 8008240:	d003      	beq.n	800824a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008248:	d109      	bne.n	800825e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800824a:	4b29      	ldr	r3, [pc, #164]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008256:	d144      	bne.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008258:	4b27      	ldr	r3, [pc, #156]	@ (80082f8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800825a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800825c:	e041      	b.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b20      	cmp	r3, #32
 8008262:	d003      	beq.n	800826c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826a:	d13a      	bne.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800826c:	4b20      	ldr	r3, [pc, #128]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008278:	d133      	bne.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800827a:	4b1d      	ldr	r3, [pc, #116]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d02d      	beq.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008286:	4b1a      	ldr	r3, [pc, #104]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	091b      	lsrs	r3, r3, #4
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	3301      	adds	r3, #1
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800829a:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80082a6:	4b12      	ldr	r3, [pc, #72]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	0edb      	lsrs	r3, r3, #27
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80082b8:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80082c4:	2311      	movs	r3, #17
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e001      	b.n	80082ce <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80082ca:	2307      	movs	r3, #7
 80082cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	fb03 f202 	mul.w	r2, r3, r2
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e000      	b.n	80082e2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80082e0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80082e2:	69fb      	ldr	r3, [r7, #28]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3724      	adds	r7, #36	@ 0x24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	40021000 	.word	0x40021000
 80082f4:	001fff68 	.word	0x001fff68
 80082f8:	00f42400 	.word	0x00f42400

080082fc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d904      	bls.n	800831a <HAL_SAI_InitProtocol+0x1e>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3b03      	subs	r3, #3
 8008314:	2b01      	cmp	r3, #1
 8008316:	d812      	bhi.n	800833e <HAL_SAI_InitProtocol+0x42>
 8008318:	e008      	b.n	800832c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f9fb 	bl	800871c <SAI_InitI2S>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
      break;
 800832a:	e00b      	b.n	8008344 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 faa4 	bl	8008880 <SAI_InitPCM>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	e002      	b.n	8008344 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	75fb      	strb	r3, [r7, #23]
      break;
 8008342:	bf00      	nop
  }

  if (status == HAL_OK)
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f808 	bl	8008360 <HAL_SAI_Init>
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	@ 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e1c7      	b.n	8008702 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008378:	2b01      	cmp	r3, #1
 800837a:	d10e      	bne.n	800839a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a81      	ldr	r2, [pc, #516]	@ (8008588 <HAL_SAI_Init+0x228>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d107      	bne.n	8008396 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800838a:	2b01      	cmp	r3, #1
 800838c:	d103      	bne.n	8008396 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e1b3      	b.n	8008702 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fa feda 	bl	8003168 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fae5 	bl	8008984 <SAI_Disable>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e19e      	b.n	8008702 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d00c      	beq.n	80083ee <HAL_SAI_Init+0x8e>
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d80d      	bhi.n	80083f4 <HAL_SAI_Init+0x94>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_SAI_Init+0x82>
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d003      	beq.n	80083e8 <HAL_SAI_Init+0x88>
 80083e0:	e008      	b.n	80083f4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80083e6:	e008      	b.n	80083fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80083e8:	2310      	movs	r3, #16
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80083ec:	e005      	b.n	80083fa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80083ee:	2320      	movs	r3, #32
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80083f2:	e002      	b.n	80083fa <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80083f8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d81d      	bhi.n	800843e <HAL_SAI_Init+0xde>
 8008402:	a201      	add	r2, pc, #4	@ (adr r2, 8008408 <HAL_SAI_Init+0xa8>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008419 	.word	0x08008419
 800840c:	0800841f 	.word	0x0800841f
 8008410:	08008427 	.word	0x08008427
 8008414:	0800842f 	.word	0x0800842f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
      break;
 800841c:	e012      	b.n	8008444 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800841e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008422:	61fb      	str	r3, [r7, #28]
      break;
 8008424:	e00e      	b.n	8008444 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800842a:	61fb      	str	r3, [r7, #28]
      break;
 800842c:	e00a      	b.n	8008444 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800842e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008432:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800843c:	e002      	b.n	8008444 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
      break;
 8008442:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a4f      	ldr	r2, [pc, #316]	@ (8008588 <HAL_SAI_Init+0x228>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_SAI_Init+0xf8>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a4e      	ldr	r2, [pc, #312]	@ (800858c <HAL_SAI_Init+0x22c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d103      	bne.n	8008460 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008458:	4a4d      	ldr	r2, [pc, #308]	@ (8008590 <HAL_SAI_Init+0x230>)
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	e002      	b.n	8008466 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008460:	4a4c      	ldr	r2, [pc, #304]	@ (8008594 <HAL_SAI_Init+0x234>)
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d073      	beq.n	8008556 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a45      	ldr	r2, [pc, #276]	@ (8008588 <HAL_SAI_Init+0x228>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <HAL_SAI_Init+0x122>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a43      	ldr	r2, [pc, #268]	@ (800858c <HAL_SAI_Init+0x22c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d105      	bne.n	800848e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008482:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008486:	f7fe fd0d 	bl	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 800848a:	61b8      	str	r0, [r7, #24]
 800848c:	e004      	b.n	8008498 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800848e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008492:	f7fe fd07 	bl	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008496:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084a0:	d120      	bne.n	80084e4 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d102      	bne.n	80084b0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80084aa:	2340      	movs	r3, #64	@ 0x40
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	e00a      	b.n	80084c6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d103      	bne.n	80084c0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80084b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	e002      	b.n	80084c6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e017      	b.n	8008514 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084ec:	d101      	bne.n	80084f2 <HAL_SAI_Init+0x192>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e000      	b.n	80084f4 <HAL_SAI_Init+0x194>
 80084f2:	2301      	movs	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4619      	mov	r1, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	fb02 f303 	mul.w	r3, r2, r3
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008512:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4a20      	ldr	r2, [pc, #128]	@ (8008598 <HAL_SAI_Init+0x238>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	08da      	lsrs	r2, r3, #3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <HAL_SAI_Init+0x238>)
 8008526:	fba3 2301 	umull	r2, r3, r3, r1
 800852a:	08da      	lsrs	r2, r3, #3
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	1aca      	subs	r2, r1, r3
 8008536:	2a08      	cmp	r2, #8
 8008538:	d904      	bls.n	8008544 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008548:	2b04      	cmp	r3, #4
 800854a:	d104      	bne.n	8008556 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	085a      	lsrs	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_SAI_Init+0x206>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d109      	bne.n	800857a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_SAI_Init+0x212>
 800856e:	2300      	movs	r3, #0
 8008570:	e001      	b.n	8008576 <HAL_SAI_Init+0x216>
 8008572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	e012      	b.n	80085a0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10c      	bne.n	800859c <HAL_SAI_Init+0x23c>
 8008582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008586:	e00a      	b.n	800859e <HAL_SAI_Init+0x23e>
 8008588:	40015404 	.word	0x40015404
 800858c:	40015424 	.word	0x40015424
 8008590:	40015400 	.word	0x40015400
 8008594:	40015800 	.word	0x40015800
 8008598:	cccccccd 	.word	0xcccccccd
 800859c:	2300      	movs	r3, #0
 800859e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6819      	ldr	r1, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4b58      	ldr	r3, [pc, #352]	@ (800870c <HAL_SAI_Init+0x3ac>)
 80085ac:	400b      	ands	r3, r1
 80085ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6819      	ldr	r1, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80085c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ca:	431a      	orrs	r2, r3
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80085d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80085e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	051b      	lsls	r3, r3, #20
 80085ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80085f2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6812      	ldr	r2, [r2, #0]
 8008606:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800860a:	f023 030f 	bic.w	r3, r3, #15
 800860e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6859      	ldr	r1, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6899      	ldr	r1, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	4b35      	ldr	r3, [pc, #212]	@ (8008710 <HAL_SAI_Init+0x3b0>)
 800863a:	400b      	ands	r3, r1
 800863c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6899      	ldr	r1, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008648:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800864e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8008654:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800865a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008660:	3b01      	subs	r3, #1
 8008662:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008664:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68d9      	ldr	r1, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800867c:	400b      	ands	r3, r1
 800867e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68d9      	ldr	r1, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800868e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008694:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008696:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800869c:	3b01      	subs	r3, #1
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a19      	ldr	r2, [pc, #100]	@ (8008714 <HAL_SAI_Init+0x3b4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d119      	bne.n	80086e8 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80086b4:	4b18      	ldr	r3, [pc, #96]	@ (8008718 <HAL_SAI_Init+0x3b8>)
 80086b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b8:	4a17      	ldr	r2, [pc, #92]	@ (8008718 <HAL_SAI_Init+0x3b8>)
 80086ba:	f023 0301 	bic.w	r3, r3, #1
 80086be:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d10e      	bne.n	80086e8 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	3b01      	subs	r3, #1
 80086d4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80086d6:	4910      	ldr	r1, [pc, #64]	@ (8008718 <HAL_SAI_Init+0x3b8>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80086dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008718 <HAL_SAI_Init+0x3b8>)
 80086de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008718 <HAL_SAI_Init+0x3b8>)
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3728      	adds	r7, #40	@ 0x28
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	f805c010 	.word	0xf805c010
 8008710:	fff88000 	.word	0xfff88000
 8008714:	40015404 	.word	0x40015404
 8008718:	40015400 	.word	0x40015400

0800871c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <SAI_InitI2S+0x2e>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d103      	bne.n	8008752 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008750:	e002      	b.n	8008758 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800875e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008766:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e077      	b.n	8008872 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d107      	bne.n	8008798 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008794:	661a      	str	r2, [r3, #96]	@ 0x60
 8008796:	e006      	b.n	80087a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800879e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d84f      	bhi.n	800884c <SAI_InitI2S+0x130>
 80087ac:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <SAI_InitI2S+0x98>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087e7 	.word	0x080087e7
 80087bc:	08008809 	.word	0x08008809
 80087c0:	0800882b 	.word	0x0800882b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2280      	movs	r2, #128	@ 0x80
 80087c8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	011a      	lsls	r2, r3, #4
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2240      	movs	r2, #64	@ 0x40
 80087e2:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80087e4:	e035      	b.n	8008852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2280      	movs	r2, #128	@ 0x80
 80087ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	019a      	lsls	r2, r3, #6
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2280      	movs	r2, #128	@ 0x80
 8008804:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008806:	e024      	b.n	8008852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	22c0      	movs	r2, #192	@ 0xc0
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	019a      	lsls	r2, r3, #6
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	085b      	lsrs	r3, r3, #1
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2280      	movs	r2, #128	@ 0x80
 8008826:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008828:	e013      	b.n	8008852 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	22e0      	movs	r2, #224	@ 0xe0
 800882e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	019a      	lsls	r2, r3, #6
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	085b      	lsrs	r3, r3, #1
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2280      	movs	r2, #128	@ 0x80
 8008848:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800884a:	e002      	b.n	8008852 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]
      break;
 8008850:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d10b      	bne.n	8008870 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d102      	bne.n	8008864 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2210      	movs	r2, #16
 8008862:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d102      	bne.n	8008870 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2208      	movs	r2, #8
 800886e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop

08008880 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <SAI_InitPCM+0x2e>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d103      	bne.n	80088b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80088b4:	e002      	b.n	80088bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80088c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80088d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088e4:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d103      	bne.n	80088f4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80088f2:	e002      	b.n	80088fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	220d      	movs	r2, #13
 80088f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d837      	bhi.n	8008970 <SAI_InitPCM+0xf0>
 8008900:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <SAI_InitPCM+0x88>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008919 	.word	0x08008919
 800890c:	0800892f 	.word	0x0800892f
 8008910:	08008945 	.word	0x08008945
 8008914:	0800895b 	.word	0x0800895b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2280      	movs	r2, #128	@ 0x80
 800891c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	011a      	lsls	r2, r3, #4
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2240      	movs	r2, #64	@ 0x40
 800892a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800892c:	e023      	b.n	8008976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2280      	movs	r2, #128	@ 0x80
 8008932:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2280      	movs	r2, #128	@ 0x80
 8008940:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008942:	e018      	b.n	8008976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	22c0      	movs	r2, #192	@ 0xc0
 8008948:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2280      	movs	r2, #128	@ 0x80
 8008956:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008958:	e00d      	b.n	8008976 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	22e0      	movs	r2, #224	@ 0xe0
 800895e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2280      	movs	r2, #128	@ 0x80
 800896c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800896e:	e002      	b.n	8008976 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
      break;
 8008974:	bf00      	nop
  }

  return status;
 8008976:	7dfb      	ldrb	r3, [r7, #23]
}
 8008978:	4618      	mov	r0, r3
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800898c:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <SAI_Disable+0x6c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a18      	ldr	r2, [pc, #96]	@ (80089f4 <SAI_Disable+0x70>)
 8008992:	fba2 2303 	umull	r2, r3, r2, r3
 8008996:	0b1b      	lsrs	r3, r3, #12
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80089ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	72fb      	strb	r3, [r7, #11]
      break;
 80089ca:	e009      	b.n	80089e0 <SAI_Disable+0x5c>
    }
    count--;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e7      	bne.n	80089b0 <SAI_Disable+0x2c>

  return status;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000068 	.word	0x20000068
 80089f4:	95cbec1b 	.word	0x95cbec1b

080089f8 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0aa      	b.n	8008b60 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa f822 	bl	8002a64 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008a42:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a52:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008a62:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a6c:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a7c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d012      	beq.n	8008aac <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d107      	bne.n	8008a9e <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a9a:	609a      	str	r2, [r3, #8]
 8008a9c:	e006      	b.n	8008aac <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008aaa:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d104      	bne.n	8008abe <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1a      	ldr	r2, [r3, #32]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008afa:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b00:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008b0c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b18:	d110      	bne.n	8008b3c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8008b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b2a:	d107      	bne.n	8008b3c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008b3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008b88:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8008b8a:	2180      	movs	r1, #128	@ 0x80
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f805 	bl	8008b9c <SMBUS_Enable_IRQ>

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bc2:	2b38      	cmp	r3, #56	@ 0x38
 8008bc4:	d103      	bne.n	8008bce <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008bcc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008bd4:	2bf2      	cmp	r3, #242	@ 0xf2
 8008bd6:	d103      	bne.n	8008be0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008bde:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 8008be6:	2bd4      	cmp	r3, #212	@ 0xd4
 8008be8:	d103      	bne.n	8008bf2 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6819      	ldr	r1, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]
}
 8008c02:	bf00      	nop
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e095      	b.n	8008d4c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c30:	d009      	beq.n	8008c46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	61da      	str	r2, [r3, #28]
 8008c38:	e005      	b.n	8008c46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d106      	bne.n	8008c66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fa f847 	bl	8002cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c86:	d902      	bls.n	8008c8e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e002      	b.n	8008c94 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008c9c:	d007      	beq.n	8008cae <HAL_SPI_Init+0xa0>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ca6:	d002      	beq.n	8008cae <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf0:	ea42 0103 	orr.w	r1, r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	f003 0204 	and.w	r2, r3, #4
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008d2a:	ea42 0103 	orr.w	r1, r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4613      	mov	r3, r2
 8008d62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d101      	bne.n	8008d76 <HAL_SPI_Transmit+0x22>
 8008d72:	2302      	movs	r3, #2
 8008d74:	e15f      	b.n	8009036 <HAL_SPI_Transmit+0x2e2>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d7e:	f7fa fc51 	bl	8003624 <HAL_GetTick>
 8008d82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d002      	beq.n	8008d9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
 8008d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d98:	e148      	b.n	800902c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Transmit+0x52>
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008daa:	e13f      	b.n	800902c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2203      	movs	r2, #3
 8008db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	88fa      	ldrh	r2, [r7, #6]
 8008dca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008df6:	d10f      	bne.n	8008e18 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e22:	2b40      	cmp	r3, #64	@ 0x40
 8008e24:	d007      	beq.n	8008e36 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e3e:	d94f      	bls.n	8008ee0 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <HAL_SPI_Transmit+0xfa>
 8008e48:	8afb      	ldrh	r3, [r7, #22]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d142      	bne.n	8008ed4 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	881a      	ldrh	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5e:	1c9a      	adds	r2, r3, #2
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e72:	e02f      	b.n	8008ed4 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d112      	bne.n	8008ea8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	881a      	ldrh	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	1c9a      	adds	r2, r3, #2
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ea6:	e015      	b.n	8008ed4 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ea8:	f7fa fbbc 	bl	8003624 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d803      	bhi.n	8008ec0 <HAL_SPI_Transmit+0x16c>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	d102      	bne.n	8008ec6 <HAL_SPI_Transmit+0x172>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008ed2:	e0ab      	b.n	800902c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1ca      	bne.n	8008e74 <HAL_SPI_Transmit+0x120>
 8008ede:	e080      	b.n	8008fe2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_SPI_Transmit+0x19a>
 8008ee8:	8afb      	ldrh	r3, [r7, #22]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d174      	bne.n	8008fd8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d912      	bls.n	8008f1e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efc:	881a      	ldrh	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f08:	1c9a      	adds	r2, r3, #2
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	3b02      	subs	r3, #2
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f1c:	e05c      	b.n	8008fd8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008f44:	e048      	b.n	8008fd8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d12b      	bne.n	8008fac <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d912      	bls.n	8008f84 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b02      	subs	r3, #2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f82:	e029      	b.n	8008fd8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008faa:	e015      	b.n	8008fd8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fac:	f7fa fb3a 	bl	8003624 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d803      	bhi.n	8008fc4 <HAL_SPI_Transmit+0x270>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d102      	bne.n	8008fca <HAL_SPI_Transmit+0x276>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008fd6:	e029      	b.n	800902c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1b1      	bne.n	8008f46 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f948 	bl	800927c <SPI_EndRxTxTransaction>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e003      	b.n	800902c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	4613      	mov	r3, r2
 800904e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009050:	f7fa fae8 	bl	8003624 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009060:	f7fa fae0 	bl	8003624 <HAL_GetTick>
 8009064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009066:	4b39      	ldr	r3, [pc, #228]	@ (800914c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	015b      	lsls	r3, r3, #5
 800906c:	0d1b      	lsrs	r3, r3, #20
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009076:	e054      	b.n	8009122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d050      	beq.n	8009122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009080:	f7fa fad0 	bl	8003624 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	429a      	cmp	r2, r3
 800908e:	d902      	bls.n	8009096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d13d      	bne.n	8009112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090ae:	d111      	bne.n	80090d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090b8:	d004      	beq.n	80090c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c2:	d107      	bne.n	80090d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090dc:	d10f      	bne.n	80090fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e017      	b.n	8009142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3b01      	subs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4013      	ands	r3, r2
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	429a      	cmp	r2, r3
 800913e:	d19b      	bne.n	8009078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000068 	.word	0x20000068

08009150 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08a      	sub	sp, #40	@ 0x28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009162:	f7fa fa5f 	bl	8003624 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	1a9b      	subs	r3, r3, r2
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	4413      	add	r3, r2
 8009170:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009172:	f7fa fa57 	bl	8003624 <HAL_GetTick>
 8009176:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	330c      	adds	r3, #12
 800917e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009180:	4b3d      	ldr	r3, [pc, #244]	@ (8009278 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	00da      	lsls	r2, r3, #3
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	0d1b      	lsrs	r3, r3, #20
 8009190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009198:	e060      	b.n	800925c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80091a0:	d107      	bne.n	80091b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d050      	beq.n	800925c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091ba:	f7fa fa33 	bl	8003624 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d902      	bls.n	80091d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d13d      	bne.n	800924c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091e8:	d111      	bne.n	800920e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091f2:	d004      	beq.n	80091fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091fc:	d107      	bne.n	800920e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800920c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009216:	d10f      	bne.n	8009238 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009236:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e010      	b.n	800926e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	3b01      	subs	r3, #1
 800925a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4013      	ands	r3, r2
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	d196      	bne.n	800919a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	@ 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000068 	.word	0x20000068

0800927c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff ff5b 	bl	8009150 <SPI_WaitFifoStateUntilTimeout>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a4:	f043 0220 	orr.w	r2, r3, #32
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e027      	b.n	8009300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2200      	movs	r2, #0
 80092b8:	2180      	movs	r1, #128	@ 0x80
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff fec0 	bl	8009040 <SPI_WaitFlagStateUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ca:	f043 0220 	orr.w	r2, r3, #32
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e014      	b.n	8009300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2200      	movs	r2, #0
 80092de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f7ff ff34 	bl	8009150 <SPI_WaitFifoStateUntilTimeout>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d007      	beq.n	80092fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f2:	f043 0220 	orr.w	r2, r3, #32
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e000      	b.n	8009300 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e049      	b.n	80093ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7f9 fd54 	bl	8002ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3304      	adds	r3, #4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f000 f94a 	bl	80095e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e0ff      	b.n	80095d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b14      	cmp	r3, #20
 80093e2:	f200 80f0 	bhi.w	80095c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80093e6:	a201      	add	r2, pc, #4	@ (adr r2, 80093ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009441 	.word	0x08009441
 80093f0:	080095c7 	.word	0x080095c7
 80093f4:	080095c7 	.word	0x080095c7
 80093f8:	080095c7 	.word	0x080095c7
 80093fc:	08009481 	.word	0x08009481
 8009400:	080095c7 	.word	0x080095c7
 8009404:	080095c7 	.word	0x080095c7
 8009408:	080095c7 	.word	0x080095c7
 800940c:	080094c3 	.word	0x080094c3
 8009410:	080095c7 	.word	0x080095c7
 8009414:	080095c7 	.word	0x080095c7
 8009418:	080095c7 	.word	0x080095c7
 800941c:	08009503 	.word	0x08009503
 8009420:	080095c7 	.word	0x080095c7
 8009424:	080095c7 	.word	0x080095c7
 8009428:	080095c7 	.word	0x080095c7
 800942c:	08009545 	.word	0x08009545
 8009430:	080095c7 	.word	0x080095c7
 8009434:	080095c7 	.word	0x080095c7
 8009438:	080095c7 	.word	0x080095c7
 800943c:	08009585 	.word	0x08009585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f964 	bl	8009714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0208 	orr.w	r2, r2, #8
 800945a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0204 	bic.w	r2, r2, #4
 800946a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6999      	ldr	r1, [r3, #24]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	619a      	str	r2, [r3, #24]
      break;
 800947e:	e0a5      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f9d4 	bl	8009834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800949a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6999      	ldr	r1, [r3, #24]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	619a      	str	r2, [r3, #24]
      break;
 80094c0:	e084      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fa3d 	bl	8009948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0208 	orr.w	r2, r2, #8
 80094dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0204 	bic.w	r2, r2, #4
 80094ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69d9      	ldr	r1, [r3, #28]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	691a      	ldr	r2, [r3, #16]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	61da      	str	r2, [r3, #28]
      break;
 8009500:	e064      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	4618      	mov	r0, r3
 800950a:	f000 faa5 	bl	8009a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800951c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800952c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69d9      	ldr	r1, [r3, #28]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	021a      	lsls	r2, r3, #8
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	61da      	str	r2, [r3, #28]
      break;
 8009542:	e043      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 faee 	bl	8009b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0208 	orr.w	r2, r2, #8
 800955e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0204 	bic.w	r2, r2, #4
 800956e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	691a      	ldr	r2, [r3, #16]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009582:	e023      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fb32 	bl	8009bf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800959e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	021a      	lsls	r2, r3, #8
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095c4:	e002      	b.n	80095cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	75fb      	strb	r3, [r7, #23]
      break;
 80095ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop

080095e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a40      	ldr	r2, [pc, #256]	@ (80096f4 <TIM_Base_SetConfig+0x114>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d013      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095fe:	d00f      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3d      	ldr	r2, [pc, #244]	@ (80096f8 <TIM_Base_SetConfig+0x118>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00b      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3c      	ldr	r2, [pc, #240]	@ (80096fc <TIM_Base_SetConfig+0x11c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3b      	ldr	r2, [pc, #236]	@ (8009700 <TIM_Base_SetConfig+0x120>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d003      	beq.n	8009620 <TIM_Base_SetConfig+0x40>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a3a      	ldr	r2, [pc, #232]	@ (8009704 <TIM_Base_SetConfig+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d108      	bne.n	8009632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a2f      	ldr	r2, [pc, #188]	@ (80096f4 <TIM_Base_SetConfig+0x114>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d01f      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009640:	d01b      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2c      	ldr	r2, [pc, #176]	@ (80096f8 <TIM_Base_SetConfig+0x118>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d017      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2b      	ldr	r2, [pc, #172]	@ (80096fc <TIM_Base_SetConfig+0x11c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d013      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a2a      	ldr	r2, [pc, #168]	@ (8009700 <TIM_Base_SetConfig+0x120>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00f      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a29      	ldr	r2, [pc, #164]	@ (8009704 <TIM_Base_SetConfig+0x124>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00b      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a28      	ldr	r2, [pc, #160]	@ (8009708 <TIM_Base_SetConfig+0x128>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d007      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a27      	ldr	r2, [pc, #156]	@ (800970c <TIM_Base_SetConfig+0x12c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d003      	beq.n	800967a <TIM_Base_SetConfig+0x9a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a26      	ldr	r2, [pc, #152]	@ (8009710 <TIM_Base_SetConfig+0x130>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d108      	bne.n	800968c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a10      	ldr	r2, [pc, #64]	@ (80096f4 <TIM_Base_SetConfig+0x114>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00f      	beq.n	80096d8 <TIM_Base_SetConfig+0xf8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a12      	ldr	r2, [pc, #72]	@ (8009704 <TIM_Base_SetConfig+0x124>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00b      	beq.n	80096d8 <TIM_Base_SetConfig+0xf8>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a11      	ldr	r2, [pc, #68]	@ (8009708 <TIM_Base_SetConfig+0x128>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d007      	beq.n	80096d8 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a10      	ldr	r2, [pc, #64]	@ (800970c <TIM_Base_SetConfig+0x12c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d003      	beq.n	80096d8 <TIM_Base_SetConfig+0xf8>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a0f      	ldr	r2, [pc, #60]	@ (8009710 <TIM_Base_SetConfig+0x130>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d103      	bne.n	80096e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	691a      	ldr	r2, [r3, #16]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	615a      	str	r2, [r3, #20]
}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40012c00 	.word	0x40012c00
 80096f8:	40000400 	.word	0x40000400
 80096fc:	40000800 	.word	0x40000800
 8009700:	40000c00 	.word	0x40000c00
 8009704:	40013400 	.word	0x40013400
 8009708:	40014000 	.word	0x40014000
 800970c:	40014400 	.word	0x40014400
 8009710:	40014800 	.word	0x40014800

08009714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	f023 0201 	bic.w	r2, r3, #1
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0302 	bic.w	r3, r3, #2
 8009760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a2c      	ldr	r2, [pc, #176]	@ (8009820 <TIM_OC1_SetConfig+0x10c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d00f      	beq.n	8009794 <TIM_OC1_SetConfig+0x80>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a2b      	ldr	r2, [pc, #172]	@ (8009824 <TIM_OC1_SetConfig+0x110>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00b      	beq.n	8009794 <TIM_OC1_SetConfig+0x80>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a2a      	ldr	r2, [pc, #168]	@ (8009828 <TIM_OC1_SetConfig+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_OC1_SetConfig+0x80>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a29      	ldr	r2, [pc, #164]	@ (800982c <TIM_OC1_SetConfig+0x118>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC1_SetConfig+0x80>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a28      	ldr	r2, [pc, #160]	@ (8009830 <TIM_OC1_SetConfig+0x11c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d10c      	bne.n	80097ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f023 0308 	bic.w	r3, r3, #8
 800979a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f023 0304 	bic.w	r3, r3, #4
 80097ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a1b      	ldr	r2, [pc, #108]	@ (8009820 <TIM_OC1_SetConfig+0x10c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d00f      	beq.n	80097d6 <TIM_OC1_SetConfig+0xc2>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009824 <TIM_OC1_SetConfig+0x110>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d00b      	beq.n	80097d6 <TIM_OC1_SetConfig+0xc2>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <TIM_OC1_SetConfig+0x114>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d007      	beq.n	80097d6 <TIM_OC1_SetConfig+0xc2>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a18      	ldr	r2, [pc, #96]	@ (800982c <TIM_OC1_SetConfig+0x118>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d003      	beq.n	80097d6 <TIM_OC1_SetConfig+0xc2>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a17      	ldr	r2, [pc, #92]	@ (8009830 <TIM_OC1_SetConfig+0x11c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d111      	bne.n	80097fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	621a      	str	r2, [r3, #32]
}
 8009814:	bf00      	nop
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	40012c00 	.word	0x40012c00
 8009824:	40013400 	.word	0x40013400
 8009828:	40014000 	.word	0x40014000
 800982c:	40014400 	.word	0x40014400
 8009830:	40014800 	.word	0x40014800

08009834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	f023 0210 	bic.w	r2, r3, #16
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800986e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	021b      	lsls	r3, r3, #8
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f023 0320 	bic.w	r3, r3, #32
 8009882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a28      	ldr	r2, [pc, #160]	@ (8009934 <TIM_OC2_SetConfig+0x100>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_OC2_SetConfig+0x6c>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a27      	ldr	r2, [pc, #156]	@ (8009938 <TIM_OC2_SetConfig+0x104>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10d      	bne.n	80098bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a1d      	ldr	r2, [pc, #116]	@ (8009934 <TIM_OC2_SetConfig+0x100>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00f      	beq.n	80098e4 <TIM_OC2_SetConfig+0xb0>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009938 <TIM_OC2_SetConfig+0x104>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00b      	beq.n	80098e4 <TIM_OC2_SetConfig+0xb0>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a1b      	ldr	r2, [pc, #108]	@ (800993c <TIM_OC2_SetConfig+0x108>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d007      	beq.n	80098e4 <TIM_OC2_SetConfig+0xb0>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009940 <TIM_OC2_SetConfig+0x10c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d003      	beq.n	80098e4 <TIM_OC2_SetConfig+0xb0>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <TIM_OC2_SetConfig+0x110>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d113      	bne.n	800990c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	621a      	str	r2, [r3, #32]
}
 8009926:	bf00      	nop
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40012c00 	.word	0x40012c00
 8009938:	40013400 	.word	0x40013400
 800993c:	40014000 	.word	0x40014000
 8009940:	40014400 	.word	0x40014400
 8009944:	40014800 	.word	0x40014800

08009948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800997a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a27      	ldr	r2, [pc, #156]	@ (8009a44 <TIM_OC3_SetConfig+0xfc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_OC3_SetConfig+0x6a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a26      	ldr	r2, [pc, #152]	@ (8009a48 <TIM_OC3_SetConfig+0x100>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d10d      	bne.n	80099ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009a44 <TIM_OC3_SetConfig+0xfc>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00f      	beq.n	80099f6 <TIM_OC3_SetConfig+0xae>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a48 <TIM_OC3_SetConfig+0x100>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <TIM_OC3_SetConfig+0xae>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a1a      	ldr	r2, [pc, #104]	@ (8009a4c <TIM_OC3_SetConfig+0x104>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d007      	beq.n	80099f6 <TIM_OC3_SetConfig+0xae>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a19      	ldr	r2, [pc, #100]	@ (8009a50 <TIM_OC3_SetConfig+0x108>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d003      	beq.n	80099f6 <TIM_OC3_SetConfig+0xae>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a18      	ldr	r2, [pc, #96]	@ (8009a54 <TIM_OC3_SetConfig+0x10c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d113      	bne.n	8009a1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	011b      	lsls	r3, r3, #4
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	621a      	str	r2, [r3, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40013400 	.word	0x40013400
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40014400 	.word	0x40014400
 8009a54:	40014800 	.word	0x40014800

08009a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69db      	ldr	r3, [r3, #28]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	031b      	lsls	r3, r3, #12
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a18      	ldr	r2, [pc, #96]	@ (8009b18 <TIM_OC4_SetConfig+0xc0>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_OC4_SetConfig+0x84>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a17      	ldr	r2, [pc, #92]	@ (8009b1c <TIM_OC4_SetConfig+0xc4>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_OC4_SetConfig+0x84>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a16      	ldr	r2, [pc, #88]	@ (8009b20 <TIM_OC4_SetConfig+0xc8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_OC4_SetConfig+0x84>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a15      	ldr	r2, [pc, #84]	@ (8009b24 <TIM_OC4_SetConfig+0xcc>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC4_SetConfig+0x84>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a14      	ldr	r2, [pc, #80]	@ (8009b28 <TIM_OC4_SetConfig+0xd0>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d109      	bne.n	8009af0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	019b      	lsls	r3, r3, #6
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	40012c00 	.word	0x40012c00
 8009b1c:	40013400 	.word	0x40013400
 8009b20:	40014000 	.word	0x40014000
 8009b24:	40014400 	.word	0x40014400
 8009b28:	40014800 	.word	0x40014800

08009b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009b70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	041b      	lsls	r3, r3, #16
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a17      	ldr	r2, [pc, #92]	@ (8009be0 <TIM_OC5_SetConfig+0xb4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00f      	beq.n	8009ba6 <TIM_OC5_SetConfig+0x7a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a16      	ldr	r2, [pc, #88]	@ (8009be4 <TIM_OC5_SetConfig+0xb8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00b      	beq.n	8009ba6 <TIM_OC5_SetConfig+0x7a>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a15      	ldr	r2, [pc, #84]	@ (8009be8 <TIM_OC5_SetConfig+0xbc>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d007      	beq.n	8009ba6 <TIM_OC5_SetConfig+0x7a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a14      	ldr	r2, [pc, #80]	@ (8009bec <TIM_OC5_SetConfig+0xc0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d003      	beq.n	8009ba6 <TIM_OC5_SetConfig+0x7a>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a13      	ldr	r2, [pc, #76]	@ (8009bf0 <TIM_OC5_SetConfig+0xc4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d109      	bne.n	8009bba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	621a      	str	r2, [r3, #32]
}
 8009bd4:	bf00      	nop
 8009bd6:	371c      	adds	r7, #28
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	40012c00 	.word	0x40012c00
 8009be4:	40013400 	.word	0x40013400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800

08009bf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	051b      	lsls	r3, r3, #20
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <TIM_OC6_SetConfig+0xb8>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00f      	beq.n	8009c70 <TIM_OC6_SetConfig+0x7c>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a17      	ldr	r2, [pc, #92]	@ (8009cb0 <TIM_OC6_SetConfig+0xbc>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_OC6_SetConfig+0x7c>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a16      	ldr	r2, [pc, #88]	@ (8009cb4 <TIM_OC6_SetConfig+0xc0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_OC6_SetConfig+0x7c>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a15      	ldr	r2, [pc, #84]	@ (8009cb8 <TIM_OC6_SetConfig+0xc4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_OC6_SetConfig+0x7c>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a14      	ldr	r2, [pc, #80]	@ (8009cbc <TIM_OC6_SetConfig+0xc8>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d109      	bne.n	8009c84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	029b      	lsls	r3, r3, #10
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	621a      	str	r2, [r3, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40013400 	.word	0x40013400
 8009cb4:	40014000 	.word	0x40014000
 8009cb8:	40014400 	.word	0x40014400
 8009cbc:	40014800 	.word	0x40014800

08009cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d101      	bne.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e068      	b.n	8009daa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a2d      	ldr	r2, [pc, #180]	@ (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d108      	bne.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01d      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4a:	d018      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d013      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00e      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a18      	ldr	r2, [pc, #96]	@ (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d009      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a13      	ldr	r2, [pc, #76]	@ (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d004      	beq.n	8009d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a14      	ldr	r2, [pc, #80]	@ (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d10c      	bne.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	40012c00 	.word	0x40012c00
 8009dbc:	40013400 	.word	0x40013400
 8009dc0:	40000400 	.word	0x40000400
 8009dc4:	40000800 	.word	0x40000800
 8009dc8:	40000c00 	.word	0x40000c00
 8009dcc:	40014000 	.word	0x40014000

08009dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e065      	b.n	8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a16      	ldr	r2, [pc, #88]	@ (8009ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d004      	beq.n	8009e7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a14      	ldr	r2, [pc, #80]	@ (8009ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d115      	bne.n	8009ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e84:	051b      	lsls	r3, r3, #20
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40012c00 	.word	0x40012c00
 8009ec8:	40013400 	.word	0x40013400

08009ecc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8009ecc:	b480      	push	{r7}
 8009ece:	b08b      	sub	sp, #44	@ 0x2c
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_TIMEx_ConfigBreakInput+0x20>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e0af      	b.n	800a04c <HAL_TIMEx_ConfigBreakInput+0x180>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	2b07      	cmp	r3, #7
 8009efc:	d83a      	bhi.n	8009f74 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f25 	.word	0x08009f25
 8009f08:	08009f39 	.word	0x08009f39
 8009f0c:	08009f75 	.word	0x08009f75
 8009f10:	08009f4d 	.word	0x08009f4d
 8009f14:	08009f75 	.word	0x08009f75
 8009f18:	08009f75 	.word	0x08009f75
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f61 	.word	0x08009f61
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8009f24:	2301      	movs	r3, #1
 8009f26:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8009f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f30:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8009f32:	2309      	movs	r3, #9
 8009f34:	613b      	str	r3, [r7, #16]
      break;
 8009f36:	e026      	b.n	8009f86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 8009f38:	2302      	movs	r3, #2
 8009f3a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8009f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f44:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 8009f46:	230a      	movs	r3, #10
 8009f48:	613b      	str	r3, [r7, #16]
      break;
 8009f4a:	e01c      	b.n	8009f86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8009f50:	2302      	movs	r3, #2
 8009f52:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8009f54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f58:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 8009f5a:	230b      	movs	r3, #11
 8009f5c:	613b      	str	r3, [r7, #16]
      break;
 8009f5e:	e012      	b.n	8009f86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8009f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f64:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8009f66:	2308      	movs	r3, #8
 8009f68:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	613b      	str	r3, [r7, #16]
      break;
 8009f72:	e008      	b.n	8009f86 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	613b      	str	r3, [r7, #16]
      break;
 8009f84:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d003      	beq.n	8009f94 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d029      	beq.n	8009fe6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8009f92:	e051      	b.n	800a038 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f9a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	43db      	mvns	r3, r3
 8009fa0:	6a3a      	ldr	r2, [r7, #32]
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	409a      	lsls	r2, r3
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d00d      	beq.n	8009fdc <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	6a3a      	ldr	r2, [r7, #32]
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	409a      	lsls	r2, r3
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	6a3a      	ldr	r2, [r7, #32]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6a3a      	ldr	r2, [r7, #32]
 8009fe2:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009fe4:	e02c      	b.n	800a040 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fec:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	6a3a      	ldr	r2, [r7, #32]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	409a      	lsls	r2, r3
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4013      	ands	r3, r2
 800a004:	6a3a      	ldr	r2, [r7, #32]
 800a006:	4313      	orrs	r3, r2
 800a008:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d00d      	beq.n	800a02e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	43db      	mvns	r3, r3
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	4013      	ands	r3, r2
 800a01a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689a      	ldr	r2, [r3, #8]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	409a      	lsls	r2, r3
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	4013      	ands	r3, r2
 800a028:	6a3a      	ldr	r2, [r7, #32]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6a3a      	ldr	r2, [r7, #32]
 800a034:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800a036:	e003      	b.n	800a040 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800a03e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	372c      	adds	r7, #44	@ 0x2c
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e042      	b.n	800a0f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7f8 fd4f 	bl	8002b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2224      	movs	r2, #36	@ 0x24
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 0201 	bic.w	r2, r2, #1
 800a098:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fbb2 	bl	800a80c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f8b3 	bl	800a214 <UART_SetConfig>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d101      	bne.n	800a0b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e01b      	b.n	800a0f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0201 	orr.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fc31 	bl	800a950 <UART_CheckIdleState>
 800a0ee:	4603      	mov	r3, r0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	@ 0x28
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	4613      	mov	r3, r2
 800a106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a10e:	2b20      	cmp	r3, #32
 800a110:	d17b      	bne.n	800a20a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <HAL_UART_Transmit+0x26>
 800a118:	88fb      	ldrh	r3, [r7, #6]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e074      	b.n	800a20c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2221      	movs	r2, #33	@ 0x21
 800a12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a132:	f7f9 fa77 	bl	8003624 <HAL_GetTick>
 800a136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	88fa      	ldrh	r2, [r7, #6]
 800a13c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	88fa      	ldrh	r2, [r7, #6]
 800a144:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a150:	d108      	bne.n	800a164 <HAL_UART_Transmit+0x6c>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e003      	b.n	800a16c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a16c:	e030      	b.n	800a1d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2200      	movs	r2, #0
 800a176:	2180      	movs	r1, #128	@ 0x80
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 fc93 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e03d      	b.n	800a20c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10b      	bne.n	800a1ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	881a      	ldrh	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1a2:	b292      	uxth	r2, r2
 800a1a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	61bb      	str	r3, [r7, #24]
 800a1ac:	e007      	b.n	800a1be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	781a      	ldrb	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1c8      	bne.n	800a16e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2140      	movs	r1, #64	@ 0x40
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fc5c 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e006      	b.n	800a20c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e000      	b.n	800a20c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a20a:	2302      	movs	r3, #2
  }
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a218:	b08c      	sub	sp, #48	@ 0x30
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	431a      	orrs	r2, r3
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	4313      	orrs	r3, r2
 800a23a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4baa      	ldr	r3, [pc, #680]	@ (800a4ec <UART_SetConfig+0x2d8>)
 800a244:	4013      	ands	r3, r2
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a24c:	430b      	orrs	r3, r1
 800a24e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a9f      	ldr	r2, [pc, #636]	@ (800a4f0 <UART_SetConfig+0x2dc>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d004      	beq.n	800a280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a27c:	4313      	orrs	r3, r2
 800a27e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a28a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a294:	430b      	orrs	r3, r1
 800a296:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29e:	f023 010f 	bic.w	r1, r3, #15
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a90      	ldr	r2, [pc, #576]	@ (800a4f4 <UART_SetConfig+0x2e0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d125      	bne.n	800a304 <UART_SetConfig+0xf0>
 800a2b8:	4b8f      	ldr	r3, [pc, #572]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2be:	f003 0303 	and.w	r3, r3, #3
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d81a      	bhi.n	800a2fc <UART_SetConfig+0xe8>
 800a2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2cc <UART_SetConfig+0xb8>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2dd 	.word	0x0800a2dd
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	0800a2e5 	.word	0x0800a2e5
 800a2d8:	0800a2f5 	.word	0x0800a2f5
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2e2:	e116      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ea:	e112      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a2ec:	2304      	movs	r3, #4
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f2:	e10e      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a2f4:	2308      	movs	r3, #8
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fa:	e10a      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a302:	e106      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a7c      	ldr	r2, [pc, #496]	@ (800a4fc <UART_SetConfig+0x2e8>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d138      	bne.n	800a380 <UART_SetConfig+0x16c>
 800a30e:	4b7a      	ldr	r3, [pc, #488]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a314:	f003 030c 	and.w	r3, r3, #12
 800a318:	2b0c      	cmp	r3, #12
 800a31a:	d82d      	bhi.n	800a378 <UART_SetConfig+0x164>
 800a31c:	a201      	add	r2, pc, #4	@ (adr r2, 800a324 <UART_SetConfig+0x110>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a359 	.word	0x0800a359
 800a328:	0800a379 	.word	0x0800a379
 800a32c:	0800a379 	.word	0x0800a379
 800a330:	0800a379 	.word	0x0800a379
 800a334:	0800a369 	.word	0x0800a369
 800a338:	0800a379 	.word	0x0800a379
 800a33c:	0800a379 	.word	0x0800a379
 800a340:	0800a379 	.word	0x0800a379
 800a344:	0800a361 	.word	0x0800a361
 800a348:	0800a379 	.word	0x0800a379
 800a34c:	0800a379 	.word	0x0800a379
 800a350:	0800a379 	.word	0x0800a379
 800a354:	0800a371 	.word	0x0800a371
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35e:	e0d8      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a360:	2302      	movs	r3, #2
 800a362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a366:	e0d4      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36e:	e0d0      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a376:	e0cc      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a37e:	e0c8      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a5e      	ldr	r2, [pc, #376]	@ (800a500 <UART_SetConfig+0x2ec>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d125      	bne.n	800a3d6 <UART_SetConfig+0x1c2>
 800a38a:	4b5b      	ldr	r3, [pc, #364]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a390:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a394:	2b30      	cmp	r3, #48	@ 0x30
 800a396:	d016      	beq.n	800a3c6 <UART_SetConfig+0x1b2>
 800a398:	2b30      	cmp	r3, #48	@ 0x30
 800a39a:	d818      	bhi.n	800a3ce <UART_SetConfig+0x1ba>
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	d00a      	beq.n	800a3b6 <UART_SetConfig+0x1a2>
 800a3a0:	2b20      	cmp	r3, #32
 800a3a2:	d814      	bhi.n	800a3ce <UART_SetConfig+0x1ba>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <UART_SetConfig+0x19a>
 800a3a8:	2b10      	cmp	r3, #16
 800a3aa:	d008      	beq.n	800a3be <UART_SetConfig+0x1aa>
 800a3ac:	e00f      	b.n	800a3ce <UART_SetConfig+0x1ba>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b4:	e0ad      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3bc:	e0a9      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a3be:	2304      	movs	r3, #4
 800a3c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3c4:	e0a5      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a3c6:	2308      	movs	r3, #8
 800a3c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3cc:	e0a1      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a3ce:	2310      	movs	r3, #16
 800a3d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3d4:	e09d      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a4a      	ldr	r2, [pc, #296]	@ (800a504 <UART_SetConfig+0x2f0>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d125      	bne.n	800a42c <UART_SetConfig+0x218>
 800a3e0:	4b45      	ldr	r3, [pc, #276]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a3ea:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3ec:	d016      	beq.n	800a41c <UART_SetConfig+0x208>
 800a3ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3f0:	d818      	bhi.n	800a424 <UART_SetConfig+0x210>
 800a3f2:	2b80      	cmp	r3, #128	@ 0x80
 800a3f4:	d00a      	beq.n	800a40c <UART_SetConfig+0x1f8>
 800a3f6:	2b80      	cmp	r3, #128	@ 0x80
 800a3f8:	d814      	bhi.n	800a424 <UART_SetConfig+0x210>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <UART_SetConfig+0x1f0>
 800a3fe:	2b40      	cmp	r3, #64	@ 0x40
 800a400:	d008      	beq.n	800a414 <UART_SetConfig+0x200>
 800a402:	e00f      	b.n	800a424 <UART_SetConfig+0x210>
 800a404:	2300      	movs	r3, #0
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a40a:	e082      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a40c:	2302      	movs	r3, #2
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a412:	e07e      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a414:	2304      	movs	r3, #4
 800a416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a41a:	e07a      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a41c:	2308      	movs	r3, #8
 800a41e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a422:	e076      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a42a:	e072      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a35      	ldr	r2, [pc, #212]	@ (800a508 <UART_SetConfig+0x2f4>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d12a      	bne.n	800a48c <UART_SetConfig+0x278>
 800a436:	4b30      	ldr	r3, [pc, #192]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a444:	d01a      	beq.n	800a47c <UART_SetConfig+0x268>
 800a446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a44a:	d81b      	bhi.n	800a484 <UART_SetConfig+0x270>
 800a44c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a450:	d00c      	beq.n	800a46c <UART_SetConfig+0x258>
 800a452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a456:	d815      	bhi.n	800a484 <UART_SetConfig+0x270>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <UART_SetConfig+0x250>
 800a45c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a460:	d008      	beq.n	800a474 <UART_SetConfig+0x260>
 800a462:	e00f      	b.n	800a484 <UART_SetConfig+0x270>
 800a464:	2300      	movs	r3, #0
 800a466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46a:	e052      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a46c:	2302      	movs	r3, #2
 800a46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a472:	e04e      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a474:	2304      	movs	r3, #4
 800a476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47a:	e04a      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a47c:	2308      	movs	r3, #8
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a482:	e046      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a484:	2310      	movs	r3, #16
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48a:	e042      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a17      	ldr	r2, [pc, #92]	@ (800a4f0 <UART_SetConfig+0x2dc>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d13a      	bne.n	800a50c <UART_SetConfig+0x2f8>
 800a496:	4b18      	ldr	r3, [pc, #96]	@ (800a4f8 <UART_SetConfig+0x2e4>)
 800a498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a4a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4a4:	d01a      	beq.n	800a4dc <UART_SetConfig+0x2c8>
 800a4a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4aa:	d81b      	bhi.n	800a4e4 <UART_SetConfig+0x2d0>
 800a4ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4b0:	d00c      	beq.n	800a4cc <UART_SetConfig+0x2b8>
 800a4b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4b6:	d815      	bhi.n	800a4e4 <UART_SetConfig+0x2d0>
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <UART_SetConfig+0x2b0>
 800a4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4c0:	d008      	beq.n	800a4d4 <UART_SetConfig+0x2c0>
 800a4c2:	e00f      	b.n	800a4e4 <UART_SetConfig+0x2d0>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ca:	e022      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d2:	e01e      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e01a      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a4dc:	2308      	movs	r3, #8
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e2:	e016      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	e012      	b.n	800a512 <UART_SetConfig+0x2fe>
 800a4ec:	cfff69f3 	.word	0xcfff69f3
 800a4f0:	40008000 	.word	0x40008000
 800a4f4:	40013800 	.word	0x40013800
 800a4f8:	40021000 	.word	0x40021000
 800a4fc:	40004400 	.word	0x40004400
 800a500:	40004800 	.word	0x40004800
 800a504:	40004c00 	.word	0x40004c00
 800a508:	40005000 	.word	0x40005000
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4aae      	ldr	r2, [pc, #696]	@ (800a7d0 <UART_SetConfig+0x5bc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	f040 8097 	bne.w	800a64c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a51e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a522:	2b08      	cmp	r3, #8
 800a524:	d823      	bhi.n	800a56e <UART_SetConfig+0x35a>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <UART_SetConfig+0x318>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a551 	.word	0x0800a551
 800a530:	0800a56f 	.word	0x0800a56f
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a56f 	.word	0x0800a56f
 800a53c:	0800a55f 	.word	0x0800a55f
 800a540:	0800a56f 	.word	0x0800a56f
 800a544:	0800a56f 	.word	0x0800a56f
 800a548:	0800a56f 	.word	0x0800a56f
 800a54c:	0800a567 	.word	0x0800a567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a550:	f7fc f88c 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 800a554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a556:	e010      	b.n	800a57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a558:	4b9e      	ldr	r3, [pc, #632]	@ (800a7d4 <UART_SetConfig+0x5c0>)
 800a55a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a55c:	e00d      	b.n	800a57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a55e:	f7fb ffed 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800a562:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a564:	e009      	b.n	800a57a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a56a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a56c:	e005      	b.n	800a57a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8130 	beq.w	800a7e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a586:	4a94      	ldr	r2, [pc, #592]	@ (800a7d8 <UART_SetConfig+0x5c4>)
 800a588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	fbb3 f3f2 	udiv	r3, r3, r2
 800a594:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	4413      	add	r3, r2
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d305      	bcc.n	800a5b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d903      	bls.n	800a5ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5b8:	e113      	b.n	800a7e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	2200      	movs	r2, #0
 800a5be:	60bb      	str	r3, [r7, #8]
 800a5c0:	60fa      	str	r2, [r7, #12]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c6:	4a84      	ldr	r2, [pc, #528]	@ (800a7d8 <UART_SetConfig+0x5c4>)
 800a5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	603b      	str	r3, [r7, #0]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5dc:	f7f6 fafc 	bl	8000bd8 <__aeabi_uldivmod>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	020b      	lsls	r3, r1, #8
 800a5f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5f6:	0202      	lsls	r2, r0, #8
 800a5f8:	6979      	ldr	r1, [r7, #20]
 800a5fa:	6849      	ldr	r1, [r1, #4]
 800a5fc:	0849      	lsrs	r1, r1, #1
 800a5fe:	2000      	movs	r0, #0
 800a600:	460c      	mov	r4, r1
 800a602:	4605      	mov	r5, r0
 800a604:	eb12 0804 	adds.w	r8, r2, r4
 800a608:	eb43 0905 	adc.w	r9, r3, r5
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	469a      	mov	sl, r3
 800a614:	4693      	mov	fp, r2
 800a616:	4652      	mov	r2, sl
 800a618:	465b      	mov	r3, fp
 800a61a:	4640      	mov	r0, r8
 800a61c:	4649      	mov	r1, r9
 800a61e:	f7f6 fadb 	bl	8000bd8 <__aeabi_uldivmod>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4613      	mov	r3, r2
 800a628:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a630:	d308      	bcc.n	800a644 <UART_SetConfig+0x430>
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a638:	d204      	bcs.n	800a644 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6a3a      	ldr	r2, [r7, #32]
 800a640:	60da      	str	r2, [r3, #12]
 800a642:	e0ce      	b.n	800a7e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a64a:	e0ca      	b.n	800a7e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a654:	d166      	bne.n	800a724 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	d827      	bhi.n	800a6ae <UART_SetConfig+0x49a>
 800a65e:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <UART_SetConfig+0x450>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a691 	.word	0x0800a691
 800a66c:	0800a699 	.word	0x0800a699
 800a670:	0800a6af 	.word	0x0800a6af
 800a674:	0800a69f 	.word	0x0800a69f
 800a678:	0800a6af 	.word	0x0800a6af
 800a67c:	0800a6af 	.word	0x0800a6af
 800a680:	0800a6af 	.word	0x0800a6af
 800a684:	0800a6a7 	.word	0x0800a6a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a688:	f7fb fff0 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 800a68c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a68e:	e014      	b.n	800a6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a690:	f7fc f802 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 800a694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a696:	e010      	b.n	800a6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a698:	4b4e      	ldr	r3, [pc, #312]	@ (800a7d4 <UART_SetConfig+0x5c0>)
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a69c:	e00d      	b.n	800a6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a69e:	f7fb ff4d 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800a6a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6a4:	e009      	b.n	800a6ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6ac:	e005      	b.n	800a6ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a6b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 8090 	beq.w	800a7e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c6:	4a44      	ldr	r2, [pc, #272]	@ (800a7d8 <UART_SetConfig+0x5c4>)
 800a6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6d4:	005a      	lsls	r2, r3, #1
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	441a      	add	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d916      	bls.n	800a71c <UART_SetConfig+0x508>
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f4:	d212      	bcs.n	800a71c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f023 030f 	bic.w	r3, r3, #15
 800a6fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	b29b      	uxth	r3, r3
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	8bfb      	ldrh	r3, [r7, #30]
 800a70e:	4313      	orrs	r3, r2
 800a710:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	8bfa      	ldrh	r2, [r7, #30]
 800a718:	60da      	str	r2, [r3, #12]
 800a71a:	e062      	b.n	800a7e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a722:	e05e      	b.n	800a7e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a724:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a728:	2b08      	cmp	r3, #8
 800a72a:	d828      	bhi.n	800a77e <UART_SetConfig+0x56a>
 800a72c:	a201      	add	r2, pc, #4	@ (adr r2, 800a734 <UART_SetConfig+0x520>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	0800a77f 	.word	0x0800a77f
 800a744:	0800a76f 	.word	0x0800a76f
 800a748:	0800a77f 	.word	0x0800a77f
 800a74c:	0800a77f 	.word	0x0800a77f
 800a750:	0800a77f 	.word	0x0800a77f
 800a754:	0800a777 	.word	0x0800a777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a758:	f7fb ff88 	bl	800666c <HAL_RCC_GetPCLK1Freq>
 800a75c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a75e:	e014      	b.n	800a78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a760:	f7fb ff9a 	bl	8006698 <HAL_RCC_GetPCLK2Freq>
 800a764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a766:	e010      	b.n	800a78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a768:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d4 <UART_SetConfig+0x5c0>)
 800a76a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a76c:	e00d      	b.n	800a78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a76e:	f7fb fee5 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800a772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a774:	e009      	b.n	800a78a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a77a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a77c:	e005      	b.n	800a78a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a788:	bf00      	nop
    }

    if (pclk != 0U)
 800a78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d028      	beq.n	800a7e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a794:	4a10      	ldr	r2, [pc, #64]	@ (800a7d8 <UART_SetConfig+0x5c4>)
 800a796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a79a:	461a      	mov	r2, r3
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	441a      	add	r2, r3
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	2b0f      	cmp	r3, #15
 800a7b8:	d910      	bls.n	800a7dc <UART_SetConfig+0x5c8>
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c0:	d20c      	bcs.n	800a7dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60da      	str	r2, [r3, #12]
 800a7cc:	e009      	b.n	800a7e2 <UART_SetConfig+0x5ce>
 800a7ce:	bf00      	nop
 800a7d0:	40008000 	.word	0x40008000
 800a7d4:	00f42400 	.word	0x00f42400
 800a7d8:	0800df20 	.word	0x0800df20
      }
      else
      {
        ret = HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a7fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a802:	4618      	mov	r0, r3
 800a804:	3730      	adds	r7, #48	@ 0x30
 800a806:	46bd      	mov	sp, r7
 800a808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00a      	beq.n	800a858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00a      	beq.n	800a87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a0:	f003 0310 	and.w	r3, r3, #16
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00a      	beq.n	800a8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01a      	beq.n	800a922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	430a      	orrs	r2, r1
 800a900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a90a:	d10a      	bne.n	800a922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00a      	beq.n	800a944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	605a      	str	r2, [r3, #4]
  }
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b098      	sub	sp, #96	@ 0x60
 800a954:	af02      	add	r7, sp, #8
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a960:	f7f8 fe60 	bl	8003624 <HAL_GetTick>
 800a964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b08      	cmp	r3, #8
 800a972:	d12f      	bne.n	800a9d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a97c:	2200      	movs	r2, #0
 800a97e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f88e 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d022      	beq.n	800a9d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e6      	bne.n	800a98e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e063      	b.n	800aa9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0304 	and.w	r3, r3, #4
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d149      	bne.n	800aa76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f857 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d03c      	beq.n	800aa76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	623b      	str	r3, [r7, #32]
   return(result);
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e6      	bne.n	800a9fc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f023 0301 	bic.w	r3, r3, #1
 800aa44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa4e:	61fa      	str	r2, [r7, #28]
 800aa50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	69b9      	ldr	r1, [r7, #24]
 800aa54:	69fa      	ldr	r2, [r7, #28]
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e5      	bne.n	800aa2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e012      	b.n	800aa9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3758      	adds	r7, #88	@ 0x58
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	4613      	mov	r3, r2
 800aab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab4:	e049      	b.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabc:	d045      	beq.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aabe:	f7f8 fdb1 	bl	8003624 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d302      	bcc.n	800aad4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e048      	b.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d031      	beq.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d110      	bne.n	800ab16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2208      	movs	r2, #8
 800aafa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f838 	bl	800ab72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2208      	movs	r2, #8
 800ab06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e029      	b.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab24:	d111      	bne.n	800ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 f81e 	bl	800ab72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e00f      	b.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	69da      	ldr	r2, [r3, #28]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4013      	ands	r3, r2
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	bf0c      	ite	eq
 800ab5a:	2301      	moveq	r3, #1
 800ab5c:	2300      	movne	r3, #0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d0a6      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b095      	sub	sp, #84	@ 0x54
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e6      	bne.n	800ab7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb4:	6a3b      	ldr	r3, [r7, #32]
 800abb6:	e853 3f00 	ldrex	r3, [r3]
 800abba:	61fb      	str	r3, [r7, #28]
   return(result);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abc2:	f023 0301 	bic.w	r3, r3, #1
 800abc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abd8:	e841 2300 	strex	r3, r2, [r1]
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1e3      	bne.n	800abac <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d118      	bne.n	800ac1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f023 0310 	bic.w	r3, r3, #16
 800ac00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	e841 2300 	strex	r3, r2, [r1]
 800ac16:	613b      	str	r3, [r7, #16]
   return(result);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1e6      	bne.n	800abec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac32:	bf00      	nop
 800ac34:	3754      	adds	r7, #84	@ 0x54
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b085      	sub	sp, #20
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e027      	b.n	800aca4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2224      	movs	r2, #36	@ 0x24
 800ac60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0201 	bic.w	r2, r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2220      	movs	r2, #32
 800ac96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acc4:	2302      	movs	r3, #2
 800acc6:	e02d      	b.n	800ad24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2224      	movs	r2, #36	@ 0x24
 800acd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0201 	bic.w	r2, r2, #1
 800acee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f84f 	bl	800ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad40:	2302      	movs	r3, #2
 800ad42:	e02d      	b.n	800ada0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2224      	movs	r2, #36	@ 0x24
 800ad50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0201 	bic.w	r2, r2, #1
 800ad6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f811 	bl	800ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adc8:	e031      	b.n	800ae2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adca:	2308      	movs	r3, #8
 800adcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adce:	2308      	movs	r3, #8
 800add0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	0e5b      	lsrs	r3, r3, #25
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	0f5b      	lsrs	r3, r3, #29
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 0307 	and.w	r3, r3, #7
 800adf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	7b3a      	ldrb	r2, [r7, #12]
 800adf6:	4911      	ldr	r1, [pc, #68]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x94>)
 800adf8:	5c8a      	ldrb	r2, [r1, r2]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adfe:	7b3a      	ldrb	r2, [r7, #12]
 800ae00:	490f      	ldr	r1, [pc, #60]	@ (800ae40 <UARTEx_SetNbDataToProcess+0x98>)
 800ae02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	7b7a      	ldrb	r2, [r7, #13]
 800ae14:	4909      	ldr	r1, [pc, #36]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x94>)
 800ae16:	5c8a      	ldrb	r2, [r1, r2]
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae1c:	7b7a      	ldrb	r2, [r7, #13]
 800ae1e:	4908      	ldr	r1, [pc, #32]	@ (800ae40 <UARTEx_SetNbDataToProcess+0x98>)
 800ae20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae22:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	0800df38 	.word	0x0800df38
 800ae40:	0800df40 	.word	0x0800df40

0800ae44 <__cvt>:
 800ae44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	ec57 6b10 	vmov	r6, r7, d0
 800ae4c:	2f00      	cmp	r7, #0
 800ae4e:	460c      	mov	r4, r1
 800ae50:	4619      	mov	r1, r3
 800ae52:	463b      	mov	r3, r7
 800ae54:	bfbb      	ittet	lt
 800ae56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ae5a:	461f      	movlt	r7, r3
 800ae5c:	2300      	movge	r3, #0
 800ae5e:	232d      	movlt	r3, #45	@ 0x2d
 800ae60:	700b      	strb	r3, [r1, #0]
 800ae62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ae68:	4691      	mov	r9, r2
 800ae6a:	f023 0820 	bic.w	r8, r3, #32
 800ae6e:	bfbc      	itt	lt
 800ae70:	4632      	movlt	r2, r6
 800ae72:	4616      	movlt	r6, r2
 800ae74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae78:	d005      	beq.n	800ae86 <__cvt+0x42>
 800ae7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ae7e:	d100      	bne.n	800ae82 <__cvt+0x3e>
 800ae80:	3401      	adds	r4, #1
 800ae82:	2102      	movs	r1, #2
 800ae84:	e000      	b.n	800ae88 <__cvt+0x44>
 800ae86:	2103      	movs	r1, #3
 800ae88:	ab03      	add	r3, sp, #12
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	ab02      	add	r3, sp, #8
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	ec47 6b10 	vmov	d0, r6, r7
 800ae94:	4653      	mov	r3, sl
 800ae96:	4622      	mov	r2, r4
 800ae98:	f000 ff3e 	bl	800bd18 <_dtoa_r>
 800ae9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aea0:	4605      	mov	r5, r0
 800aea2:	d119      	bne.n	800aed8 <__cvt+0x94>
 800aea4:	f019 0f01 	tst.w	r9, #1
 800aea8:	d00e      	beq.n	800aec8 <__cvt+0x84>
 800aeaa:	eb00 0904 	add.w	r9, r0, r4
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fe1f 	bl	8000af8 <__aeabi_dcmpeq>
 800aeba:	b108      	cbz	r0, 800aec0 <__cvt+0x7c>
 800aebc:	f8cd 900c 	str.w	r9, [sp, #12]
 800aec0:	2230      	movs	r2, #48	@ 0x30
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	454b      	cmp	r3, r9
 800aec6:	d31e      	bcc.n	800af06 <__cvt+0xc2>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aecc:	1b5b      	subs	r3, r3, r5
 800aece:	4628      	mov	r0, r5
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	b004      	add	sp, #16
 800aed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aedc:	eb00 0904 	add.w	r9, r0, r4
 800aee0:	d1e5      	bne.n	800aeae <__cvt+0x6a>
 800aee2:	7803      	ldrb	r3, [r0, #0]
 800aee4:	2b30      	cmp	r3, #48	@ 0x30
 800aee6:	d10a      	bne.n	800aefe <__cvt+0xba>
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	4630      	mov	r0, r6
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 fe02 	bl	8000af8 <__aeabi_dcmpeq>
 800aef4:	b918      	cbnz	r0, 800aefe <__cvt+0xba>
 800aef6:	f1c4 0401 	rsb	r4, r4, #1
 800aefa:	f8ca 4000 	str.w	r4, [sl]
 800aefe:	f8da 3000 	ldr.w	r3, [sl]
 800af02:	4499      	add	r9, r3
 800af04:	e7d3      	b.n	800aeae <__cvt+0x6a>
 800af06:	1c59      	adds	r1, r3, #1
 800af08:	9103      	str	r1, [sp, #12]
 800af0a:	701a      	strb	r2, [r3, #0]
 800af0c:	e7d9      	b.n	800aec2 <__cvt+0x7e>

0800af0e <__exponent>:
 800af0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af10:	2900      	cmp	r1, #0
 800af12:	bfba      	itte	lt
 800af14:	4249      	neglt	r1, r1
 800af16:	232d      	movlt	r3, #45	@ 0x2d
 800af18:	232b      	movge	r3, #43	@ 0x2b
 800af1a:	2909      	cmp	r1, #9
 800af1c:	7002      	strb	r2, [r0, #0]
 800af1e:	7043      	strb	r3, [r0, #1]
 800af20:	dd29      	ble.n	800af76 <__exponent+0x68>
 800af22:	f10d 0307 	add.w	r3, sp, #7
 800af26:	461d      	mov	r5, r3
 800af28:	270a      	movs	r7, #10
 800af2a:	461a      	mov	r2, r3
 800af2c:	fbb1 f6f7 	udiv	r6, r1, r7
 800af30:	fb07 1416 	mls	r4, r7, r6, r1
 800af34:	3430      	adds	r4, #48	@ 0x30
 800af36:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af3a:	460c      	mov	r4, r1
 800af3c:	2c63      	cmp	r4, #99	@ 0x63
 800af3e:	f103 33ff 	add.w	r3, r3, #4294967295
 800af42:	4631      	mov	r1, r6
 800af44:	dcf1      	bgt.n	800af2a <__exponent+0x1c>
 800af46:	3130      	adds	r1, #48	@ 0x30
 800af48:	1e94      	subs	r4, r2, #2
 800af4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af4e:	1c41      	adds	r1, r0, #1
 800af50:	4623      	mov	r3, r4
 800af52:	42ab      	cmp	r3, r5
 800af54:	d30a      	bcc.n	800af6c <__exponent+0x5e>
 800af56:	f10d 0309 	add.w	r3, sp, #9
 800af5a:	1a9b      	subs	r3, r3, r2
 800af5c:	42ac      	cmp	r4, r5
 800af5e:	bf88      	it	hi
 800af60:	2300      	movhi	r3, #0
 800af62:	3302      	adds	r3, #2
 800af64:	4403      	add	r3, r0
 800af66:	1a18      	subs	r0, r3, r0
 800af68:	b003      	add	sp, #12
 800af6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af70:	f801 6f01 	strb.w	r6, [r1, #1]!
 800af74:	e7ed      	b.n	800af52 <__exponent+0x44>
 800af76:	2330      	movs	r3, #48	@ 0x30
 800af78:	3130      	adds	r1, #48	@ 0x30
 800af7a:	7083      	strb	r3, [r0, #2]
 800af7c:	70c1      	strb	r1, [r0, #3]
 800af7e:	1d03      	adds	r3, r0, #4
 800af80:	e7f1      	b.n	800af66 <__exponent+0x58>
	...

0800af84 <_printf_float>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	b08d      	sub	sp, #52	@ 0x34
 800af8a:	460c      	mov	r4, r1
 800af8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800af90:	4616      	mov	r6, r2
 800af92:	461f      	mov	r7, r3
 800af94:	4605      	mov	r5, r0
 800af96:	f000 fdbf 	bl	800bb18 <_localeconv_r>
 800af9a:	6803      	ldr	r3, [r0, #0]
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7f5 f97e 	bl	80002a0 <strlen>
 800afa4:	2300      	movs	r3, #0
 800afa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa8:	f8d8 3000 	ldr.w	r3, [r8]
 800afac:	9005      	str	r0, [sp, #20]
 800afae:	3307      	adds	r3, #7
 800afb0:	f023 0307 	bic.w	r3, r3, #7
 800afb4:	f103 0208 	add.w	r2, r3, #8
 800afb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800afbc:	f8d4 b000 	ldr.w	fp, [r4]
 800afc0:	f8c8 2000 	str.w	r2, [r8]
 800afc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800afcc:	9307      	str	r3, [sp, #28]
 800afce:	f8cd 8018 	str.w	r8, [sp, #24]
 800afd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800afd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afda:	4b9c      	ldr	r3, [pc, #624]	@ (800b24c <_printf_float+0x2c8>)
 800afdc:	f04f 32ff 	mov.w	r2, #4294967295
 800afe0:	f7f5 fdbc 	bl	8000b5c <__aeabi_dcmpun>
 800afe4:	bb70      	cbnz	r0, 800b044 <_printf_float+0xc0>
 800afe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afea:	4b98      	ldr	r3, [pc, #608]	@ (800b24c <_printf_float+0x2c8>)
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	f7f5 fd96 	bl	8000b20 <__aeabi_dcmple>
 800aff4:	bb30      	cbnz	r0, 800b044 <_printf_float+0xc0>
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	f7f5 fd85 	bl	8000b0c <__aeabi_dcmplt>
 800b002:	b110      	cbz	r0, 800b00a <_printf_float+0x86>
 800b004:	232d      	movs	r3, #45	@ 0x2d
 800b006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b00a:	4a91      	ldr	r2, [pc, #580]	@ (800b250 <_printf_float+0x2cc>)
 800b00c:	4b91      	ldr	r3, [pc, #580]	@ (800b254 <_printf_float+0x2d0>)
 800b00e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b012:	bf94      	ite	ls
 800b014:	4690      	movls	r8, r2
 800b016:	4698      	movhi	r8, r3
 800b018:	2303      	movs	r3, #3
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	f02b 0304 	bic.w	r3, fp, #4
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	f04f 0900 	mov.w	r9, #0
 800b026:	9700      	str	r7, [sp, #0]
 800b028:	4633      	mov	r3, r6
 800b02a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b02c:	4621      	mov	r1, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	f000 f9d2 	bl	800b3d8 <_printf_common>
 800b034:	3001      	adds	r0, #1
 800b036:	f040 808d 	bne.w	800b154 <_printf_float+0x1d0>
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	b00d      	add	sp, #52	@ 0x34
 800b040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b044:	4642      	mov	r2, r8
 800b046:	464b      	mov	r3, r9
 800b048:	4640      	mov	r0, r8
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7f5 fd86 	bl	8000b5c <__aeabi_dcmpun>
 800b050:	b140      	cbz	r0, 800b064 <_printf_float+0xe0>
 800b052:	464b      	mov	r3, r9
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfbc      	itt	lt
 800b058:	232d      	movlt	r3, #45	@ 0x2d
 800b05a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b05e:	4a7e      	ldr	r2, [pc, #504]	@ (800b258 <_printf_float+0x2d4>)
 800b060:	4b7e      	ldr	r3, [pc, #504]	@ (800b25c <_printf_float+0x2d8>)
 800b062:	e7d4      	b.n	800b00e <_printf_float+0x8a>
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b06a:	9206      	str	r2, [sp, #24]
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	d13b      	bne.n	800b0e8 <_printf_float+0x164>
 800b070:	2306      	movs	r3, #6
 800b072:	6063      	str	r3, [r4, #4]
 800b074:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b078:	2300      	movs	r3, #0
 800b07a:	6022      	str	r2, [r4, #0]
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b080:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b084:	ab09      	add	r3, sp, #36	@ 0x24
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	ec49 8b10 	vmov	d0, r8, r9
 800b08e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b092:	4628      	mov	r0, r5
 800b094:	f7ff fed6 	bl	800ae44 <__cvt>
 800b098:	9b06      	ldr	r3, [sp, #24]
 800b09a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b09c:	2b47      	cmp	r3, #71	@ 0x47
 800b09e:	4680      	mov	r8, r0
 800b0a0:	d129      	bne.n	800b0f6 <_printf_float+0x172>
 800b0a2:	1cc8      	adds	r0, r1, #3
 800b0a4:	db02      	blt.n	800b0ac <_printf_float+0x128>
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	4299      	cmp	r1, r3
 800b0aa:	dd41      	ble.n	800b130 <_printf_float+0x1ac>
 800b0ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800b0b0:	fa5f fa8a 	uxtb.w	sl, sl
 800b0b4:	3901      	subs	r1, #1
 800b0b6:	4652      	mov	r2, sl
 800b0b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b0bc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0be:	f7ff ff26 	bl	800af0e <__exponent>
 800b0c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0c4:	1813      	adds	r3, r2, r0
 800b0c6:	2a01      	cmp	r2, #1
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	dc02      	bgt.n	800b0d4 <_printf_float+0x150>
 800b0ce:	6822      	ldr	r2, [r4, #0]
 800b0d0:	07d2      	lsls	r2, r2, #31
 800b0d2:	d501      	bpl.n	800b0d8 <_printf_float+0x154>
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0a2      	beq.n	800b026 <_printf_float+0xa2>
 800b0e0:	232d      	movs	r3, #45	@ 0x2d
 800b0e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0e6:	e79e      	b.n	800b026 <_printf_float+0xa2>
 800b0e8:	9a06      	ldr	r2, [sp, #24]
 800b0ea:	2a47      	cmp	r2, #71	@ 0x47
 800b0ec:	d1c2      	bne.n	800b074 <_printf_float+0xf0>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1c0      	bne.n	800b074 <_printf_float+0xf0>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e7bd      	b.n	800b072 <_printf_float+0xee>
 800b0f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0fa:	d9db      	bls.n	800b0b4 <_printf_float+0x130>
 800b0fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b100:	d118      	bne.n	800b134 <_printf_float+0x1b0>
 800b102:	2900      	cmp	r1, #0
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	dd0b      	ble.n	800b120 <_printf_float+0x19c>
 800b108:	6121      	str	r1, [r4, #16]
 800b10a:	b913      	cbnz	r3, 800b112 <_printf_float+0x18e>
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	07d0      	lsls	r0, r2, #31
 800b110:	d502      	bpl.n	800b118 <_printf_float+0x194>
 800b112:	3301      	adds	r3, #1
 800b114:	440b      	add	r3, r1
 800b116:	6123      	str	r3, [r4, #16]
 800b118:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b11a:	f04f 0900 	mov.w	r9, #0
 800b11e:	e7db      	b.n	800b0d8 <_printf_float+0x154>
 800b120:	b913      	cbnz	r3, 800b128 <_printf_float+0x1a4>
 800b122:	6822      	ldr	r2, [r4, #0]
 800b124:	07d2      	lsls	r2, r2, #31
 800b126:	d501      	bpl.n	800b12c <_printf_float+0x1a8>
 800b128:	3302      	adds	r3, #2
 800b12a:	e7f4      	b.n	800b116 <_printf_float+0x192>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e7f2      	b.n	800b116 <_printf_float+0x192>
 800b130:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b136:	4299      	cmp	r1, r3
 800b138:	db05      	blt.n	800b146 <_printf_float+0x1c2>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	6121      	str	r1, [r4, #16]
 800b13e:	07d8      	lsls	r0, r3, #31
 800b140:	d5ea      	bpl.n	800b118 <_printf_float+0x194>
 800b142:	1c4b      	adds	r3, r1, #1
 800b144:	e7e7      	b.n	800b116 <_printf_float+0x192>
 800b146:	2900      	cmp	r1, #0
 800b148:	bfd4      	ite	le
 800b14a:	f1c1 0202 	rsble	r2, r1, #2
 800b14e:	2201      	movgt	r2, #1
 800b150:	4413      	add	r3, r2
 800b152:	e7e0      	b.n	800b116 <_printf_float+0x192>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	055a      	lsls	r2, r3, #21
 800b158:	d407      	bmi.n	800b16a <_printf_float+0x1e6>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	4642      	mov	r2, r8
 800b15e:	4631      	mov	r1, r6
 800b160:	4628      	mov	r0, r5
 800b162:	47b8      	blx	r7
 800b164:	3001      	adds	r0, #1
 800b166:	d12b      	bne.n	800b1c0 <_printf_float+0x23c>
 800b168:	e767      	b.n	800b03a <_printf_float+0xb6>
 800b16a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b16e:	f240 80dd 	bls.w	800b32c <_printf_float+0x3a8>
 800b172:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	f7f5 fcbd 	bl	8000af8 <__aeabi_dcmpeq>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d033      	beq.n	800b1ea <_printf_float+0x266>
 800b182:	4a37      	ldr	r2, [pc, #220]	@ (800b260 <_printf_float+0x2dc>)
 800b184:	2301      	movs	r3, #1
 800b186:	4631      	mov	r1, r6
 800b188:	4628      	mov	r0, r5
 800b18a:	47b8      	blx	r7
 800b18c:	3001      	adds	r0, #1
 800b18e:	f43f af54 	beq.w	800b03a <_printf_float+0xb6>
 800b192:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b196:	4543      	cmp	r3, r8
 800b198:	db02      	blt.n	800b1a0 <_printf_float+0x21c>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	07d8      	lsls	r0, r3, #31
 800b19e:	d50f      	bpl.n	800b1c0 <_printf_float+0x23c>
 800b1a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	47b8      	blx	r7
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	f43f af45 	beq.w	800b03a <_printf_float+0xb6>
 800b1b0:	f04f 0900 	mov.w	r9, #0
 800b1b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1b8:	f104 0a1a 	add.w	sl, r4, #26
 800b1bc:	45c8      	cmp	r8, r9
 800b1be:	dc09      	bgt.n	800b1d4 <_printf_float+0x250>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	079b      	lsls	r3, r3, #30
 800b1c4:	f100 8103 	bmi.w	800b3ce <_printf_float+0x44a>
 800b1c8:	68e0      	ldr	r0, [r4, #12]
 800b1ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1cc:	4298      	cmp	r0, r3
 800b1ce:	bfb8      	it	lt
 800b1d0:	4618      	movlt	r0, r3
 800b1d2:	e734      	b.n	800b03e <_printf_float+0xba>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	4652      	mov	r2, sl
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f af2b 	beq.w	800b03a <_printf_float+0xb6>
 800b1e4:	f109 0901 	add.w	r9, r9, #1
 800b1e8:	e7e8      	b.n	800b1bc <_printf_float+0x238>
 800b1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dc39      	bgt.n	800b264 <_printf_float+0x2e0>
 800b1f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b260 <_printf_float+0x2dc>)
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	f43f af1d 	beq.w	800b03a <_printf_float+0xb6>
 800b200:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b204:	ea59 0303 	orrs.w	r3, r9, r3
 800b208:	d102      	bne.n	800b210 <_printf_float+0x28c>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	07d9      	lsls	r1, r3, #31
 800b20e:	d5d7      	bpl.n	800b1c0 <_printf_float+0x23c>
 800b210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b214:	4631      	mov	r1, r6
 800b216:	4628      	mov	r0, r5
 800b218:	47b8      	blx	r7
 800b21a:	3001      	adds	r0, #1
 800b21c:	f43f af0d 	beq.w	800b03a <_printf_float+0xb6>
 800b220:	f04f 0a00 	mov.w	sl, #0
 800b224:	f104 0b1a 	add.w	fp, r4, #26
 800b228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b22a:	425b      	negs	r3, r3
 800b22c:	4553      	cmp	r3, sl
 800b22e:	dc01      	bgt.n	800b234 <_printf_float+0x2b0>
 800b230:	464b      	mov	r3, r9
 800b232:	e793      	b.n	800b15c <_printf_float+0x1d8>
 800b234:	2301      	movs	r3, #1
 800b236:	465a      	mov	r2, fp
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	f43f aefb 	beq.w	800b03a <_printf_float+0xb6>
 800b244:	f10a 0a01 	add.w	sl, sl, #1
 800b248:	e7ee      	b.n	800b228 <_printf_float+0x2a4>
 800b24a:	bf00      	nop
 800b24c:	7fefffff 	.word	0x7fefffff
 800b250:	0800df48 	.word	0x0800df48
 800b254:	0800df4c 	.word	0x0800df4c
 800b258:	0800df50 	.word	0x0800df50
 800b25c:	0800df54 	.word	0x0800df54
 800b260:	0800df58 	.word	0x0800df58
 800b264:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b266:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b26a:	4553      	cmp	r3, sl
 800b26c:	bfa8      	it	ge
 800b26e:	4653      	movge	r3, sl
 800b270:	2b00      	cmp	r3, #0
 800b272:	4699      	mov	r9, r3
 800b274:	dc36      	bgt.n	800b2e4 <_printf_float+0x360>
 800b276:	f04f 0b00 	mov.w	fp, #0
 800b27a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b27e:	f104 021a 	add.w	r2, r4, #26
 800b282:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b284:	9306      	str	r3, [sp, #24]
 800b286:	eba3 0309 	sub.w	r3, r3, r9
 800b28a:	455b      	cmp	r3, fp
 800b28c:	dc31      	bgt.n	800b2f2 <_printf_float+0x36e>
 800b28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b290:	459a      	cmp	sl, r3
 800b292:	dc3a      	bgt.n	800b30a <_printf_float+0x386>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	07da      	lsls	r2, r3, #31
 800b298:	d437      	bmi.n	800b30a <_printf_float+0x386>
 800b29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b29c:	ebaa 0903 	sub.w	r9, sl, r3
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	ebaa 0303 	sub.w	r3, sl, r3
 800b2a6:	4599      	cmp	r9, r3
 800b2a8:	bfa8      	it	ge
 800b2aa:	4699      	movge	r9, r3
 800b2ac:	f1b9 0f00 	cmp.w	r9, #0
 800b2b0:	dc33      	bgt.n	800b31a <_printf_float+0x396>
 800b2b2:	f04f 0800 	mov.w	r8, #0
 800b2b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2ba:	f104 0b1a 	add.w	fp, r4, #26
 800b2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c0:	ebaa 0303 	sub.w	r3, sl, r3
 800b2c4:	eba3 0309 	sub.w	r3, r3, r9
 800b2c8:	4543      	cmp	r3, r8
 800b2ca:	f77f af79 	ble.w	800b1c0 <_printf_float+0x23c>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	465a      	mov	r2, fp
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f43f aeae 	beq.w	800b03a <_printf_float+0xb6>
 800b2de:	f108 0801 	add.w	r8, r8, #1
 800b2e2:	e7ec      	b.n	800b2be <_printf_float+0x33a>
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b8      	blx	r7
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d1c2      	bne.n	800b276 <_printf_float+0x2f2>
 800b2f0:	e6a3      	b.n	800b03a <_printf_float+0xb6>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	9206      	str	r2, [sp, #24]
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f43f ae9c 	beq.w	800b03a <_printf_float+0xb6>
 800b302:	9a06      	ldr	r2, [sp, #24]
 800b304:	f10b 0b01 	add.w	fp, fp, #1
 800b308:	e7bb      	b.n	800b282 <_printf_float+0x2fe>
 800b30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b30e:	4631      	mov	r1, r6
 800b310:	4628      	mov	r0, r5
 800b312:	47b8      	blx	r7
 800b314:	3001      	adds	r0, #1
 800b316:	d1c0      	bne.n	800b29a <_printf_float+0x316>
 800b318:	e68f      	b.n	800b03a <_printf_float+0xb6>
 800b31a:	9a06      	ldr	r2, [sp, #24]
 800b31c:	464b      	mov	r3, r9
 800b31e:	4442      	add	r2, r8
 800b320:	4631      	mov	r1, r6
 800b322:	4628      	mov	r0, r5
 800b324:	47b8      	blx	r7
 800b326:	3001      	adds	r0, #1
 800b328:	d1c3      	bne.n	800b2b2 <_printf_float+0x32e>
 800b32a:	e686      	b.n	800b03a <_printf_float+0xb6>
 800b32c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b330:	f1ba 0f01 	cmp.w	sl, #1
 800b334:	dc01      	bgt.n	800b33a <_printf_float+0x3b6>
 800b336:	07db      	lsls	r3, r3, #31
 800b338:	d536      	bpl.n	800b3a8 <_printf_float+0x424>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4642      	mov	r2, r8
 800b33e:	4631      	mov	r1, r6
 800b340:	4628      	mov	r0, r5
 800b342:	47b8      	blx	r7
 800b344:	3001      	adds	r0, #1
 800b346:	f43f ae78 	beq.w	800b03a <_printf_float+0xb6>
 800b34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b34e:	4631      	mov	r1, r6
 800b350:	4628      	mov	r0, r5
 800b352:	47b8      	blx	r7
 800b354:	3001      	adds	r0, #1
 800b356:	f43f ae70 	beq.w	800b03a <_printf_float+0xb6>
 800b35a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b35e:	2200      	movs	r2, #0
 800b360:	2300      	movs	r3, #0
 800b362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b366:	f7f5 fbc7 	bl	8000af8 <__aeabi_dcmpeq>
 800b36a:	b9c0      	cbnz	r0, 800b39e <_printf_float+0x41a>
 800b36c:	4653      	mov	r3, sl
 800b36e:	f108 0201 	add.w	r2, r8, #1
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	d10c      	bne.n	800b396 <_printf_float+0x412>
 800b37c:	e65d      	b.n	800b03a <_printf_float+0xb6>
 800b37e:	2301      	movs	r3, #1
 800b380:	465a      	mov	r2, fp
 800b382:	4631      	mov	r1, r6
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	f43f ae56 	beq.w	800b03a <_printf_float+0xb6>
 800b38e:	f108 0801 	add.w	r8, r8, #1
 800b392:	45d0      	cmp	r8, sl
 800b394:	dbf3      	blt.n	800b37e <_printf_float+0x3fa>
 800b396:	464b      	mov	r3, r9
 800b398:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b39c:	e6df      	b.n	800b15e <_printf_float+0x1da>
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	f104 0b1a 	add.w	fp, r4, #26
 800b3a6:	e7f4      	b.n	800b392 <_printf_float+0x40e>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	4642      	mov	r2, r8
 800b3ac:	e7e1      	b.n	800b372 <_printf_float+0x3ee>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	464a      	mov	r2, r9
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b8      	blx	r7
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	f43f ae3e 	beq.w	800b03a <_printf_float+0xb6>
 800b3be:	f108 0801 	add.w	r8, r8, #1
 800b3c2:	68e3      	ldr	r3, [r4, #12]
 800b3c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3c6:	1a5b      	subs	r3, r3, r1
 800b3c8:	4543      	cmp	r3, r8
 800b3ca:	dcf0      	bgt.n	800b3ae <_printf_float+0x42a>
 800b3cc:	e6fc      	b.n	800b1c8 <_printf_float+0x244>
 800b3ce:	f04f 0800 	mov.w	r8, #0
 800b3d2:	f104 0919 	add.w	r9, r4, #25
 800b3d6:	e7f4      	b.n	800b3c2 <_printf_float+0x43e>

0800b3d8 <_printf_common>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	4616      	mov	r6, r2
 800b3de:	4698      	mov	r8, r3
 800b3e0:	688a      	ldr	r2, [r1, #8]
 800b3e2:	690b      	ldr	r3, [r1, #16]
 800b3e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	bfb8      	it	lt
 800b3ec:	4613      	movlt	r3, r2
 800b3ee:	6033      	str	r3, [r6, #0]
 800b3f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3f4:	4607      	mov	r7, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	b10a      	cbz	r2, 800b3fe <_printf_common+0x26>
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	0699      	lsls	r1, r3, #26
 800b402:	bf42      	ittt	mi
 800b404:	6833      	ldrmi	r3, [r6, #0]
 800b406:	3302      	addmi	r3, #2
 800b408:	6033      	strmi	r3, [r6, #0]
 800b40a:	6825      	ldr	r5, [r4, #0]
 800b40c:	f015 0506 	ands.w	r5, r5, #6
 800b410:	d106      	bne.n	800b420 <_printf_common+0x48>
 800b412:	f104 0a19 	add.w	sl, r4, #25
 800b416:	68e3      	ldr	r3, [r4, #12]
 800b418:	6832      	ldr	r2, [r6, #0]
 800b41a:	1a9b      	subs	r3, r3, r2
 800b41c:	42ab      	cmp	r3, r5
 800b41e:	dc26      	bgt.n	800b46e <_printf_common+0x96>
 800b420:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b424:	6822      	ldr	r2, [r4, #0]
 800b426:	3b00      	subs	r3, #0
 800b428:	bf18      	it	ne
 800b42a:	2301      	movne	r3, #1
 800b42c:	0692      	lsls	r2, r2, #26
 800b42e:	d42b      	bmi.n	800b488 <_printf_common+0xb0>
 800b430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b434:	4641      	mov	r1, r8
 800b436:	4638      	mov	r0, r7
 800b438:	47c8      	blx	r9
 800b43a:	3001      	adds	r0, #1
 800b43c:	d01e      	beq.n	800b47c <_printf_common+0xa4>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	6922      	ldr	r2, [r4, #16]
 800b442:	f003 0306 	and.w	r3, r3, #6
 800b446:	2b04      	cmp	r3, #4
 800b448:	bf02      	ittt	eq
 800b44a:	68e5      	ldreq	r5, [r4, #12]
 800b44c:	6833      	ldreq	r3, [r6, #0]
 800b44e:	1aed      	subeq	r5, r5, r3
 800b450:	68a3      	ldr	r3, [r4, #8]
 800b452:	bf0c      	ite	eq
 800b454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b458:	2500      	movne	r5, #0
 800b45a:	4293      	cmp	r3, r2
 800b45c:	bfc4      	itt	gt
 800b45e:	1a9b      	subgt	r3, r3, r2
 800b460:	18ed      	addgt	r5, r5, r3
 800b462:	2600      	movs	r6, #0
 800b464:	341a      	adds	r4, #26
 800b466:	42b5      	cmp	r5, r6
 800b468:	d11a      	bne.n	800b4a0 <_printf_common+0xc8>
 800b46a:	2000      	movs	r0, #0
 800b46c:	e008      	b.n	800b480 <_printf_common+0xa8>
 800b46e:	2301      	movs	r3, #1
 800b470:	4652      	mov	r2, sl
 800b472:	4641      	mov	r1, r8
 800b474:	4638      	mov	r0, r7
 800b476:	47c8      	blx	r9
 800b478:	3001      	adds	r0, #1
 800b47a:	d103      	bne.n	800b484 <_printf_common+0xac>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b484:	3501      	adds	r5, #1
 800b486:	e7c6      	b.n	800b416 <_printf_common+0x3e>
 800b488:	18e1      	adds	r1, r4, r3
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	2030      	movs	r0, #48	@ 0x30
 800b48e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b492:	4422      	add	r2, r4
 800b494:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b498:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b49c:	3302      	adds	r3, #2
 800b49e:	e7c7      	b.n	800b430 <_printf_common+0x58>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	47c8      	blx	r9
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d0e6      	beq.n	800b47c <_printf_common+0xa4>
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	e7d9      	b.n	800b466 <_printf_common+0x8e>
	...

0800b4b4 <_printf_i>:
 800b4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b8:	7e0f      	ldrb	r7, [r1, #24]
 800b4ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4bc:	2f78      	cmp	r7, #120	@ 0x78
 800b4be:	4691      	mov	r9, r2
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	469a      	mov	sl, r3
 800b4c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4ca:	d807      	bhi.n	800b4dc <_printf_i+0x28>
 800b4cc:	2f62      	cmp	r7, #98	@ 0x62
 800b4ce:	d80a      	bhi.n	800b4e6 <_printf_i+0x32>
 800b4d0:	2f00      	cmp	r7, #0
 800b4d2:	f000 80d2 	beq.w	800b67a <_printf_i+0x1c6>
 800b4d6:	2f58      	cmp	r7, #88	@ 0x58
 800b4d8:	f000 80b9 	beq.w	800b64e <_printf_i+0x19a>
 800b4dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4e4:	e03a      	b.n	800b55c <_printf_i+0xa8>
 800b4e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4ea:	2b15      	cmp	r3, #21
 800b4ec:	d8f6      	bhi.n	800b4dc <_printf_i+0x28>
 800b4ee:	a101      	add	r1, pc, #4	@ (adr r1, 800b4f4 <_printf_i+0x40>)
 800b4f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4f4:	0800b54d 	.word	0x0800b54d
 800b4f8:	0800b561 	.word	0x0800b561
 800b4fc:	0800b4dd 	.word	0x0800b4dd
 800b500:	0800b4dd 	.word	0x0800b4dd
 800b504:	0800b4dd 	.word	0x0800b4dd
 800b508:	0800b4dd 	.word	0x0800b4dd
 800b50c:	0800b561 	.word	0x0800b561
 800b510:	0800b4dd 	.word	0x0800b4dd
 800b514:	0800b4dd 	.word	0x0800b4dd
 800b518:	0800b4dd 	.word	0x0800b4dd
 800b51c:	0800b4dd 	.word	0x0800b4dd
 800b520:	0800b661 	.word	0x0800b661
 800b524:	0800b58b 	.word	0x0800b58b
 800b528:	0800b61b 	.word	0x0800b61b
 800b52c:	0800b4dd 	.word	0x0800b4dd
 800b530:	0800b4dd 	.word	0x0800b4dd
 800b534:	0800b683 	.word	0x0800b683
 800b538:	0800b4dd 	.word	0x0800b4dd
 800b53c:	0800b58b 	.word	0x0800b58b
 800b540:	0800b4dd 	.word	0x0800b4dd
 800b544:	0800b4dd 	.word	0x0800b4dd
 800b548:	0800b623 	.word	0x0800b623
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6032      	str	r2, [r6, #0]
 800b554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b558:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b55c:	2301      	movs	r3, #1
 800b55e:	e09d      	b.n	800b69c <_printf_i+0x1e8>
 800b560:	6833      	ldr	r3, [r6, #0]
 800b562:	6820      	ldr	r0, [r4, #0]
 800b564:	1d19      	adds	r1, r3, #4
 800b566:	6031      	str	r1, [r6, #0]
 800b568:	0606      	lsls	r6, r0, #24
 800b56a:	d501      	bpl.n	800b570 <_printf_i+0xbc>
 800b56c:	681d      	ldr	r5, [r3, #0]
 800b56e:	e003      	b.n	800b578 <_printf_i+0xc4>
 800b570:	0645      	lsls	r5, r0, #25
 800b572:	d5fb      	bpl.n	800b56c <_printf_i+0xb8>
 800b574:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b578:	2d00      	cmp	r5, #0
 800b57a:	da03      	bge.n	800b584 <_printf_i+0xd0>
 800b57c:	232d      	movs	r3, #45	@ 0x2d
 800b57e:	426d      	negs	r5, r5
 800b580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b584:	4859      	ldr	r0, [pc, #356]	@ (800b6ec <_printf_i+0x238>)
 800b586:	230a      	movs	r3, #10
 800b588:	e011      	b.n	800b5ae <_printf_i+0xfa>
 800b58a:	6821      	ldr	r1, [r4, #0]
 800b58c:	6833      	ldr	r3, [r6, #0]
 800b58e:	0608      	lsls	r0, r1, #24
 800b590:	f853 5b04 	ldr.w	r5, [r3], #4
 800b594:	d402      	bmi.n	800b59c <_printf_i+0xe8>
 800b596:	0649      	lsls	r1, r1, #25
 800b598:	bf48      	it	mi
 800b59a:	b2ad      	uxthmi	r5, r5
 800b59c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b59e:	4853      	ldr	r0, [pc, #332]	@ (800b6ec <_printf_i+0x238>)
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	bf14      	ite	ne
 800b5a4:	230a      	movne	r3, #10
 800b5a6:	2308      	moveq	r3, #8
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5ae:	6866      	ldr	r6, [r4, #4]
 800b5b0:	60a6      	str	r6, [r4, #8]
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	bfa2      	ittt	ge
 800b5b6:	6821      	ldrge	r1, [r4, #0]
 800b5b8:	f021 0104 	bicge.w	r1, r1, #4
 800b5bc:	6021      	strge	r1, [r4, #0]
 800b5be:	b90d      	cbnz	r5, 800b5c4 <_printf_i+0x110>
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	d04b      	beq.n	800b65c <_printf_i+0x1a8>
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b5ce:	5dc7      	ldrb	r7, [r0, r7]
 800b5d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5d4:	462f      	mov	r7, r5
 800b5d6:	42bb      	cmp	r3, r7
 800b5d8:	460d      	mov	r5, r1
 800b5da:	d9f4      	bls.n	800b5c6 <_printf_i+0x112>
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d10b      	bne.n	800b5f8 <_printf_i+0x144>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	07df      	lsls	r7, r3, #31
 800b5e4:	d508      	bpl.n	800b5f8 <_printf_i+0x144>
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	6861      	ldr	r1, [r4, #4]
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	bfde      	ittt	le
 800b5ee:	2330      	movle	r3, #48	@ 0x30
 800b5f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5f8:	1b92      	subs	r2, r2, r6
 800b5fa:	6122      	str	r2, [r4, #16]
 800b5fc:	f8cd a000 	str.w	sl, [sp]
 800b600:	464b      	mov	r3, r9
 800b602:	aa03      	add	r2, sp, #12
 800b604:	4621      	mov	r1, r4
 800b606:	4640      	mov	r0, r8
 800b608:	f7ff fee6 	bl	800b3d8 <_printf_common>
 800b60c:	3001      	adds	r0, #1
 800b60e:	d14a      	bne.n	800b6a6 <_printf_i+0x1f2>
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	b004      	add	sp, #16
 800b616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	f043 0320 	orr.w	r3, r3, #32
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	4833      	ldr	r0, [pc, #204]	@ (800b6f0 <_printf_i+0x23c>)
 800b624:	2778      	movs	r7, #120	@ 0x78
 800b626:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	6831      	ldr	r1, [r6, #0]
 800b62e:	061f      	lsls	r7, r3, #24
 800b630:	f851 5b04 	ldr.w	r5, [r1], #4
 800b634:	d402      	bmi.n	800b63c <_printf_i+0x188>
 800b636:	065f      	lsls	r7, r3, #25
 800b638:	bf48      	it	mi
 800b63a:	b2ad      	uxthmi	r5, r5
 800b63c:	6031      	str	r1, [r6, #0]
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	bf44      	itt	mi
 800b642:	f043 0320 	orrmi.w	r3, r3, #32
 800b646:	6023      	strmi	r3, [r4, #0]
 800b648:	b11d      	cbz	r5, 800b652 <_printf_i+0x19e>
 800b64a:	2310      	movs	r3, #16
 800b64c:	e7ac      	b.n	800b5a8 <_printf_i+0xf4>
 800b64e:	4827      	ldr	r0, [pc, #156]	@ (800b6ec <_printf_i+0x238>)
 800b650:	e7e9      	b.n	800b626 <_printf_i+0x172>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	f023 0320 	bic.w	r3, r3, #32
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	e7f6      	b.n	800b64a <_printf_i+0x196>
 800b65c:	4616      	mov	r6, r2
 800b65e:	e7bd      	b.n	800b5dc <_printf_i+0x128>
 800b660:	6833      	ldr	r3, [r6, #0]
 800b662:	6825      	ldr	r5, [r4, #0]
 800b664:	6961      	ldr	r1, [r4, #20]
 800b666:	1d18      	adds	r0, r3, #4
 800b668:	6030      	str	r0, [r6, #0]
 800b66a:	062e      	lsls	r6, r5, #24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	d501      	bpl.n	800b674 <_printf_i+0x1c0>
 800b670:	6019      	str	r1, [r3, #0]
 800b672:	e002      	b.n	800b67a <_printf_i+0x1c6>
 800b674:	0668      	lsls	r0, r5, #25
 800b676:	d5fb      	bpl.n	800b670 <_printf_i+0x1bc>
 800b678:	8019      	strh	r1, [r3, #0]
 800b67a:	2300      	movs	r3, #0
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	4616      	mov	r6, r2
 800b680:	e7bc      	b.n	800b5fc <_printf_i+0x148>
 800b682:	6833      	ldr	r3, [r6, #0]
 800b684:	1d1a      	adds	r2, r3, #4
 800b686:	6032      	str	r2, [r6, #0]
 800b688:	681e      	ldr	r6, [r3, #0]
 800b68a:	6862      	ldr	r2, [r4, #4]
 800b68c:	2100      	movs	r1, #0
 800b68e:	4630      	mov	r0, r6
 800b690:	f7f4 fdb6 	bl	8000200 <memchr>
 800b694:	b108      	cbz	r0, 800b69a <_printf_i+0x1e6>
 800b696:	1b80      	subs	r0, r0, r6
 800b698:	6060      	str	r0, [r4, #4]
 800b69a:	6863      	ldr	r3, [r4, #4]
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6a4:	e7aa      	b.n	800b5fc <_printf_i+0x148>
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	47d0      	blx	sl
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d0ad      	beq.n	800b610 <_printf_i+0x15c>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	079b      	lsls	r3, r3, #30
 800b6b8:	d413      	bmi.n	800b6e2 <_printf_i+0x22e>
 800b6ba:	68e0      	ldr	r0, [r4, #12]
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	4298      	cmp	r0, r3
 800b6c0:	bfb8      	it	lt
 800b6c2:	4618      	movlt	r0, r3
 800b6c4:	e7a6      	b.n	800b614 <_printf_i+0x160>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4632      	mov	r2, r6
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d09d      	beq.n	800b610 <_printf_i+0x15c>
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	68e3      	ldr	r3, [r4, #12]
 800b6d8:	9903      	ldr	r1, [sp, #12]
 800b6da:	1a5b      	subs	r3, r3, r1
 800b6dc:	42ab      	cmp	r3, r5
 800b6de:	dcf2      	bgt.n	800b6c6 <_printf_i+0x212>
 800b6e0:	e7eb      	b.n	800b6ba <_printf_i+0x206>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	f104 0619 	add.w	r6, r4, #25
 800b6e8:	e7f5      	b.n	800b6d6 <_printf_i+0x222>
 800b6ea:	bf00      	nop
 800b6ec:	0800df5a 	.word	0x0800df5a
 800b6f0:	0800df6b 	.word	0x0800df6b

0800b6f4 <std>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b702:	6083      	str	r3, [r0, #8]
 800b704:	8181      	strh	r1, [r0, #12]
 800b706:	6643      	str	r3, [r0, #100]	@ 0x64
 800b708:	81c2      	strh	r2, [r0, #14]
 800b70a:	6183      	str	r3, [r0, #24]
 800b70c:	4619      	mov	r1, r3
 800b70e:	2208      	movs	r2, #8
 800b710:	305c      	adds	r0, #92	@ 0x5c
 800b712:	f000 f9f9 	bl	800bb08 <memset>
 800b716:	4b0d      	ldr	r3, [pc, #52]	@ (800b74c <std+0x58>)
 800b718:	6263      	str	r3, [r4, #36]	@ 0x24
 800b71a:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <std+0x5c>)
 800b71c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b71e:	4b0d      	ldr	r3, [pc, #52]	@ (800b754 <std+0x60>)
 800b720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b722:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <std+0x64>)
 800b724:	6323      	str	r3, [r4, #48]	@ 0x30
 800b726:	4b0d      	ldr	r3, [pc, #52]	@ (800b75c <std+0x68>)
 800b728:	6224      	str	r4, [r4, #32]
 800b72a:	429c      	cmp	r4, r3
 800b72c:	d006      	beq.n	800b73c <std+0x48>
 800b72e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b732:	4294      	cmp	r4, r2
 800b734:	d002      	beq.n	800b73c <std+0x48>
 800b736:	33d0      	adds	r3, #208	@ 0xd0
 800b738:	429c      	cmp	r4, r3
 800b73a:	d105      	bne.n	800b748 <std+0x54>
 800b73c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b744:	f000 ba5c 	b.w	800bc00 <__retarget_lock_init_recursive>
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	bf00      	nop
 800b74c:	0800b959 	.word	0x0800b959
 800b750:	0800b97b 	.word	0x0800b97b
 800b754:	0800b9b3 	.word	0x0800b9b3
 800b758:	0800b9d7 	.word	0x0800b9d7
 800b75c:	20000988 	.word	0x20000988

0800b760 <stdio_exit_handler>:
 800b760:	4a02      	ldr	r2, [pc, #8]	@ (800b76c <stdio_exit_handler+0xc>)
 800b762:	4903      	ldr	r1, [pc, #12]	@ (800b770 <stdio_exit_handler+0x10>)
 800b764:	4803      	ldr	r0, [pc, #12]	@ (800b774 <stdio_exit_handler+0x14>)
 800b766:	f000 b869 	b.w	800b83c <_fwalk_sglue>
 800b76a:	bf00      	nop
 800b76c:	20000074 	.word	0x20000074
 800b770:	0800d531 	.word	0x0800d531
 800b774:	20000084 	.word	0x20000084

0800b778 <cleanup_stdio>:
 800b778:	6841      	ldr	r1, [r0, #4]
 800b77a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7ac <cleanup_stdio+0x34>)
 800b77c:	4299      	cmp	r1, r3
 800b77e:	b510      	push	{r4, lr}
 800b780:	4604      	mov	r4, r0
 800b782:	d001      	beq.n	800b788 <cleanup_stdio+0x10>
 800b784:	f001 fed4 	bl	800d530 <_fflush_r>
 800b788:	68a1      	ldr	r1, [r4, #8]
 800b78a:	4b09      	ldr	r3, [pc, #36]	@ (800b7b0 <cleanup_stdio+0x38>)
 800b78c:	4299      	cmp	r1, r3
 800b78e:	d002      	beq.n	800b796 <cleanup_stdio+0x1e>
 800b790:	4620      	mov	r0, r4
 800b792:	f001 fecd 	bl	800d530 <_fflush_r>
 800b796:	68e1      	ldr	r1, [r4, #12]
 800b798:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <cleanup_stdio+0x3c>)
 800b79a:	4299      	cmp	r1, r3
 800b79c:	d004      	beq.n	800b7a8 <cleanup_stdio+0x30>
 800b79e:	4620      	mov	r0, r4
 800b7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a4:	f001 bec4 	b.w	800d530 <_fflush_r>
 800b7a8:	bd10      	pop	{r4, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000988 	.word	0x20000988
 800b7b0:	200009f0 	.word	0x200009f0
 800b7b4:	20000a58 	.word	0x20000a58

0800b7b8 <global_stdio_init.part.0>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e8 <global_stdio_init.part.0+0x30>)
 800b7bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b7ec <global_stdio_init.part.0+0x34>)
 800b7be:	4a0c      	ldr	r2, [pc, #48]	@ (800b7f0 <global_stdio_init.part.0+0x38>)
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2104      	movs	r1, #4
 800b7c8:	f7ff ff94 	bl	800b6f4 <std>
 800b7cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	2109      	movs	r1, #9
 800b7d4:	f7ff ff8e 	bl	800b6f4 <std>
 800b7d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7dc:	2202      	movs	r2, #2
 800b7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e2:	2112      	movs	r1, #18
 800b7e4:	f7ff bf86 	b.w	800b6f4 <std>
 800b7e8:	20000ac0 	.word	0x20000ac0
 800b7ec:	20000988 	.word	0x20000988
 800b7f0:	0800b761 	.word	0x0800b761

0800b7f4 <__sfp_lock_acquire>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	@ (800b7fc <__sfp_lock_acquire+0x8>)
 800b7f6:	f000 ba04 	b.w	800bc02 <__retarget_lock_acquire_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20000ac9 	.word	0x20000ac9

0800b800 <__sfp_lock_release>:
 800b800:	4801      	ldr	r0, [pc, #4]	@ (800b808 <__sfp_lock_release+0x8>)
 800b802:	f000 b9ff 	b.w	800bc04 <__retarget_lock_release_recursive>
 800b806:	bf00      	nop
 800b808:	20000ac9 	.word	0x20000ac9

0800b80c <__sinit>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	4604      	mov	r4, r0
 800b810:	f7ff fff0 	bl	800b7f4 <__sfp_lock_acquire>
 800b814:	6a23      	ldr	r3, [r4, #32]
 800b816:	b11b      	cbz	r3, 800b820 <__sinit+0x14>
 800b818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b81c:	f7ff bff0 	b.w	800b800 <__sfp_lock_release>
 800b820:	4b04      	ldr	r3, [pc, #16]	@ (800b834 <__sinit+0x28>)
 800b822:	6223      	str	r3, [r4, #32]
 800b824:	4b04      	ldr	r3, [pc, #16]	@ (800b838 <__sinit+0x2c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1f5      	bne.n	800b818 <__sinit+0xc>
 800b82c:	f7ff ffc4 	bl	800b7b8 <global_stdio_init.part.0>
 800b830:	e7f2      	b.n	800b818 <__sinit+0xc>
 800b832:	bf00      	nop
 800b834:	0800b779 	.word	0x0800b779
 800b838:	20000ac0 	.word	0x20000ac0

0800b83c <_fwalk_sglue>:
 800b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b840:	4607      	mov	r7, r0
 800b842:	4688      	mov	r8, r1
 800b844:	4614      	mov	r4, r2
 800b846:	2600      	movs	r6, #0
 800b848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b84c:	f1b9 0901 	subs.w	r9, r9, #1
 800b850:	d505      	bpl.n	800b85e <_fwalk_sglue+0x22>
 800b852:	6824      	ldr	r4, [r4, #0]
 800b854:	2c00      	cmp	r4, #0
 800b856:	d1f7      	bne.n	800b848 <_fwalk_sglue+0xc>
 800b858:	4630      	mov	r0, r6
 800b85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d907      	bls.n	800b874 <_fwalk_sglue+0x38>
 800b864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b868:	3301      	adds	r3, #1
 800b86a:	d003      	beq.n	800b874 <_fwalk_sglue+0x38>
 800b86c:	4629      	mov	r1, r5
 800b86e:	4638      	mov	r0, r7
 800b870:	47c0      	blx	r8
 800b872:	4306      	orrs	r6, r0
 800b874:	3568      	adds	r5, #104	@ 0x68
 800b876:	e7e9      	b.n	800b84c <_fwalk_sglue+0x10>

0800b878 <iprintf>:
 800b878:	b40f      	push	{r0, r1, r2, r3}
 800b87a:	b507      	push	{r0, r1, r2, lr}
 800b87c:	4906      	ldr	r1, [pc, #24]	@ (800b898 <iprintf+0x20>)
 800b87e:	ab04      	add	r3, sp, #16
 800b880:	6808      	ldr	r0, [r1, #0]
 800b882:	f853 2b04 	ldr.w	r2, [r3], #4
 800b886:	6881      	ldr	r1, [r0, #8]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f001 fcb5 	bl	800d1f8 <_vfiprintf_r>
 800b88e:	b003      	add	sp, #12
 800b890:	f85d eb04 	ldr.w	lr, [sp], #4
 800b894:	b004      	add	sp, #16
 800b896:	4770      	bx	lr
 800b898:	20000080 	.word	0x20000080

0800b89c <_puts_r>:
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b570      	push	{r4, r5, r6, lr}
 800b8a0:	6884      	ldr	r4, [r0, #8]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	b90b      	cbnz	r3, 800b8ac <_puts_r+0x10>
 800b8a8:	f7ff ffb0 	bl	800b80c <__sinit>
 800b8ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8ae:	07db      	lsls	r3, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_puts_r+0x22>
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	0598      	lsls	r0, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_puts_r+0x22>
 800b8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ba:	f000 f9a2 	bl	800bc02 <__retarget_lock_acquire_recursive>
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	0719      	lsls	r1, r3, #28
 800b8c2:	d502      	bpl.n	800b8ca <_puts_r+0x2e>
 800b8c4:	6923      	ldr	r3, [r4, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d135      	bne.n	800b936 <_puts_r+0x9a>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f000 f8c5 	bl	800ba5c <__swsetup_r>
 800b8d2:	b380      	cbz	r0, 800b936 <_puts_r+0x9a>
 800b8d4:	f04f 35ff 	mov.w	r5, #4294967295
 800b8d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8da:	07da      	lsls	r2, r3, #31
 800b8dc:	d405      	bmi.n	800b8ea <_puts_r+0x4e>
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	059b      	lsls	r3, r3, #22
 800b8e2:	d402      	bmi.n	800b8ea <_puts_r+0x4e>
 800b8e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8e6:	f000 f98d 	bl	800bc04 <__retarget_lock_release_recursive>
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	bd70      	pop	{r4, r5, r6, pc}
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	da04      	bge.n	800b8fc <_puts_r+0x60>
 800b8f2:	69a2      	ldr	r2, [r4, #24]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	dc17      	bgt.n	800b928 <_puts_r+0x8c>
 800b8f8:	290a      	cmp	r1, #10
 800b8fa:	d015      	beq.n	800b928 <_puts_r+0x8c>
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	6022      	str	r2, [r4, #0]
 800b902:	7019      	strb	r1, [r3, #0]
 800b904:	68a3      	ldr	r3, [r4, #8]
 800b906:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b90a:	3b01      	subs	r3, #1
 800b90c:	60a3      	str	r3, [r4, #8]
 800b90e:	2900      	cmp	r1, #0
 800b910:	d1ed      	bne.n	800b8ee <_puts_r+0x52>
 800b912:	2b00      	cmp	r3, #0
 800b914:	da11      	bge.n	800b93a <_puts_r+0x9e>
 800b916:	4622      	mov	r2, r4
 800b918:	210a      	movs	r1, #10
 800b91a:	4628      	mov	r0, r5
 800b91c:	f000 f85f 	bl	800b9de <__swbuf_r>
 800b920:	3001      	adds	r0, #1
 800b922:	d0d7      	beq.n	800b8d4 <_puts_r+0x38>
 800b924:	250a      	movs	r5, #10
 800b926:	e7d7      	b.n	800b8d8 <_puts_r+0x3c>
 800b928:	4622      	mov	r2, r4
 800b92a:	4628      	mov	r0, r5
 800b92c:	f000 f857 	bl	800b9de <__swbuf_r>
 800b930:	3001      	adds	r0, #1
 800b932:	d1e7      	bne.n	800b904 <_puts_r+0x68>
 800b934:	e7ce      	b.n	800b8d4 <_puts_r+0x38>
 800b936:	3e01      	subs	r6, #1
 800b938:	e7e4      	b.n	800b904 <_puts_r+0x68>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	1c5a      	adds	r2, r3, #1
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	220a      	movs	r2, #10
 800b942:	701a      	strb	r2, [r3, #0]
 800b944:	e7ee      	b.n	800b924 <_puts_r+0x88>
	...

0800b948 <puts>:
 800b948:	4b02      	ldr	r3, [pc, #8]	@ (800b954 <puts+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f7ff bfa5 	b.w	800b89c <_puts_r>
 800b952:	bf00      	nop
 800b954:	20000080 	.word	0x20000080

0800b958 <__sread>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	460c      	mov	r4, r1
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	f000 f900 	bl	800bb64 <_read_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	bfab      	itete	ge
 800b968:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b96a:	89a3      	ldrhlt	r3, [r4, #12]
 800b96c:	181b      	addge	r3, r3, r0
 800b96e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b972:	bfac      	ite	ge
 800b974:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b976:	81a3      	strhlt	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__swrite>:
 800b97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97e:	461f      	mov	r7, r3
 800b980:	898b      	ldrh	r3, [r1, #12]
 800b982:	05db      	lsls	r3, r3, #23
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4616      	mov	r6, r2
 800b98a:	d505      	bpl.n	800b998 <__swrite+0x1e>
 800b98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b990:	2302      	movs	r3, #2
 800b992:	2200      	movs	r2, #0
 800b994:	f000 f8d4 	bl	800bb40 <_lseek_r>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b99e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ae:	f000 b8eb 	b.w	800bb88 <_write_r>

0800b9b2 <__sseek>:
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ba:	f000 f8c1 	bl	800bb40 <_lseek_r>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	bf15      	itete	ne
 800b9c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9ce:	81a3      	strheq	r3, [r4, #12]
 800b9d0:	bf18      	it	ne
 800b9d2:	81a3      	strhne	r3, [r4, #12]
 800b9d4:	bd10      	pop	{r4, pc}

0800b9d6 <__sclose>:
 800b9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9da:	f000 b8a1 	b.w	800bb20 <_close_r>

0800b9de <__swbuf_r>:
 800b9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e0:	460e      	mov	r6, r1
 800b9e2:	4614      	mov	r4, r2
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	b118      	cbz	r0, 800b9f0 <__swbuf_r+0x12>
 800b9e8:	6a03      	ldr	r3, [r0, #32]
 800b9ea:	b90b      	cbnz	r3, 800b9f0 <__swbuf_r+0x12>
 800b9ec:	f7ff ff0e 	bl	800b80c <__sinit>
 800b9f0:	69a3      	ldr	r3, [r4, #24]
 800b9f2:	60a3      	str	r3, [r4, #8]
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	071a      	lsls	r2, r3, #28
 800b9f8:	d501      	bpl.n	800b9fe <__swbuf_r+0x20>
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	b943      	cbnz	r3, 800ba10 <__swbuf_r+0x32>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f000 f82b 	bl	800ba5c <__swsetup_r>
 800ba06:	b118      	cbz	r0, 800ba10 <__swbuf_r+0x32>
 800ba08:	f04f 37ff 	mov.w	r7, #4294967295
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	6922      	ldr	r2, [r4, #16]
 800ba14:	1a98      	subs	r0, r3, r2
 800ba16:	6963      	ldr	r3, [r4, #20]
 800ba18:	b2f6      	uxtb	r6, r6
 800ba1a:	4283      	cmp	r3, r0
 800ba1c:	4637      	mov	r7, r6
 800ba1e:	dc05      	bgt.n	800ba2c <__swbuf_r+0x4e>
 800ba20:	4621      	mov	r1, r4
 800ba22:	4628      	mov	r0, r5
 800ba24:	f001 fd84 	bl	800d530 <_fflush_r>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d1ed      	bne.n	800ba08 <__swbuf_r+0x2a>
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	6022      	str	r2, [r4, #0]
 800ba38:	701e      	strb	r6, [r3, #0]
 800ba3a:	6962      	ldr	r2, [r4, #20]
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d004      	beq.n	800ba4c <__swbuf_r+0x6e>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	07db      	lsls	r3, r3, #31
 800ba46:	d5e1      	bpl.n	800ba0c <__swbuf_r+0x2e>
 800ba48:	2e0a      	cmp	r6, #10
 800ba4a:	d1df      	bne.n	800ba0c <__swbuf_r+0x2e>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f001 fd6e 	bl	800d530 <_fflush_r>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d0d9      	beq.n	800ba0c <__swbuf_r+0x2e>
 800ba58:	e7d6      	b.n	800ba08 <__swbuf_r+0x2a>
	...

0800ba5c <__swsetup_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4b29      	ldr	r3, [pc, #164]	@ (800bb04 <__swsetup_r+0xa8>)
 800ba60:	4605      	mov	r5, r0
 800ba62:	6818      	ldr	r0, [r3, #0]
 800ba64:	460c      	mov	r4, r1
 800ba66:	b118      	cbz	r0, 800ba70 <__swsetup_r+0x14>
 800ba68:	6a03      	ldr	r3, [r0, #32]
 800ba6a:	b90b      	cbnz	r3, 800ba70 <__swsetup_r+0x14>
 800ba6c:	f7ff fece 	bl	800b80c <__sinit>
 800ba70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba74:	0719      	lsls	r1, r3, #28
 800ba76:	d422      	bmi.n	800babe <__swsetup_r+0x62>
 800ba78:	06da      	lsls	r2, r3, #27
 800ba7a:	d407      	bmi.n	800ba8c <__swsetup_r+0x30>
 800ba7c:	2209      	movs	r2, #9
 800ba7e:	602a      	str	r2, [r5, #0]
 800ba80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	e033      	b.n	800baf4 <__swsetup_r+0x98>
 800ba8c:	0758      	lsls	r0, r3, #29
 800ba8e:	d512      	bpl.n	800bab6 <__swsetup_r+0x5a>
 800ba90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba92:	b141      	cbz	r1, 800baa6 <__swsetup_r+0x4a>
 800ba94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba98:	4299      	cmp	r1, r3
 800ba9a:	d002      	beq.n	800baa2 <__swsetup_r+0x46>
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 feff 	bl	800c8a0 <_free_r>
 800baa2:	2300      	movs	r3, #0
 800baa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800baac:	81a3      	strh	r3, [r4, #12]
 800baae:	2300      	movs	r3, #0
 800bab0:	6063      	str	r3, [r4, #4]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f043 0308 	orr.w	r3, r3, #8
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	6923      	ldr	r3, [r4, #16]
 800bac0:	b94b      	cbnz	r3, 800bad6 <__swsetup_r+0x7a>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bacc:	d003      	beq.n	800bad6 <__swsetup_r+0x7a>
 800bace:	4621      	mov	r1, r4
 800bad0:	4628      	mov	r0, r5
 800bad2:	f001 fd7b 	bl	800d5cc <__smakebuf_r>
 800bad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bada:	f013 0201 	ands.w	r2, r3, #1
 800bade:	d00a      	beq.n	800baf6 <__swsetup_r+0x9a>
 800bae0:	2200      	movs	r2, #0
 800bae2:	60a2      	str	r2, [r4, #8]
 800bae4:	6962      	ldr	r2, [r4, #20]
 800bae6:	4252      	negs	r2, r2
 800bae8:	61a2      	str	r2, [r4, #24]
 800baea:	6922      	ldr	r2, [r4, #16]
 800baec:	b942      	cbnz	r2, 800bb00 <__swsetup_r+0xa4>
 800baee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800baf2:	d1c5      	bne.n	800ba80 <__swsetup_r+0x24>
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	0799      	lsls	r1, r3, #30
 800baf8:	bf58      	it	pl
 800bafa:	6962      	ldrpl	r2, [r4, #20]
 800bafc:	60a2      	str	r2, [r4, #8]
 800bafe:	e7f4      	b.n	800baea <__swsetup_r+0x8e>
 800bb00:	2000      	movs	r0, #0
 800bb02:	e7f7      	b.n	800baf4 <__swsetup_r+0x98>
 800bb04:	20000080 	.word	0x20000080

0800bb08 <memset>:
 800bb08:	4402      	add	r2, r0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d100      	bne.n	800bb12 <memset+0xa>
 800bb10:	4770      	bx	lr
 800bb12:	f803 1b01 	strb.w	r1, [r3], #1
 800bb16:	e7f9      	b.n	800bb0c <memset+0x4>

0800bb18 <_localeconv_r>:
 800bb18:	4800      	ldr	r0, [pc, #0]	@ (800bb1c <_localeconv_r+0x4>)
 800bb1a:	4770      	bx	lr
 800bb1c:	200001c0 	.word	0x200001c0

0800bb20 <_close_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d06      	ldr	r5, [pc, #24]	@ (800bb3c <_close_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7f7 fc6b 	bl	8003406 <_close>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_close_r+0x1a>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_close_r+0x1a>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20000ac4 	.word	0x20000ac4

0800bb40 <_lseek_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	4d07      	ldr	r5, [pc, #28]	@ (800bb60 <_lseek_r+0x20>)
 800bb44:	4604      	mov	r4, r0
 800bb46:	4608      	mov	r0, r1
 800bb48:	4611      	mov	r1, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	602a      	str	r2, [r5, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f7f7 fc80 	bl	8003454 <_lseek>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_lseek_r+0x1e>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_lseek_r+0x1e>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20000ac4 	.word	0x20000ac4

0800bb64 <_read_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4d07      	ldr	r5, [pc, #28]	@ (800bb84 <_read_r+0x20>)
 800bb68:	4604      	mov	r4, r0
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	2200      	movs	r2, #0
 800bb70:	602a      	str	r2, [r5, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f7f7 fc0e 	bl	8003394 <_read>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_read_r+0x1e>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_read_r+0x1e>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	20000ac4 	.word	0x20000ac4

0800bb88 <_write_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	@ (800bba8 <_write_r+0x20>)
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	4611      	mov	r1, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	602a      	str	r2, [r5, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f7f7 fc19 	bl	80033ce <_write>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_write_r+0x1e>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_write_r+0x1e>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20000ac4 	.word	0x20000ac4

0800bbac <__errno>:
 800bbac:	4b01      	ldr	r3, [pc, #4]	@ (800bbb4 <__errno+0x8>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000080 	.word	0x20000080

0800bbb8 <__libc_init_array>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4d0d      	ldr	r5, [pc, #52]	@ (800bbf0 <__libc_init_array+0x38>)
 800bbbc:	4c0d      	ldr	r4, [pc, #52]	@ (800bbf4 <__libc_init_array+0x3c>)
 800bbbe:	1b64      	subs	r4, r4, r5
 800bbc0:	10a4      	asrs	r4, r4, #2
 800bbc2:	2600      	movs	r6, #0
 800bbc4:	42a6      	cmp	r6, r4
 800bbc6:	d109      	bne.n	800bbdc <__libc_init_array+0x24>
 800bbc8:	4d0b      	ldr	r5, [pc, #44]	@ (800bbf8 <__libc_init_array+0x40>)
 800bbca:	4c0c      	ldr	r4, [pc, #48]	@ (800bbfc <__libc_init_array+0x44>)
 800bbcc:	f001 fe2a 	bl	800d824 <_init>
 800bbd0:	1b64      	subs	r4, r4, r5
 800bbd2:	10a4      	asrs	r4, r4, #2
 800bbd4:	2600      	movs	r6, #0
 800bbd6:	42a6      	cmp	r6, r4
 800bbd8:	d105      	bne.n	800bbe6 <__libc_init_array+0x2e>
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe0:	4798      	blx	r3
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__libc_init_array+0xc>
 800bbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbea:	4798      	blx	r3
 800bbec:	3601      	adds	r6, #1
 800bbee:	e7f2      	b.n	800bbd6 <__libc_init_array+0x1e>
 800bbf0:	0800e2c0 	.word	0x0800e2c0
 800bbf4:	0800e2c0 	.word	0x0800e2c0
 800bbf8:	0800e2c0 	.word	0x0800e2c0
 800bbfc:	0800e2c4 	.word	0x0800e2c4

0800bc00 <__retarget_lock_init_recursive>:
 800bc00:	4770      	bx	lr

0800bc02 <__retarget_lock_acquire_recursive>:
 800bc02:	4770      	bx	lr

0800bc04 <__retarget_lock_release_recursive>:
 800bc04:	4770      	bx	lr

0800bc06 <quorem>:
 800bc06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0a:	6903      	ldr	r3, [r0, #16]
 800bc0c:	690c      	ldr	r4, [r1, #16]
 800bc0e:	42a3      	cmp	r3, r4
 800bc10:	4607      	mov	r7, r0
 800bc12:	db7e      	blt.n	800bd12 <quorem+0x10c>
 800bc14:	3c01      	subs	r4, #1
 800bc16:	f101 0814 	add.w	r8, r1, #20
 800bc1a:	00a3      	lsls	r3, r4, #2
 800bc1c:	f100 0514 	add.w	r5, r0, #20
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc30:	3301      	adds	r3, #1
 800bc32:	429a      	cmp	r2, r3
 800bc34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc38:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc3c:	d32e      	bcc.n	800bc9c <quorem+0x96>
 800bc3e:	f04f 0a00 	mov.w	sl, #0
 800bc42:	46c4      	mov	ip, r8
 800bc44:	46ae      	mov	lr, r5
 800bc46:	46d3      	mov	fp, sl
 800bc48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc4c:	b298      	uxth	r0, r3
 800bc4e:	fb06 a000 	mla	r0, r6, r0, sl
 800bc52:	0c02      	lsrs	r2, r0, #16
 800bc54:	0c1b      	lsrs	r3, r3, #16
 800bc56:	fb06 2303 	mla	r3, r6, r3, r2
 800bc5a:	f8de 2000 	ldr.w	r2, [lr]
 800bc5e:	b280      	uxth	r0, r0
 800bc60:	b292      	uxth	r2, r2
 800bc62:	1a12      	subs	r2, r2, r0
 800bc64:	445a      	add	r2, fp
 800bc66:	f8de 0000 	ldr.w	r0, [lr]
 800bc6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc7e:	45e1      	cmp	r9, ip
 800bc80:	f84e 2b04 	str.w	r2, [lr], #4
 800bc84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc88:	d2de      	bcs.n	800bc48 <quorem+0x42>
 800bc8a:	9b00      	ldr	r3, [sp, #0]
 800bc8c:	58eb      	ldr	r3, [r5, r3]
 800bc8e:	b92b      	cbnz	r3, 800bc9c <quorem+0x96>
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	429d      	cmp	r5, r3
 800bc96:	461a      	mov	r2, r3
 800bc98:	d32f      	bcc.n	800bcfa <quorem+0xf4>
 800bc9a:	613c      	str	r4, [r7, #16]
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f001 f979 	bl	800cf94 <__mcmp>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	db25      	blt.n	800bcf2 <quorem+0xec>
 800bca6:	4629      	mov	r1, r5
 800bca8:	2000      	movs	r0, #0
 800bcaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcae:	f8d1 c000 	ldr.w	ip, [r1]
 800bcb2:	fa1f fe82 	uxth.w	lr, r2
 800bcb6:	fa1f f38c 	uxth.w	r3, ip
 800bcba:	eba3 030e 	sub.w	r3, r3, lr
 800bcbe:	4403      	add	r3, r0
 800bcc0:	0c12      	lsrs	r2, r2, #16
 800bcc2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bcc6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd0:	45c1      	cmp	r9, r8
 800bcd2:	f841 3b04 	str.w	r3, [r1], #4
 800bcd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcda:	d2e6      	bcs.n	800bcaa <quorem+0xa4>
 800bcdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bce0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce4:	b922      	cbnz	r2, 800bcf0 <quorem+0xea>
 800bce6:	3b04      	subs	r3, #4
 800bce8:	429d      	cmp	r5, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	d30b      	bcc.n	800bd06 <quorem+0x100>
 800bcee:	613c      	str	r4, [r7, #16]
 800bcf0:	3601      	adds	r6, #1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	b003      	add	sp, #12
 800bcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfa:	6812      	ldr	r2, [r2, #0]
 800bcfc:	3b04      	subs	r3, #4
 800bcfe:	2a00      	cmp	r2, #0
 800bd00:	d1cb      	bne.n	800bc9a <quorem+0x94>
 800bd02:	3c01      	subs	r4, #1
 800bd04:	e7c6      	b.n	800bc94 <quorem+0x8e>
 800bd06:	6812      	ldr	r2, [r2, #0]
 800bd08:	3b04      	subs	r3, #4
 800bd0a:	2a00      	cmp	r2, #0
 800bd0c:	d1ef      	bne.n	800bcee <quorem+0xe8>
 800bd0e:	3c01      	subs	r4, #1
 800bd10:	e7ea      	b.n	800bce8 <quorem+0xe2>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e7ee      	b.n	800bcf4 <quorem+0xee>
	...

0800bd18 <_dtoa_r>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	69c7      	ldr	r7, [r0, #28]
 800bd1e:	b099      	sub	sp, #100	@ 0x64
 800bd20:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd24:	ec55 4b10 	vmov	r4, r5, d0
 800bd28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bd2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd2c:	4683      	mov	fp, r0
 800bd2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd32:	b97f      	cbnz	r7, 800bd54 <_dtoa_r+0x3c>
 800bd34:	2010      	movs	r0, #16
 800bd36:	f000 fdfd 	bl	800c934 <malloc>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd40:	b920      	cbnz	r0, 800bd4c <_dtoa_r+0x34>
 800bd42:	4ba7      	ldr	r3, [pc, #668]	@ (800bfe0 <_dtoa_r+0x2c8>)
 800bd44:	21ef      	movs	r1, #239	@ 0xef
 800bd46:	48a7      	ldr	r0, [pc, #668]	@ (800bfe4 <_dtoa_r+0x2cc>)
 800bd48:	f001 fcbc 	bl	800d6c4 <__assert_func>
 800bd4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd50:	6007      	str	r7, [r0, #0]
 800bd52:	60c7      	str	r7, [r0, #12]
 800bd54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd58:	6819      	ldr	r1, [r3, #0]
 800bd5a:	b159      	cbz	r1, 800bd74 <_dtoa_r+0x5c>
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	604a      	str	r2, [r1, #4]
 800bd60:	2301      	movs	r3, #1
 800bd62:	4093      	lsls	r3, r2
 800bd64:	608b      	str	r3, [r1, #8]
 800bd66:	4658      	mov	r0, fp
 800bd68:	f000 feda 	bl	800cb20 <_Bfree>
 800bd6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	1e2b      	subs	r3, r5, #0
 800bd76:	bfb9      	ittee	lt
 800bd78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd7c:	9303      	strlt	r3, [sp, #12]
 800bd7e:	2300      	movge	r3, #0
 800bd80:	6033      	strge	r3, [r6, #0]
 800bd82:	9f03      	ldr	r7, [sp, #12]
 800bd84:	4b98      	ldr	r3, [pc, #608]	@ (800bfe8 <_dtoa_r+0x2d0>)
 800bd86:	bfbc      	itt	lt
 800bd88:	2201      	movlt	r2, #1
 800bd8a:	6032      	strlt	r2, [r6, #0]
 800bd8c:	43bb      	bics	r3, r7
 800bd8e:	d112      	bne.n	800bdb6 <_dtoa_r+0x9e>
 800bd90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd9c:	4323      	orrs	r3, r4
 800bd9e:	f000 854d 	beq.w	800c83c <_dtoa_r+0xb24>
 800bda2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bda4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bffc <_dtoa_r+0x2e4>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 854f 	beq.w	800c84c <_dtoa_r+0xb34>
 800bdae:	f10a 0303 	add.w	r3, sl, #3
 800bdb2:	f000 bd49 	b.w	800c848 <_dtoa_r+0xb30>
 800bdb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	ec51 0b17 	vmov	r0, r1, d7
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bdc6:	f7f4 fe97 	bl	8000af8 <__aeabi_dcmpeq>
 800bdca:	4680      	mov	r8, r0
 800bdcc:	b158      	cbz	r0, 800bde6 <_dtoa_r+0xce>
 800bdce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdd6:	b113      	cbz	r3, 800bdde <_dtoa_r+0xc6>
 800bdd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bdda:	4b84      	ldr	r3, [pc, #528]	@ (800bfec <_dtoa_r+0x2d4>)
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c000 <_dtoa_r+0x2e8>
 800bde2:	f000 bd33 	b.w	800c84c <_dtoa_r+0xb34>
 800bde6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdea:	aa16      	add	r2, sp, #88	@ 0x58
 800bdec:	a917      	add	r1, sp, #92	@ 0x5c
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f001 f980 	bl	800d0f4 <__d2b>
 800bdf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bdf8:	4681      	mov	r9, r0
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	d077      	beq.n	800beee <_dtoa_r+0x1d6>
 800bdfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800be04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be18:	4619      	mov	r1, r3
 800be1a:	2200      	movs	r2, #0
 800be1c:	4b74      	ldr	r3, [pc, #464]	@ (800bff0 <_dtoa_r+0x2d8>)
 800be1e:	f7f4 fa4b 	bl	80002b8 <__aeabi_dsub>
 800be22:	a369      	add	r3, pc, #420	@ (adr r3, 800bfc8 <_dtoa_r+0x2b0>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 fbfe 	bl	8000628 <__aeabi_dmul>
 800be2c:	a368      	add	r3, pc, #416	@ (adr r3, 800bfd0 <_dtoa_r+0x2b8>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa43 	bl	80002bc <__adddf3>
 800be36:	4604      	mov	r4, r0
 800be38:	4630      	mov	r0, r6
 800be3a:	460d      	mov	r5, r1
 800be3c:	f7f4 fb8a 	bl	8000554 <__aeabi_i2d>
 800be40:	a365      	add	r3, pc, #404	@ (adr r3, 800bfd8 <_dtoa_r+0x2c0>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fbef 	bl	8000628 <__aeabi_dmul>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4620      	mov	r0, r4
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 fa33 	bl	80002bc <__adddf3>
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	f7f4 fe95 	bl	8000b88 <__aeabi_d2iz>
 800be5e:	2200      	movs	r2, #0
 800be60:	4607      	mov	r7, r0
 800be62:	2300      	movs	r3, #0
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f7f4 fe50 	bl	8000b0c <__aeabi_dcmplt>
 800be6c:	b140      	cbz	r0, 800be80 <_dtoa_r+0x168>
 800be6e:	4638      	mov	r0, r7
 800be70:	f7f4 fb70 	bl	8000554 <__aeabi_i2d>
 800be74:	4622      	mov	r2, r4
 800be76:	462b      	mov	r3, r5
 800be78:	f7f4 fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 800be7c:	b900      	cbnz	r0, 800be80 <_dtoa_r+0x168>
 800be7e:	3f01      	subs	r7, #1
 800be80:	2f16      	cmp	r7, #22
 800be82:	d851      	bhi.n	800bf28 <_dtoa_r+0x210>
 800be84:	4b5b      	ldr	r3, [pc, #364]	@ (800bff4 <_dtoa_r+0x2dc>)
 800be86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be92:	f7f4 fe3b 	bl	8000b0c <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	d048      	beq.n	800bf2c <_dtoa_r+0x214>
 800be9a:	3f01      	subs	r7, #1
 800be9c:	2300      	movs	r3, #0
 800be9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800bea0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bea2:	1b9b      	subs	r3, r3, r6
 800bea4:	1e5a      	subs	r2, r3, #1
 800bea6:	bf44      	itt	mi
 800bea8:	f1c3 0801 	rsbmi	r8, r3, #1
 800beac:	2300      	movmi	r3, #0
 800beae:	9208      	str	r2, [sp, #32]
 800beb0:	bf54      	ite	pl
 800beb2:	f04f 0800 	movpl.w	r8, #0
 800beb6:	9308      	strmi	r3, [sp, #32]
 800beb8:	2f00      	cmp	r7, #0
 800beba:	db39      	blt.n	800bf30 <_dtoa_r+0x218>
 800bebc:	9b08      	ldr	r3, [sp, #32]
 800bebe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bec0:	443b      	add	r3, r7
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	2300      	movs	r3, #0
 800bec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beca:	2b09      	cmp	r3, #9
 800becc:	d864      	bhi.n	800bf98 <_dtoa_r+0x280>
 800bece:	2b05      	cmp	r3, #5
 800bed0:	bfc4      	itt	gt
 800bed2:	3b04      	subgt	r3, #4
 800bed4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed8:	f1a3 0302 	sub.w	r3, r3, #2
 800bedc:	bfcc      	ite	gt
 800bede:	2400      	movgt	r4, #0
 800bee0:	2401      	movle	r4, #1
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d863      	bhi.n	800bfae <_dtoa_r+0x296>
 800bee6:	e8df f003 	tbb	[pc, r3]
 800beea:	372a      	.short	0x372a
 800beec:	5535      	.short	0x5535
 800beee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bef2:	441e      	add	r6, r3
 800bef4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bef8:	2b20      	cmp	r3, #32
 800befa:	bfc1      	itttt	gt
 800befc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf00:	409f      	lslgt	r7, r3
 800bf02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf06:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf0a:	bfd6      	itet	le
 800bf0c:	f1c3 0320 	rsble	r3, r3, #32
 800bf10:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf14:	fa04 f003 	lslle.w	r0, r4, r3
 800bf18:	f7f4 fb0c 	bl	8000534 <__aeabi_ui2d>
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf22:	3e01      	subs	r6, #1
 800bf24:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf26:	e777      	b.n	800be18 <_dtoa_r+0x100>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e7b8      	b.n	800be9e <_dtoa_r+0x186>
 800bf2c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf2e:	e7b7      	b.n	800bea0 <_dtoa_r+0x188>
 800bf30:	427b      	negs	r3, r7
 800bf32:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf34:	2300      	movs	r3, #0
 800bf36:	eba8 0807 	sub.w	r8, r8, r7
 800bf3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf3c:	e7c4      	b.n	800bec8 <_dtoa_r+0x1b0>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dc35      	bgt.n	800bfb4 <_dtoa_r+0x29c>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	9307      	str	r3, [sp, #28]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf52:	e00b      	b.n	800bf6c <_dtoa_r+0x254>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e7f3      	b.n	800bf40 <_dtoa_r+0x228>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf5e:	18fb      	adds	r3, r7, r3
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	3301      	adds	r3, #1
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	9307      	str	r3, [sp, #28]
 800bf68:	bfb8      	it	lt
 800bf6a:	2301      	movlt	r3, #1
 800bf6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf70:	2100      	movs	r1, #0
 800bf72:	2204      	movs	r2, #4
 800bf74:	f102 0514 	add.w	r5, r2, #20
 800bf78:	429d      	cmp	r5, r3
 800bf7a:	d91f      	bls.n	800bfbc <_dtoa_r+0x2a4>
 800bf7c:	6041      	str	r1, [r0, #4]
 800bf7e:	4658      	mov	r0, fp
 800bf80:	f000 fd8e 	bl	800caa0 <_Balloc>
 800bf84:	4682      	mov	sl, r0
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d13c      	bne.n	800c004 <_dtoa_r+0x2ec>
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	@ (800bff8 <_dtoa_r+0x2e0>)
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf92:	e6d8      	b.n	800bd46 <_dtoa_r+0x2e>
 800bf94:	2301      	movs	r3, #1
 800bf96:	e7e0      	b.n	800bf5a <_dtoa_r+0x242>
 800bf98:	2401      	movs	r4, #1
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	9307      	str	r3, [sp, #28]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2312      	movs	r3, #18
 800bfac:	e7d0      	b.n	800bf50 <_dtoa_r+0x238>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfb2:	e7f5      	b.n	800bfa0 <_dtoa_r+0x288>
 800bfb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	e7d7      	b.n	800bf6c <_dtoa_r+0x254>
 800bfbc:	3101      	adds	r1, #1
 800bfbe:	0052      	lsls	r2, r2, #1
 800bfc0:	e7d8      	b.n	800bf74 <_dtoa_r+0x25c>
 800bfc2:	bf00      	nop
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	636f4361 	.word	0x636f4361
 800bfcc:	3fd287a7 	.word	0x3fd287a7
 800bfd0:	8b60c8b3 	.word	0x8b60c8b3
 800bfd4:	3fc68a28 	.word	0x3fc68a28
 800bfd8:	509f79fb 	.word	0x509f79fb
 800bfdc:	3fd34413 	.word	0x3fd34413
 800bfe0:	0800df89 	.word	0x0800df89
 800bfe4:	0800dfa0 	.word	0x0800dfa0
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	0800df59 	.word	0x0800df59
 800bff0:	3ff80000 	.word	0x3ff80000
 800bff4:	0800e098 	.word	0x0800e098
 800bff8:	0800dff8 	.word	0x0800dff8
 800bffc:	0800df85 	.word	0x0800df85
 800c000:	0800df58 	.word	0x0800df58
 800c004:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c008:	6018      	str	r0, [r3, #0]
 800c00a:	9b07      	ldr	r3, [sp, #28]
 800c00c:	2b0e      	cmp	r3, #14
 800c00e:	f200 80a4 	bhi.w	800c15a <_dtoa_r+0x442>
 800c012:	2c00      	cmp	r4, #0
 800c014:	f000 80a1 	beq.w	800c15a <_dtoa_r+0x442>
 800c018:	2f00      	cmp	r7, #0
 800c01a:	dd33      	ble.n	800c084 <_dtoa_r+0x36c>
 800c01c:	4bad      	ldr	r3, [pc, #692]	@ (800c2d4 <_dtoa_r+0x5bc>)
 800c01e:	f007 020f 	and.w	r2, r7, #15
 800c022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c026:	ed93 7b00 	vldr	d7, [r3]
 800c02a:	05f8      	lsls	r0, r7, #23
 800c02c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c030:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c034:	d516      	bpl.n	800c064 <_dtoa_r+0x34c>
 800c036:	4ba8      	ldr	r3, [pc, #672]	@ (800c2d8 <_dtoa_r+0x5c0>)
 800c038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c03c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c040:	f7f4 fc1c 	bl	800087c <__aeabi_ddiv>
 800c044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c048:	f004 040f 	and.w	r4, r4, #15
 800c04c:	2603      	movs	r6, #3
 800c04e:	4da2      	ldr	r5, [pc, #648]	@ (800c2d8 <_dtoa_r+0x5c0>)
 800c050:	b954      	cbnz	r4, 800c068 <_dtoa_r+0x350>
 800c052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05a:	f7f4 fc0f 	bl	800087c <__aeabi_ddiv>
 800c05e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c062:	e028      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c064:	2602      	movs	r6, #2
 800c066:	e7f2      	b.n	800c04e <_dtoa_r+0x336>
 800c068:	07e1      	lsls	r1, r4, #31
 800c06a:	d508      	bpl.n	800c07e <_dtoa_r+0x366>
 800c06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c070:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c074:	f7f4 fad8 	bl	8000628 <__aeabi_dmul>
 800c078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07c:	3601      	adds	r6, #1
 800c07e:	1064      	asrs	r4, r4, #1
 800c080:	3508      	adds	r5, #8
 800c082:	e7e5      	b.n	800c050 <_dtoa_r+0x338>
 800c084:	f000 80d2 	beq.w	800c22c <_dtoa_r+0x514>
 800c088:	427c      	negs	r4, r7
 800c08a:	4b92      	ldr	r3, [pc, #584]	@ (800c2d4 <_dtoa_r+0x5bc>)
 800c08c:	4d92      	ldr	r5, [pc, #584]	@ (800c2d8 <_dtoa_r+0x5c0>)
 800c08e:	f004 020f 	and.w	r2, r4, #15
 800c092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c09e:	f7f4 fac3 	bl	8000628 <__aeabi_dmul>
 800c0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a6:	1124      	asrs	r4, r4, #4
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2602      	movs	r6, #2
 800c0ac:	2c00      	cmp	r4, #0
 800c0ae:	f040 80b2 	bne.w	800c216 <_dtoa_r+0x4fe>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1d3      	bne.n	800c05e <_dtoa_r+0x346>
 800c0b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80b7 	beq.w	800c230 <_dtoa_r+0x518>
 800c0c2:	4b86      	ldr	r3, [pc, #536]	@ (800c2dc <_dtoa_r+0x5c4>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f000 80ae 	beq.w	800c230 <_dtoa_r+0x518>
 800c0d4:	9b07      	ldr	r3, [sp, #28]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80aa 	beq.w	800c230 <_dtoa_r+0x518>
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd37      	ble.n	800c152 <_dtoa_r+0x43a>
 800c0e2:	1e7b      	subs	r3, r7, #1
 800c0e4:	9304      	str	r3, [sp, #16]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4b7d      	ldr	r3, [pc, #500]	@ (800c2e0 <_dtoa_r+0x5c8>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 fa9b 	bl	8000628 <__aeabi_dmul>
 800c0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f6:	9c00      	ldr	r4, [sp, #0]
 800c0f8:	3601      	adds	r6, #1
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7f4 fa2a 	bl	8000554 <__aeabi_i2d>
 800c100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c104:	f7f4 fa90 	bl	8000628 <__aeabi_dmul>
 800c108:	4b76      	ldr	r3, [pc, #472]	@ (800c2e4 <_dtoa_r+0x5cc>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	f7f4 f8d6 	bl	80002bc <__adddf3>
 800c110:	4605      	mov	r5, r0
 800c112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c116:	2c00      	cmp	r4, #0
 800c118:	f040 808d 	bne.w	800c236 <_dtoa_r+0x51e>
 800c11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c120:	4b71      	ldr	r3, [pc, #452]	@ (800c2e8 <_dtoa_r+0x5d0>)
 800c122:	2200      	movs	r2, #0
 800c124:	f7f4 f8c8 	bl	80002b8 <__aeabi_dsub>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c130:	462a      	mov	r2, r5
 800c132:	4633      	mov	r3, r6
 800c134:	f7f4 fd08 	bl	8000b48 <__aeabi_dcmpgt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f040 828b 	bne.w	800c654 <_dtoa_r+0x93c>
 800c13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c142:	462a      	mov	r2, r5
 800c144:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c148:	f7f4 fce0 	bl	8000b0c <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 8128 	bne.w	800c3a2 <_dtoa_r+0x68a>
 800c152:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c156:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c15a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f2c0 815a 	blt.w	800c416 <_dtoa_r+0x6fe>
 800c162:	2f0e      	cmp	r7, #14
 800c164:	f300 8157 	bgt.w	800c416 <_dtoa_r+0x6fe>
 800c168:	4b5a      	ldr	r3, [pc, #360]	@ (800c2d4 <_dtoa_r+0x5bc>)
 800c16a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c16e:	ed93 7b00 	vldr	d7, [r3]
 800c172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c174:	2b00      	cmp	r3, #0
 800c176:	ed8d 7b00 	vstr	d7, [sp]
 800c17a:	da03      	bge.n	800c184 <_dtoa_r+0x46c>
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f340 8101 	ble.w	800c386 <_dtoa_r+0x66e>
 800c184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c188:	4656      	mov	r6, sl
 800c18a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 fb73 	bl	800087c <__aeabi_ddiv>
 800c196:	f7f4 fcf7 	bl	8000b88 <__aeabi_d2iz>
 800c19a:	4680      	mov	r8, r0
 800c19c:	f7f4 f9da 	bl	8000554 <__aeabi_i2d>
 800c1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1a4:	f7f4 fa40 	bl	8000628 <__aeabi_dmul>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c1b4:	f7f4 f880 	bl	80002b8 <__aeabi_dsub>
 800c1b8:	f806 4b01 	strb.w	r4, [r6], #1
 800c1bc:	9d07      	ldr	r5, [sp, #28]
 800c1be:	eba6 040a 	sub.w	r4, r6, sl
 800c1c2:	42a5      	cmp	r5, r4
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	f040 8117 	bne.w	800c3fa <_dtoa_r+0x6e2>
 800c1cc:	f7f4 f876 	bl	80002bc <__adddf3>
 800c1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	f7f4 fcb6 	bl	8000b48 <__aeabi_dcmpgt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f040 80f9 	bne.w	800c3d4 <_dtoa_r+0x6bc>
 800c1e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fc85 	bl	8000af8 <__aeabi_dcmpeq>
 800c1ee:	b118      	cbz	r0, 800c1f8 <_dtoa_r+0x4e0>
 800c1f0:	f018 0f01 	tst.w	r8, #1
 800c1f4:	f040 80ee 	bne.w	800c3d4 <_dtoa_r+0x6bc>
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	4658      	mov	r0, fp
 800c1fc:	f000 fc90 	bl	800cb20 <_Bfree>
 800c200:	2300      	movs	r3, #0
 800c202:	7033      	strb	r3, [r6, #0]
 800c204:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c206:	3701      	adds	r7, #1
 800c208:	601f      	str	r7, [r3, #0]
 800c20a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 831d 	beq.w	800c84c <_dtoa_r+0xb34>
 800c212:	601e      	str	r6, [r3, #0]
 800c214:	e31a      	b.n	800c84c <_dtoa_r+0xb34>
 800c216:	07e2      	lsls	r2, r4, #31
 800c218:	d505      	bpl.n	800c226 <_dtoa_r+0x50e>
 800c21a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c21e:	f7f4 fa03 	bl	8000628 <__aeabi_dmul>
 800c222:	3601      	adds	r6, #1
 800c224:	2301      	movs	r3, #1
 800c226:	1064      	asrs	r4, r4, #1
 800c228:	3508      	adds	r5, #8
 800c22a:	e73f      	b.n	800c0ac <_dtoa_r+0x394>
 800c22c:	2602      	movs	r6, #2
 800c22e:	e742      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c230:	9c07      	ldr	r4, [sp, #28]
 800c232:	9704      	str	r7, [sp, #16]
 800c234:	e761      	b.n	800c0fa <_dtoa_r+0x3e2>
 800c236:	4b27      	ldr	r3, [pc, #156]	@ (800c2d4 <_dtoa_r+0x5bc>)
 800c238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c23a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c23e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c242:	4454      	add	r4, sl
 800c244:	2900      	cmp	r1, #0
 800c246:	d053      	beq.n	800c2f0 <_dtoa_r+0x5d8>
 800c248:	4928      	ldr	r1, [pc, #160]	@ (800c2ec <_dtoa_r+0x5d4>)
 800c24a:	2000      	movs	r0, #0
 800c24c:	f7f4 fb16 	bl	800087c <__aeabi_ddiv>
 800c250:	4633      	mov	r3, r6
 800c252:	462a      	mov	r2, r5
 800c254:	f7f4 f830 	bl	80002b8 <__aeabi_dsub>
 800c258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c25c:	4656      	mov	r6, sl
 800c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c262:	f7f4 fc91 	bl	8000b88 <__aeabi_d2iz>
 800c266:	4605      	mov	r5, r0
 800c268:	f7f4 f974 	bl	8000554 <__aeabi_i2d>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c274:	f7f4 f820 	bl	80002b8 <__aeabi_dsub>
 800c278:	3530      	adds	r5, #48	@ 0x30
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c282:	f806 5b01 	strb.w	r5, [r6], #1
 800c286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c28a:	f7f4 fc3f 	bl	8000b0c <__aeabi_dcmplt>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d171      	bne.n	800c376 <_dtoa_r+0x65e>
 800c292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c296:	4911      	ldr	r1, [pc, #68]	@ (800c2dc <_dtoa_r+0x5c4>)
 800c298:	2000      	movs	r0, #0
 800c29a:	f7f4 f80d 	bl	80002b8 <__aeabi_dsub>
 800c29e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2a2:	f7f4 fc33 	bl	8000b0c <__aeabi_dcmplt>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f040 8095 	bne.w	800c3d6 <_dtoa_r+0x6be>
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	f43f af50 	beq.w	800c152 <_dtoa_r+0x43a>
 800c2b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <_dtoa_r+0x5c8>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f9b5 	bl	8000628 <__aeabi_dmul>
 800c2be:	4b08      	ldr	r3, [pc, #32]	@ (800c2e0 <_dtoa_r+0x5c8>)
 800c2c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 f9ad 	bl	8000628 <__aeabi_dmul>
 800c2ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d2:	e7c4      	b.n	800c25e <_dtoa_r+0x546>
 800c2d4:	0800e098 	.word	0x0800e098
 800c2d8:	0800e070 	.word	0x0800e070
 800c2dc:	3ff00000 	.word	0x3ff00000
 800c2e0:	40240000 	.word	0x40240000
 800c2e4:	401c0000 	.word	0x401c0000
 800c2e8:	40140000 	.word	0x40140000
 800c2ec:	3fe00000 	.word	0x3fe00000
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f7f4 f998 	bl	8000628 <__aeabi_dmul>
 800c2f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c2fe:	4656      	mov	r6, sl
 800c300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c304:	f7f4 fc40 	bl	8000b88 <__aeabi_d2iz>
 800c308:	4605      	mov	r5, r0
 800c30a:	f7f4 f923 	bl	8000554 <__aeabi_i2d>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c316:	f7f3 ffcf 	bl	80002b8 <__aeabi_dsub>
 800c31a:	3530      	adds	r5, #48	@ 0x30
 800c31c:	f806 5b01 	strb.w	r5, [r6], #1
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	42a6      	cmp	r6, r4
 800c326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c32a:	f04f 0200 	mov.w	r2, #0
 800c32e:	d124      	bne.n	800c37a <_dtoa_r+0x662>
 800c330:	4bac      	ldr	r3, [pc, #688]	@ (800c5e4 <_dtoa_r+0x8cc>)
 800c332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c336:	f7f3 ffc1 	bl	80002bc <__adddf3>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c342:	f7f4 fc01 	bl	8000b48 <__aeabi_dcmpgt>
 800c346:	2800      	cmp	r0, #0
 800c348:	d145      	bne.n	800c3d6 <_dtoa_r+0x6be>
 800c34a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c34e:	49a5      	ldr	r1, [pc, #660]	@ (800c5e4 <_dtoa_r+0x8cc>)
 800c350:	2000      	movs	r0, #0
 800c352:	f7f3 ffb1 	bl	80002b8 <__aeabi_dsub>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c35e:	f7f4 fbd5 	bl	8000b0c <__aeabi_dcmplt>
 800c362:	2800      	cmp	r0, #0
 800c364:	f43f aef5 	beq.w	800c152 <_dtoa_r+0x43a>
 800c368:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c36a:	1e73      	subs	r3, r6, #1
 800c36c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c36e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c372:	2b30      	cmp	r3, #48	@ 0x30
 800c374:	d0f8      	beq.n	800c368 <_dtoa_r+0x650>
 800c376:	9f04      	ldr	r7, [sp, #16]
 800c378:	e73e      	b.n	800c1f8 <_dtoa_r+0x4e0>
 800c37a:	4b9b      	ldr	r3, [pc, #620]	@ (800c5e8 <_dtoa_r+0x8d0>)
 800c37c:	f7f4 f954 	bl	8000628 <__aeabi_dmul>
 800c380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c384:	e7bc      	b.n	800c300 <_dtoa_r+0x5e8>
 800c386:	d10c      	bne.n	800c3a2 <_dtoa_r+0x68a>
 800c388:	4b98      	ldr	r3, [pc, #608]	@ (800c5ec <_dtoa_r+0x8d4>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c390:	f7f4 f94a 	bl	8000628 <__aeabi_dmul>
 800c394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c398:	f7f4 fbcc 	bl	8000b34 <__aeabi_dcmpge>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f000 8157 	beq.w	800c650 <_dtoa_r+0x938>
 800c3a2:	2400      	movs	r4, #0
 800c3a4:	4625      	mov	r5, r4
 800c3a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	4656      	mov	r6, sl
 800c3ae:	2700      	movs	r7, #0
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	4658      	mov	r0, fp
 800c3b4:	f000 fbb4 	bl	800cb20 <_Bfree>
 800c3b8:	2d00      	cmp	r5, #0
 800c3ba:	d0dc      	beq.n	800c376 <_dtoa_r+0x65e>
 800c3bc:	b12f      	cbz	r7, 800c3ca <_dtoa_r+0x6b2>
 800c3be:	42af      	cmp	r7, r5
 800c3c0:	d003      	beq.n	800c3ca <_dtoa_r+0x6b2>
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	f000 fbab 	bl	800cb20 <_Bfree>
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f000 fba7 	bl	800cb20 <_Bfree>
 800c3d2:	e7d0      	b.n	800c376 <_dtoa_r+0x65e>
 800c3d4:	9704      	str	r7, [sp, #16]
 800c3d6:	4633      	mov	r3, r6
 800c3d8:	461e      	mov	r6, r3
 800c3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3de:	2a39      	cmp	r2, #57	@ 0x39
 800c3e0:	d107      	bne.n	800c3f2 <_dtoa_r+0x6da>
 800c3e2:	459a      	cmp	sl, r3
 800c3e4:	d1f8      	bne.n	800c3d8 <_dtoa_r+0x6c0>
 800c3e6:	9a04      	ldr	r2, [sp, #16]
 800c3e8:	3201      	adds	r2, #1
 800c3ea:	9204      	str	r2, [sp, #16]
 800c3ec:	2230      	movs	r2, #48	@ 0x30
 800c3ee:	f88a 2000 	strb.w	r2, [sl]
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	3201      	adds	r2, #1
 800c3f6:	701a      	strb	r2, [r3, #0]
 800c3f8:	e7bd      	b.n	800c376 <_dtoa_r+0x65e>
 800c3fa:	4b7b      	ldr	r3, [pc, #492]	@ (800c5e8 <_dtoa_r+0x8d0>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f7f4 f913 	bl	8000628 <__aeabi_dmul>
 800c402:	2200      	movs	r2, #0
 800c404:	2300      	movs	r3, #0
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	f7f4 fb75 	bl	8000af8 <__aeabi_dcmpeq>
 800c40e:	2800      	cmp	r0, #0
 800c410:	f43f aebb 	beq.w	800c18a <_dtoa_r+0x472>
 800c414:	e6f0      	b.n	800c1f8 <_dtoa_r+0x4e0>
 800c416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c418:	2a00      	cmp	r2, #0
 800c41a:	f000 80db 	beq.w	800c5d4 <_dtoa_r+0x8bc>
 800c41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c420:	2a01      	cmp	r2, #1
 800c422:	f300 80bf 	bgt.w	800c5a4 <_dtoa_r+0x88c>
 800c426:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c428:	2a00      	cmp	r2, #0
 800c42a:	f000 80b7 	beq.w	800c59c <_dtoa_r+0x884>
 800c42e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c432:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c434:	4646      	mov	r6, r8
 800c436:	9a08      	ldr	r2, [sp, #32]
 800c438:	2101      	movs	r1, #1
 800c43a:	441a      	add	r2, r3
 800c43c:	4658      	mov	r0, fp
 800c43e:	4498      	add	r8, r3
 800c440:	9208      	str	r2, [sp, #32]
 800c442:	f000 fc21 	bl	800cc88 <__i2b>
 800c446:	4605      	mov	r5, r0
 800c448:	b15e      	cbz	r6, 800c462 <_dtoa_r+0x74a>
 800c44a:	9b08      	ldr	r3, [sp, #32]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	dd08      	ble.n	800c462 <_dtoa_r+0x74a>
 800c450:	42b3      	cmp	r3, r6
 800c452:	9a08      	ldr	r2, [sp, #32]
 800c454:	bfa8      	it	ge
 800c456:	4633      	movge	r3, r6
 800c458:	eba8 0803 	sub.w	r8, r8, r3
 800c45c:	1af6      	subs	r6, r6, r3
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	9308      	str	r3, [sp, #32]
 800c462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c464:	b1f3      	cbz	r3, 800c4a4 <_dtoa_r+0x78c>
 800c466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 80b7 	beq.w	800c5dc <_dtoa_r+0x8c4>
 800c46e:	b18c      	cbz	r4, 800c494 <_dtoa_r+0x77c>
 800c470:	4629      	mov	r1, r5
 800c472:	4622      	mov	r2, r4
 800c474:	4658      	mov	r0, fp
 800c476:	f000 fcc7 	bl	800ce08 <__pow5mult>
 800c47a:	464a      	mov	r2, r9
 800c47c:	4601      	mov	r1, r0
 800c47e:	4605      	mov	r5, r0
 800c480:	4658      	mov	r0, fp
 800c482:	f000 fc17 	bl	800ccb4 <__multiply>
 800c486:	4649      	mov	r1, r9
 800c488:	9004      	str	r0, [sp, #16]
 800c48a:	4658      	mov	r0, fp
 800c48c:	f000 fb48 	bl	800cb20 <_Bfree>
 800c490:	9b04      	ldr	r3, [sp, #16]
 800c492:	4699      	mov	r9, r3
 800c494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c496:	1b1a      	subs	r2, r3, r4
 800c498:	d004      	beq.n	800c4a4 <_dtoa_r+0x78c>
 800c49a:	4649      	mov	r1, r9
 800c49c:	4658      	mov	r0, fp
 800c49e:	f000 fcb3 	bl	800ce08 <__pow5mult>
 800c4a2:	4681      	mov	r9, r0
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	4658      	mov	r0, fp
 800c4a8:	f000 fbee 	bl	800cc88 <__i2b>
 800c4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 81cf 	beq.w	800c854 <_dtoa_r+0xb3c>
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fca4 	bl	800ce08 <__pow5mult>
 800c4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	f300 8095 	bgt.w	800c5f4 <_dtoa_r+0x8dc>
 800c4ca:	9b02      	ldr	r3, [sp, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f040 8087 	bne.w	800c5e0 <_dtoa_r+0x8c8>
 800c4d2:	9b03      	ldr	r3, [sp, #12]
 800c4d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f040 8089 	bne.w	800c5f0 <_dtoa_r+0x8d8>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4e4:	0d1b      	lsrs	r3, r3, #20
 800c4e6:	051b      	lsls	r3, r3, #20
 800c4e8:	b12b      	cbz	r3, 800c4f6 <_dtoa_r+0x7de>
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	9308      	str	r3, [sp, #32]
 800c4f0:	f108 0801 	add.w	r8, r8, #1
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 81b0 	beq.w	800c860 <_dtoa_r+0xb48>
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c506:	6918      	ldr	r0, [r3, #16]
 800c508:	f000 fb72 	bl	800cbf0 <__hi0bits>
 800c50c:	f1c0 0020 	rsb	r0, r0, #32
 800c510:	9b08      	ldr	r3, [sp, #32]
 800c512:	4418      	add	r0, r3
 800c514:	f010 001f 	ands.w	r0, r0, #31
 800c518:	d077      	beq.n	800c60a <_dtoa_r+0x8f2>
 800c51a:	f1c0 0320 	rsb	r3, r0, #32
 800c51e:	2b04      	cmp	r3, #4
 800c520:	dd6b      	ble.n	800c5fa <_dtoa_r+0x8e2>
 800c522:	9b08      	ldr	r3, [sp, #32]
 800c524:	f1c0 001c 	rsb	r0, r0, #28
 800c528:	4403      	add	r3, r0
 800c52a:	4480      	add	r8, r0
 800c52c:	4406      	add	r6, r0
 800c52e:	9308      	str	r3, [sp, #32]
 800c530:	f1b8 0f00 	cmp.w	r8, #0
 800c534:	dd05      	ble.n	800c542 <_dtoa_r+0x82a>
 800c536:	4649      	mov	r1, r9
 800c538:	4642      	mov	r2, r8
 800c53a:	4658      	mov	r0, fp
 800c53c:	f000 fcbe 	bl	800cebc <__lshift>
 800c540:	4681      	mov	r9, r0
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	2b00      	cmp	r3, #0
 800c546:	dd05      	ble.n	800c554 <_dtoa_r+0x83c>
 800c548:	4621      	mov	r1, r4
 800c54a:	461a      	mov	r2, r3
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 fcb5 	bl	800cebc <__lshift>
 800c552:	4604      	mov	r4, r0
 800c554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c556:	2b00      	cmp	r3, #0
 800c558:	d059      	beq.n	800c60e <_dtoa_r+0x8f6>
 800c55a:	4621      	mov	r1, r4
 800c55c:	4648      	mov	r0, r9
 800c55e:	f000 fd19 	bl	800cf94 <__mcmp>
 800c562:	2800      	cmp	r0, #0
 800c564:	da53      	bge.n	800c60e <_dtoa_r+0x8f6>
 800c566:	1e7b      	subs	r3, r7, #1
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	4649      	mov	r1, r9
 800c56c:	2300      	movs	r3, #0
 800c56e:	220a      	movs	r2, #10
 800c570:	4658      	mov	r0, fp
 800c572:	f000 faf7 	bl	800cb64 <__multadd>
 800c576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c578:	4681      	mov	r9, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 8172 	beq.w	800c864 <_dtoa_r+0xb4c>
 800c580:	2300      	movs	r3, #0
 800c582:	4629      	mov	r1, r5
 800c584:	220a      	movs	r2, #10
 800c586:	4658      	mov	r0, fp
 800c588:	f000 faec 	bl	800cb64 <__multadd>
 800c58c:	9b00      	ldr	r3, [sp, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	4605      	mov	r5, r0
 800c592:	dc67      	bgt.n	800c664 <_dtoa_r+0x94c>
 800c594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c596:	2b02      	cmp	r3, #2
 800c598:	dc41      	bgt.n	800c61e <_dtoa_r+0x906>
 800c59a:	e063      	b.n	800c664 <_dtoa_r+0x94c>
 800c59c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c59e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5a2:	e746      	b.n	800c432 <_dtoa_r+0x71a>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	1e5c      	subs	r4, r3, #1
 800c5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	bfbf      	itttt	lt
 800c5ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c5b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c5b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c5b4:	1ae3      	sublt	r3, r4, r3
 800c5b6:	bfb4      	ite	lt
 800c5b8:	18d2      	addlt	r2, r2, r3
 800c5ba:	1b1c      	subge	r4, r3, r4
 800c5bc:	9b07      	ldr	r3, [sp, #28]
 800c5be:	bfbc      	itt	lt
 800c5c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c5c2:	2400      	movlt	r4, #0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfb5      	itete	lt
 800c5c8:	eba8 0603 	sublt.w	r6, r8, r3
 800c5cc:	9b07      	ldrge	r3, [sp, #28]
 800c5ce:	2300      	movlt	r3, #0
 800c5d0:	4646      	movge	r6, r8
 800c5d2:	e730      	b.n	800c436 <_dtoa_r+0x71e>
 800c5d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c5d8:	4646      	mov	r6, r8
 800c5da:	e735      	b.n	800c448 <_dtoa_r+0x730>
 800c5dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5de:	e75c      	b.n	800c49a <_dtoa_r+0x782>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e788      	b.n	800c4f6 <_dtoa_r+0x7de>
 800c5e4:	3fe00000 	.word	0x3fe00000
 800c5e8:	40240000 	.word	0x40240000
 800c5ec:	40140000 	.word	0x40140000
 800c5f0:	9b02      	ldr	r3, [sp, #8]
 800c5f2:	e780      	b.n	800c4f6 <_dtoa_r+0x7de>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5f8:	e782      	b.n	800c500 <_dtoa_r+0x7e8>
 800c5fa:	d099      	beq.n	800c530 <_dtoa_r+0x818>
 800c5fc:	9a08      	ldr	r2, [sp, #32]
 800c5fe:	331c      	adds	r3, #28
 800c600:	441a      	add	r2, r3
 800c602:	4498      	add	r8, r3
 800c604:	441e      	add	r6, r3
 800c606:	9208      	str	r2, [sp, #32]
 800c608:	e792      	b.n	800c530 <_dtoa_r+0x818>
 800c60a:	4603      	mov	r3, r0
 800c60c:	e7f6      	b.n	800c5fc <_dtoa_r+0x8e4>
 800c60e:	9b07      	ldr	r3, [sp, #28]
 800c610:	9704      	str	r7, [sp, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	dc20      	bgt.n	800c658 <_dtoa_r+0x940>
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	dd1e      	ble.n	800c65c <_dtoa_r+0x944>
 800c61e:	9b00      	ldr	r3, [sp, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f47f aec0 	bne.w	800c3a6 <_dtoa_r+0x68e>
 800c626:	4621      	mov	r1, r4
 800c628:	2205      	movs	r2, #5
 800c62a:	4658      	mov	r0, fp
 800c62c:	f000 fa9a 	bl	800cb64 <__multadd>
 800c630:	4601      	mov	r1, r0
 800c632:	4604      	mov	r4, r0
 800c634:	4648      	mov	r0, r9
 800c636:	f000 fcad 	bl	800cf94 <__mcmp>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f77f aeb3 	ble.w	800c3a6 <_dtoa_r+0x68e>
 800c640:	4656      	mov	r6, sl
 800c642:	2331      	movs	r3, #49	@ 0x31
 800c644:	f806 3b01 	strb.w	r3, [r6], #1
 800c648:	9b04      	ldr	r3, [sp, #16]
 800c64a:	3301      	adds	r3, #1
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	e6ae      	b.n	800c3ae <_dtoa_r+0x696>
 800c650:	9c07      	ldr	r4, [sp, #28]
 800c652:	9704      	str	r7, [sp, #16]
 800c654:	4625      	mov	r5, r4
 800c656:	e7f3      	b.n	800c640 <_dtoa_r+0x928>
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 8104 	beq.w	800c86c <_dtoa_r+0xb54>
 800c664:	2e00      	cmp	r6, #0
 800c666:	dd05      	ble.n	800c674 <_dtoa_r+0x95c>
 800c668:	4629      	mov	r1, r5
 800c66a:	4632      	mov	r2, r6
 800c66c:	4658      	mov	r0, fp
 800c66e:	f000 fc25 	bl	800cebc <__lshift>
 800c672:	4605      	mov	r5, r0
 800c674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c676:	2b00      	cmp	r3, #0
 800c678:	d05a      	beq.n	800c730 <_dtoa_r+0xa18>
 800c67a:	6869      	ldr	r1, [r5, #4]
 800c67c:	4658      	mov	r0, fp
 800c67e:	f000 fa0f 	bl	800caa0 <_Balloc>
 800c682:	4606      	mov	r6, r0
 800c684:	b928      	cbnz	r0, 800c692 <_dtoa_r+0x97a>
 800c686:	4b84      	ldr	r3, [pc, #528]	@ (800c898 <_dtoa_r+0xb80>)
 800c688:	4602      	mov	r2, r0
 800c68a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c68e:	f7ff bb5a 	b.w	800bd46 <_dtoa_r+0x2e>
 800c692:	692a      	ldr	r2, [r5, #16]
 800c694:	3202      	adds	r2, #2
 800c696:	0092      	lsls	r2, r2, #2
 800c698:	f105 010c 	add.w	r1, r5, #12
 800c69c:	300c      	adds	r0, #12
 800c69e:	f001 f803 	bl	800d6a8 <memcpy>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f000 fc08 	bl	800cebc <__lshift>
 800c6ac:	f10a 0301 	add.w	r3, sl, #1
 800c6b0:	9307      	str	r3, [sp, #28]
 800c6b2:	9b00      	ldr	r3, [sp, #0]
 800c6b4:	4453      	add	r3, sl
 800c6b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	462f      	mov	r7, r5
 800c6c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	4648      	mov	r0, r9
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f7ff fa9a 	bl	800bc06 <quorem>
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	9002      	str	r0, [sp, #8]
 800c6d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6da:	4648      	mov	r0, r9
 800c6dc:	f000 fc5a 	bl	800cf94 <__mcmp>
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	9008      	str	r0, [sp, #32]
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4658      	mov	r0, fp
 800c6e8:	f000 fc70 	bl	800cfcc <__mdiff>
 800c6ec:	68c2      	ldr	r2, [r0, #12]
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	bb02      	cbnz	r2, 800c734 <_dtoa_r+0xa1c>
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4648      	mov	r0, r9
 800c6f6:	f000 fc4d 	bl	800cf94 <__mcmp>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4658      	mov	r0, fp
 800c700:	920e      	str	r2, [sp, #56]	@ 0x38
 800c702:	f000 fa0d 	bl	800cb20 <_Bfree>
 800c706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70a:	9e07      	ldr	r6, [sp, #28]
 800c70c:	ea43 0102 	orr.w	r1, r3, r2
 800c710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c712:	4319      	orrs	r1, r3
 800c714:	d110      	bne.n	800c738 <_dtoa_r+0xa20>
 800c716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c71a:	d029      	beq.n	800c770 <_dtoa_r+0xa58>
 800c71c:	9b08      	ldr	r3, [sp, #32]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	dd02      	ble.n	800c728 <_dtoa_r+0xa10>
 800c722:	9b02      	ldr	r3, [sp, #8]
 800c724:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c728:	9b00      	ldr	r3, [sp, #0]
 800c72a:	f883 8000 	strb.w	r8, [r3]
 800c72e:	e63f      	b.n	800c3b0 <_dtoa_r+0x698>
 800c730:	4628      	mov	r0, r5
 800c732:	e7bb      	b.n	800c6ac <_dtoa_r+0x994>
 800c734:	2201      	movs	r2, #1
 800c736:	e7e1      	b.n	800c6fc <_dtoa_r+0x9e4>
 800c738:	9b08      	ldr	r3, [sp, #32]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	db04      	blt.n	800c748 <_dtoa_r+0xa30>
 800c73e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c740:	430b      	orrs	r3, r1
 800c742:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c744:	430b      	orrs	r3, r1
 800c746:	d120      	bne.n	800c78a <_dtoa_r+0xa72>
 800c748:	2a00      	cmp	r2, #0
 800c74a:	dded      	ble.n	800c728 <_dtoa_r+0xa10>
 800c74c:	4649      	mov	r1, r9
 800c74e:	2201      	movs	r2, #1
 800c750:	4658      	mov	r0, fp
 800c752:	f000 fbb3 	bl	800cebc <__lshift>
 800c756:	4621      	mov	r1, r4
 800c758:	4681      	mov	r9, r0
 800c75a:	f000 fc1b 	bl	800cf94 <__mcmp>
 800c75e:	2800      	cmp	r0, #0
 800c760:	dc03      	bgt.n	800c76a <_dtoa_r+0xa52>
 800c762:	d1e1      	bne.n	800c728 <_dtoa_r+0xa10>
 800c764:	f018 0f01 	tst.w	r8, #1
 800c768:	d0de      	beq.n	800c728 <_dtoa_r+0xa10>
 800c76a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c76e:	d1d8      	bne.n	800c722 <_dtoa_r+0xa0a>
 800c770:	9a00      	ldr	r2, [sp, #0]
 800c772:	2339      	movs	r3, #57	@ 0x39
 800c774:	7013      	strb	r3, [r2, #0]
 800c776:	4633      	mov	r3, r6
 800c778:	461e      	mov	r6, r3
 800c77a:	3b01      	subs	r3, #1
 800c77c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c780:	2a39      	cmp	r2, #57	@ 0x39
 800c782:	d052      	beq.n	800c82a <_dtoa_r+0xb12>
 800c784:	3201      	adds	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
 800c788:	e612      	b.n	800c3b0 <_dtoa_r+0x698>
 800c78a:	2a00      	cmp	r2, #0
 800c78c:	dd07      	ble.n	800c79e <_dtoa_r+0xa86>
 800c78e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c792:	d0ed      	beq.n	800c770 <_dtoa_r+0xa58>
 800c794:	9a00      	ldr	r2, [sp, #0]
 800c796:	f108 0301 	add.w	r3, r8, #1
 800c79a:	7013      	strb	r3, [r2, #0]
 800c79c:	e608      	b.n	800c3b0 <_dtoa_r+0x698>
 800c79e:	9b07      	ldr	r3, [sp, #28]
 800c7a0:	9a07      	ldr	r2, [sp, #28]
 800c7a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d028      	beq.n	800c7fe <_dtoa_r+0xae6>
 800c7ac:	4649      	mov	r1, r9
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	220a      	movs	r2, #10
 800c7b2:	4658      	mov	r0, fp
 800c7b4:	f000 f9d6 	bl	800cb64 <__multadd>
 800c7b8:	42af      	cmp	r7, r5
 800c7ba:	4681      	mov	r9, r0
 800c7bc:	f04f 0300 	mov.w	r3, #0
 800c7c0:	f04f 020a 	mov.w	r2, #10
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	d107      	bne.n	800c7da <_dtoa_r+0xac2>
 800c7ca:	f000 f9cb 	bl	800cb64 <__multadd>
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	9b07      	ldr	r3, [sp, #28]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	e774      	b.n	800c6c4 <_dtoa_r+0x9ac>
 800c7da:	f000 f9c3 	bl	800cb64 <__multadd>
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	4658      	mov	r0, fp
 800c7e8:	f000 f9bc 	bl	800cb64 <__multadd>
 800c7ec:	4605      	mov	r5, r0
 800c7ee:	e7f0      	b.n	800c7d2 <_dtoa_r+0xaba>
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bfcc      	ite	gt
 800c7f6:	461e      	movgt	r6, r3
 800c7f8:	2601      	movle	r6, #1
 800c7fa:	4456      	add	r6, sl
 800c7fc:	2700      	movs	r7, #0
 800c7fe:	4649      	mov	r1, r9
 800c800:	2201      	movs	r2, #1
 800c802:	4658      	mov	r0, fp
 800c804:	f000 fb5a 	bl	800cebc <__lshift>
 800c808:	4621      	mov	r1, r4
 800c80a:	4681      	mov	r9, r0
 800c80c:	f000 fbc2 	bl	800cf94 <__mcmp>
 800c810:	2800      	cmp	r0, #0
 800c812:	dcb0      	bgt.n	800c776 <_dtoa_r+0xa5e>
 800c814:	d102      	bne.n	800c81c <_dtoa_r+0xb04>
 800c816:	f018 0f01 	tst.w	r8, #1
 800c81a:	d1ac      	bne.n	800c776 <_dtoa_r+0xa5e>
 800c81c:	4633      	mov	r3, r6
 800c81e:	461e      	mov	r6, r3
 800c820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c824:	2a30      	cmp	r2, #48	@ 0x30
 800c826:	d0fa      	beq.n	800c81e <_dtoa_r+0xb06>
 800c828:	e5c2      	b.n	800c3b0 <_dtoa_r+0x698>
 800c82a:	459a      	cmp	sl, r3
 800c82c:	d1a4      	bne.n	800c778 <_dtoa_r+0xa60>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	3301      	adds	r3, #1
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	2331      	movs	r3, #49	@ 0x31
 800c836:	f88a 3000 	strb.w	r3, [sl]
 800c83a:	e5b9      	b.n	800c3b0 <_dtoa_r+0x698>
 800c83c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c83e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c89c <_dtoa_r+0xb84>
 800c842:	b11b      	cbz	r3, 800c84c <_dtoa_r+0xb34>
 800c844:	f10a 0308 	add.w	r3, sl, #8
 800c848:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	4650      	mov	r0, sl
 800c84e:	b019      	add	sp, #100	@ 0x64
 800c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c856:	2b01      	cmp	r3, #1
 800c858:	f77f ae37 	ble.w	800c4ca <_dtoa_r+0x7b2>
 800c85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c860:	2001      	movs	r0, #1
 800c862:	e655      	b.n	800c510 <_dtoa_r+0x7f8>
 800c864:	9b00      	ldr	r3, [sp, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	f77f aed6 	ble.w	800c618 <_dtoa_r+0x900>
 800c86c:	4656      	mov	r6, sl
 800c86e:	4621      	mov	r1, r4
 800c870:	4648      	mov	r0, r9
 800c872:	f7ff f9c8 	bl	800bc06 <quorem>
 800c876:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c87a:	f806 8b01 	strb.w	r8, [r6], #1
 800c87e:	9b00      	ldr	r3, [sp, #0]
 800c880:	eba6 020a 	sub.w	r2, r6, sl
 800c884:	4293      	cmp	r3, r2
 800c886:	ddb3      	ble.n	800c7f0 <_dtoa_r+0xad8>
 800c888:	4649      	mov	r1, r9
 800c88a:	2300      	movs	r3, #0
 800c88c:	220a      	movs	r2, #10
 800c88e:	4658      	mov	r0, fp
 800c890:	f000 f968 	bl	800cb64 <__multadd>
 800c894:	4681      	mov	r9, r0
 800c896:	e7ea      	b.n	800c86e <_dtoa_r+0xb56>
 800c898:	0800dff8 	.word	0x0800dff8
 800c89c:	0800df7c 	.word	0x0800df7c

0800c8a0 <_free_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	2900      	cmp	r1, #0
 800c8a6:	d041      	beq.n	800c92c <_free_r+0x8c>
 800c8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ac:	1f0c      	subs	r4, r1, #4
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfb8      	it	lt
 800c8b2:	18e4      	addlt	r4, r4, r3
 800c8b4:	f000 f8e8 	bl	800ca88 <__malloc_lock>
 800c8b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c930 <_free_r+0x90>)
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	b933      	cbnz	r3, 800c8cc <_free_r+0x2c>
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	6014      	str	r4, [r2, #0]
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c8:	f000 b8e4 	b.w	800ca94 <__malloc_unlock>
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	d908      	bls.n	800c8e2 <_free_r+0x42>
 800c8d0:	6820      	ldr	r0, [r4, #0]
 800c8d2:	1821      	adds	r1, r4, r0
 800c8d4:	428b      	cmp	r3, r1
 800c8d6:	bf01      	itttt	eq
 800c8d8:	6819      	ldreq	r1, [r3, #0]
 800c8da:	685b      	ldreq	r3, [r3, #4]
 800c8dc:	1809      	addeq	r1, r1, r0
 800c8de:	6021      	streq	r1, [r4, #0]
 800c8e0:	e7ed      	b.n	800c8be <_free_r+0x1e>
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	b10b      	cbz	r3, 800c8ec <_free_r+0x4c>
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	d9fa      	bls.n	800c8e2 <_free_r+0x42>
 800c8ec:	6811      	ldr	r1, [r2, #0]
 800c8ee:	1850      	adds	r0, r2, r1
 800c8f0:	42a0      	cmp	r0, r4
 800c8f2:	d10b      	bne.n	800c90c <_free_r+0x6c>
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	4401      	add	r1, r0
 800c8f8:	1850      	adds	r0, r2, r1
 800c8fa:	4283      	cmp	r3, r0
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	d1e0      	bne.n	800c8c2 <_free_r+0x22>
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	6053      	str	r3, [r2, #4]
 800c906:	4408      	add	r0, r1
 800c908:	6010      	str	r0, [r2, #0]
 800c90a:	e7da      	b.n	800c8c2 <_free_r+0x22>
 800c90c:	d902      	bls.n	800c914 <_free_r+0x74>
 800c90e:	230c      	movs	r3, #12
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	e7d6      	b.n	800c8c2 <_free_r+0x22>
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	1821      	adds	r1, r4, r0
 800c918:	428b      	cmp	r3, r1
 800c91a:	bf04      	itt	eq
 800c91c:	6819      	ldreq	r1, [r3, #0]
 800c91e:	685b      	ldreq	r3, [r3, #4]
 800c920:	6063      	str	r3, [r4, #4]
 800c922:	bf04      	itt	eq
 800c924:	1809      	addeq	r1, r1, r0
 800c926:	6021      	streq	r1, [r4, #0]
 800c928:	6054      	str	r4, [r2, #4]
 800c92a:	e7ca      	b.n	800c8c2 <_free_r+0x22>
 800c92c:	bd38      	pop	{r3, r4, r5, pc}
 800c92e:	bf00      	nop
 800c930:	20000ad0 	.word	0x20000ad0

0800c934 <malloc>:
 800c934:	4b02      	ldr	r3, [pc, #8]	@ (800c940 <malloc+0xc>)
 800c936:	4601      	mov	r1, r0
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	f000 b825 	b.w	800c988 <_malloc_r>
 800c93e:	bf00      	nop
 800c940:	20000080 	.word	0x20000080

0800c944 <sbrk_aligned>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4e0f      	ldr	r6, [pc, #60]	@ (800c984 <sbrk_aligned+0x40>)
 800c948:	460c      	mov	r4, r1
 800c94a:	6831      	ldr	r1, [r6, #0]
 800c94c:	4605      	mov	r5, r0
 800c94e:	b911      	cbnz	r1, 800c956 <sbrk_aligned+0x12>
 800c950:	f000 fe9a 	bl	800d688 <_sbrk_r>
 800c954:	6030      	str	r0, [r6, #0]
 800c956:	4621      	mov	r1, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	f000 fe95 	bl	800d688 <_sbrk_r>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d103      	bne.n	800c96a <sbrk_aligned+0x26>
 800c962:	f04f 34ff 	mov.w	r4, #4294967295
 800c966:	4620      	mov	r0, r4
 800c968:	bd70      	pop	{r4, r5, r6, pc}
 800c96a:	1cc4      	adds	r4, r0, #3
 800c96c:	f024 0403 	bic.w	r4, r4, #3
 800c970:	42a0      	cmp	r0, r4
 800c972:	d0f8      	beq.n	800c966 <sbrk_aligned+0x22>
 800c974:	1a21      	subs	r1, r4, r0
 800c976:	4628      	mov	r0, r5
 800c978:	f000 fe86 	bl	800d688 <_sbrk_r>
 800c97c:	3001      	adds	r0, #1
 800c97e:	d1f2      	bne.n	800c966 <sbrk_aligned+0x22>
 800c980:	e7ef      	b.n	800c962 <sbrk_aligned+0x1e>
 800c982:	bf00      	nop
 800c984:	20000acc 	.word	0x20000acc

0800c988 <_malloc_r>:
 800c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	1ccd      	adds	r5, r1, #3
 800c98e:	f025 0503 	bic.w	r5, r5, #3
 800c992:	3508      	adds	r5, #8
 800c994:	2d0c      	cmp	r5, #12
 800c996:	bf38      	it	cc
 800c998:	250c      	movcc	r5, #12
 800c99a:	2d00      	cmp	r5, #0
 800c99c:	4606      	mov	r6, r0
 800c99e:	db01      	blt.n	800c9a4 <_malloc_r+0x1c>
 800c9a0:	42a9      	cmp	r1, r5
 800c9a2:	d904      	bls.n	800c9ae <_malloc_r+0x26>
 800c9a4:	230c      	movs	r3, #12
 800c9a6:	6033      	str	r3, [r6, #0]
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca84 <_malloc_r+0xfc>
 800c9b2:	f000 f869 	bl	800ca88 <__malloc_lock>
 800c9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ba:	461c      	mov	r4, r3
 800c9bc:	bb44      	cbnz	r4, 800ca10 <_malloc_r+0x88>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff ffbf 	bl	800c944 <sbrk_aligned>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	d158      	bne.n	800ca7e <_malloc_r+0xf6>
 800c9cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c9d0:	4627      	mov	r7, r4
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	d143      	bne.n	800ca5e <_malloc_r+0xd6>
 800c9d6:	2c00      	cmp	r4, #0
 800c9d8:	d04b      	beq.n	800ca72 <_malloc_r+0xea>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	4639      	mov	r1, r7
 800c9de:	4630      	mov	r0, r6
 800c9e0:	eb04 0903 	add.w	r9, r4, r3
 800c9e4:	f000 fe50 	bl	800d688 <_sbrk_r>
 800c9e8:	4581      	cmp	r9, r0
 800c9ea:	d142      	bne.n	800ca72 <_malloc_r+0xea>
 800c9ec:	6821      	ldr	r1, [r4, #0]
 800c9ee:	1a6d      	subs	r5, r5, r1
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7ff ffa6 	bl	800c944 <sbrk_aligned>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	d03a      	beq.n	800ca72 <_malloc_r+0xea>
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	442b      	add	r3, r5
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	f8d8 3000 	ldr.w	r3, [r8]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	bb62      	cbnz	r2, 800ca64 <_malloc_r+0xdc>
 800ca0a:	f8c8 7000 	str.w	r7, [r8]
 800ca0e:	e00f      	b.n	800ca30 <_malloc_r+0xa8>
 800ca10:	6822      	ldr	r2, [r4, #0]
 800ca12:	1b52      	subs	r2, r2, r5
 800ca14:	d420      	bmi.n	800ca58 <_malloc_r+0xd0>
 800ca16:	2a0b      	cmp	r2, #11
 800ca18:	d917      	bls.n	800ca4a <_malloc_r+0xc2>
 800ca1a:	1961      	adds	r1, r4, r5
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	6025      	str	r5, [r4, #0]
 800ca20:	bf18      	it	ne
 800ca22:	6059      	strne	r1, [r3, #4]
 800ca24:	6863      	ldr	r3, [r4, #4]
 800ca26:	bf08      	it	eq
 800ca28:	f8c8 1000 	streq.w	r1, [r8]
 800ca2c:	5162      	str	r2, [r4, r5]
 800ca2e:	604b      	str	r3, [r1, #4]
 800ca30:	4630      	mov	r0, r6
 800ca32:	f000 f82f 	bl	800ca94 <__malloc_unlock>
 800ca36:	f104 000b 	add.w	r0, r4, #11
 800ca3a:	1d23      	adds	r3, r4, #4
 800ca3c:	f020 0007 	bic.w	r0, r0, #7
 800ca40:	1ac2      	subs	r2, r0, r3
 800ca42:	bf1c      	itt	ne
 800ca44:	1a1b      	subne	r3, r3, r0
 800ca46:	50a3      	strne	r3, [r4, r2]
 800ca48:	e7af      	b.n	800c9aa <_malloc_r+0x22>
 800ca4a:	6862      	ldr	r2, [r4, #4]
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	bf0c      	ite	eq
 800ca50:	f8c8 2000 	streq.w	r2, [r8]
 800ca54:	605a      	strne	r2, [r3, #4]
 800ca56:	e7eb      	b.n	800ca30 <_malloc_r+0xa8>
 800ca58:	4623      	mov	r3, r4
 800ca5a:	6864      	ldr	r4, [r4, #4]
 800ca5c:	e7ae      	b.n	800c9bc <_malloc_r+0x34>
 800ca5e:	463c      	mov	r4, r7
 800ca60:	687f      	ldr	r7, [r7, #4]
 800ca62:	e7b6      	b.n	800c9d2 <_malloc_r+0x4a>
 800ca64:	461a      	mov	r2, r3
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d1fb      	bne.n	800ca64 <_malloc_r+0xdc>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6053      	str	r3, [r2, #4]
 800ca70:	e7de      	b.n	800ca30 <_malloc_r+0xa8>
 800ca72:	230c      	movs	r3, #12
 800ca74:	6033      	str	r3, [r6, #0]
 800ca76:	4630      	mov	r0, r6
 800ca78:	f000 f80c 	bl	800ca94 <__malloc_unlock>
 800ca7c:	e794      	b.n	800c9a8 <_malloc_r+0x20>
 800ca7e:	6005      	str	r5, [r0, #0]
 800ca80:	e7d6      	b.n	800ca30 <_malloc_r+0xa8>
 800ca82:	bf00      	nop
 800ca84:	20000ad0 	.word	0x20000ad0

0800ca88 <__malloc_lock>:
 800ca88:	4801      	ldr	r0, [pc, #4]	@ (800ca90 <__malloc_lock+0x8>)
 800ca8a:	f7ff b8ba 	b.w	800bc02 <__retarget_lock_acquire_recursive>
 800ca8e:	bf00      	nop
 800ca90:	20000ac8 	.word	0x20000ac8

0800ca94 <__malloc_unlock>:
 800ca94:	4801      	ldr	r0, [pc, #4]	@ (800ca9c <__malloc_unlock+0x8>)
 800ca96:	f7ff b8b5 	b.w	800bc04 <__retarget_lock_release_recursive>
 800ca9a:	bf00      	nop
 800ca9c:	20000ac8 	.word	0x20000ac8

0800caa0 <_Balloc>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	69c6      	ldr	r6, [r0, #28]
 800caa4:	4604      	mov	r4, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	b976      	cbnz	r6, 800cac8 <_Balloc+0x28>
 800caaa:	2010      	movs	r0, #16
 800caac:	f7ff ff42 	bl	800c934 <malloc>
 800cab0:	4602      	mov	r2, r0
 800cab2:	61e0      	str	r0, [r4, #28]
 800cab4:	b920      	cbnz	r0, 800cac0 <_Balloc+0x20>
 800cab6:	4b18      	ldr	r3, [pc, #96]	@ (800cb18 <_Balloc+0x78>)
 800cab8:	4818      	ldr	r0, [pc, #96]	@ (800cb1c <_Balloc+0x7c>)
 800caba:	216b      	movs	r1, #107	@ 0x6b
 800cabc:	f000 fe02 	bl	800d6c4 <__assert_func>
 800cac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cac4:	6006      	str	r6, [r0, #0]
 800cac6:	60c6      	str	r6, [r0, #12]
 800cac8:	69e6      	ldr	r6, [r4, #28]
 800caca:	68f3      	ldr	r3, [r6, #12]
 800cacc:	b183      	cbz	r3, 800caf0 <_Balloc+0x50>
 800cace:	69e3      	ldr	r3, [r4, #28]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cad6:	b9b8      	cbnz	r0, 800cb08 <_Balloc+0x68>
 800cad8:	2101      	movs	r1, #1
 800cada:	fa01 f605 	lsl.w	r6, r1, r5
 800cade:	1d72      	adds	r2, r6, #5
 800cae0:	0092      	lsls	r2, r2, #2
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fe0c 	bl	800d700 <_calloc_r>
 800cae8:	b160      	cbz	r0, 800cb04 <_Balloc+0x64>
 800caea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caee:	e00e      	b.n	800cb0e <_Balloc+0x6e>
 800caf0:	2221      	movs	r2, #33	@ 0x21
 800caf2:	2104      	movs	r1, #4
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 fe03 	bl	800d700 <_calloc_r>
 800cafa:	69e3      	ldr	r3, [r4, #28]
 800cafc:	60f0      	str	r0, [r6, #12]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e4      	bne.n	800cace <_Balloc+0x2e>
 800cb04:	2000      	movs	r0, #0
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	6802      	ldr	r2, [r0, #0]
 800cb0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb14:	e7f7      	b.n	800cb06 <_Balloc+0x66>
 800cb16:	bf00      	nop
 800cb18:	0800df89 	.word	0x0800df89
 800cb1c:	0800e009 	.word	0x0800e009

0800cb20 <_Bfree>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	69c6      	ldr	r6, [r0, #28]
 800cb24:	4605      	mov	r5, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	b976      	cbnz	r6, 800cb48 <_Bfree+0x28>
 800cb2a:	2010      	movs	r0, #16
 800cb2c:	f7ff ff02 	bl	800c934 <malloc>
 800cb30:	4602      	mov	r2, r0
 800cb32:	61e8      	str	r0, [r5, #28]
 800cb34:	b920      	cbnz	r0, 800cb40 <_Bfree+0x20>
 800cb36:	4b09      	ldr	r3, [pc, #36]	@ (800cb5c <_Bfree+0x3c>)
 800cb38:	4809      	ldr	r0, [pc, #36]	@ (800cb60 <_Bfree+0x40>)
 800cb3a:	218f      	movs	r1, #143	@ 0x8f
 800cb3c:	f000 fdc2 	bl	800d6c4 <__assert_func>
 800cb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb44:	6006      	str	r6, [r0, #0]
 800cb46:	60c6      	str	r6, [r0, #12]
 800cb48:	b13c      	cbz	r4, 800cb5a <_Bfree+0x3a>
 800cb4a:	69eb      	ldr	r3, [r5, #28]
 800cb4c:	6862      	ldr	r2, [r4, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb54:	6021      	str	r1, [r4, #0]
 800cb56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
 800cb5c:	0800df89 	.word	0x0800df89
 800cb60:	0800e009 	.word	0x0800e009

0800cb64 <__multadd>:
 800cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb68:	690d      	ldr	r5, [r1, #16]
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	461e      	mov	r6, r3
 800cb70:	f101 0c14 	add.w	ip, r1, #20
 800cb74:	2000      	movs	r0, #0
 800cb76:	f8dc 3000 	ldr.w	r3, [ip]
 800cb7a:	b299      	uxth	r1, r3
 800cb7c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb80:	0c1e      	lsrs	r6, r3, #16
 800cb82:	0c0b      	lsrs	r3, r1, #16
 800cb84:	fb02 3306 	mla	r3, r2, r6, r3
 800cb88:	b289      	uxth	r1, r1
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb90:	4285      	cmp	r5, r0
 800cb92:	f84c 1b04 	str.w	r1, [ip], #4
 800cb96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb9a:	dcec      	bgt.n	800cb76 <__multadd+0x12>
 800cb9c:	b30e      	cbz	r6, 800cbe2 <__multadd+0x7e>
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	42ab      	cmp	r3, r5
 800cba2:	dc19      	bgt.n	800cbd8 <__multadd+0x74>
 800cba4:	6861      	ldr	r1, [r4, #4]
 800cba6:	4638      	mov	r0, r7
 800cba8:	3101      	adds	r1, #1
 800cbaa:	f7ff ff79 	bl	800caa0 <_Balloc>
 800cbae:	4680      	mov	r8, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <__multadd+0x5a>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe8 <__multadd+0x84>)
 800cbb6:	480d      	ldr	r0, [pc, #52]	@ (800cbec <__multadd+0x88>)
 800cbb8:	21ba      	movs	r1, #186	@ 0xba
 800cbba:	f000 fd83 	bl	800d6c4 <__assert_func>
 800cbbe:	6922      	ldr	r2, [r4, #16]
 800cbc0:	3202      	adds	r2, #2
 800cbc2:	f104 010c 	add.w	r1, r4, #12
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	300c      	adds	r0, #12
 800cbca:	f000 fd6d 	bl	800d6a8 <memcpy>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff ffa5 	bl	800cb20 <_Bfree>
 800cbd6:	4644      	mov	r4, r8
 800cbd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbdc:	3501      	adds	r5, #1
 800cbde:	615e      	str	r6, [r3, #20]
 800cbe0:	6125      	str	r5, [r4, #16]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	0800dff8 	.word	0x0800dff8
 800cbec:	0800e009 	.word	0x0800e009

0800cbf0 <__hi0bits>:
 800cbf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	bf36      	itet	cc
 800cbf8:	0403      	lslcc	r3, r0, #16
 800cbfa:	2000      	movcs	r0, #0
 800cbfc:	2010      	movcc	r0, #16
 800cbfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc02:	bf3c      	itt	cc
 800cc04:	021b      	lslcc	r3, r3, #8
 800cc06:	3008      	addcc	r0, #8
 800cc08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc0c:	bf3c      	itt	cc
 800cc0e:	011b      	lslcc	r3, r3, #4
 800cc10:	3004      	addcc	r0, #4
 800cc12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc16:	bf3c      	itt	cc
 800cc18:	009b      	lslcc	r3, r3, #2
 800cc1a:	3002      	addcc	r0, #2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	db05      	blt.n	800cc2c <__hi0bits+0x3c>
 800cc20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc24:	f100 0001 	add.w	r0, r0, #1
 800cc28:	bf08      	it	eq
 800cc2a:	2020      	moveq	r0, #32
 800cc2c:	4770      	bx	lr

0800cc2e <__lo0bits>:
 800cc2e:	6803      	ldr	r3, [r0, #0]
 800cc30:	4602      	mov	r2, r0
 800cc32:	f013 0007 	ands.w	r0, r3, #7
 800cc36:	d00b      	beq.n	800cc50 <__lo0bits+0x22>
 800cc38:	07d9      	lsls	r1, r3, #31
 800cc3a:	d421      	bmi.n	800cc80 <__lo0bits+0x52>
 800cc3c:	0798      	lsls	r0, r3, #30
 800cc3e:	bf49      	itett	mi
 800cc40:	085b      	lsrmi	r3, r3, #1
 800cc42:	089b      	lsrpl	r3, r3, #2
 800cc44:	2001      	movmi	r0, #1
 800cc46:	6013      	strmi	r3, [r2, #0]
 800cc48:	bf5c      	itt	pl
 800cc4a:	6013      	strpl	r3, [r2, #0]
 800cc4c:	2002      	movpl	r0, #2
 800cc4e:	4770      	bx	lr
 800cc50:	b299      	uxth	r1, r3
 800cc52:	b909      	cbnz	r1, 800cc58 <__lo0bits+0x2a>
 800cc54:	0c1b      	lsrs	r3, r3, #16
 800cc56:	2010      	movs	r0, #16
 800cc58:	b2d9      	uxtb	r1, r3
 800cc5a:	b909      	cbnz	r1, 800cc60 <__lo0bits+0x32>
 800cc5c:	3008      	adds	r0, #8
 800cc5e:	0a1b      	lsrs	r3, r3, #8
 800cc60:	0719      	lsls	r1, r3, #28
 800cc62:	bf04      	itt	eq
 800cc64:	091b      	lsreq	r3, r3, #4
 800cc66:	3004      	addeq	r0, #4
 800cc68:	0799      	lsls	r1, r3, #30
 800cc6a:	bf04      	itt	eq
 800cc6c:	089b      	lsreq	r3, r3, #2
 800cc6e:	3002      	addeq	r0, #2
 800cc70:	07d9      	lsls	r1, r3, #31
 800cc72:	d403      	bmi.n	800cc7c <__lo0bits+0x4e>
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	f100 0001 	add.w	r0, r0, #1
 800cc7a:	d003      	beq.n	800cc84 <__lo0bits+0x56>
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	4770      	bx	lr
 800cc80:	2000      	movs	r0, #0
 800cc82:	4770      	bx	lr
 800cc84:	2020      	movs	r0, #32
 800cc86:	4770      	bx	lr

0800cc88 <__i2b>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	f7ff ff07 	bl	800caa0 <_Balloc>
 800cc92:	4602      	mov	r2, r0
 800cc94:	b928      	cbnz	r0, 800cca2 <__i2b+0x1a>
 800cc96:	4b05      	ldr	r3, [pc, #20]	@ (800ccac <__i2b+0x24>)
 800cc98:	4805      	ldr	r0, [pc, #20]	@ (800ccb0 <__i2b+0x28>)
 800cc9a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc9e:	f000 fd11 	bl	800d6c4 <__assert_func>
 800cca2:	2301      	movs	r3, #1
 800cca4:	6144      	str	r4, [r0, #20]
 800cca6:	6103      	str	r3, [r0, #16]
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800dff8 	.word	0x0800dff8
 800ccb0:	0800e009 	.word	0x0800e009

0800ccb4 <__multiply>:
 800ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	4614      	mov	r4, r2
 800ccba:	690a      	ldr	r2, [r1, #16]
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	bfa8      	it	ge
 800ccc2:	4623      	movge	r3, r4
 800ccc4:	460f      	mov	r7, r1
 800ccc6:	bfa4      	itt	ge
 800ccc8:	460c      	movge	r4, r1
 800ccca:	461f      	movge	r7, r3
 800cccc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ccd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ccd4:	68a3      	ldr	r3, [r4, #8]
 800ccd6:	6861      	ldr	r1, [r4, #4]
 800ccd8:	eb0a 0609 	add.w	r6, sl, r9
 800ccdc:	42b3      	cmp	r3, r6
 800ccde:	b085      	sub	sp, #20
 800cce0:	bfb8      	it	lt
 800cce2:	3101      	addlt	r1, #1
 800cce4:	f7ff fedc 	bl	800caa0 <_Balloc>
 800cce8:	b930      	cbnz	r0, 800ccf8 <__multiply+0x44>
 800ccea:	4602      	mov	r2, r0
 800ccec:	4b44      	ldr	r3, [pc, #272]	@ (800ce00 <__multiply+0x14c>)
 800ccee:	4845      	ldr	r0, [pc, #276]	@ (800ce04 <__multiply+0x150>)
 800ccf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccf4:	f000 fce6 	bl	800d6c4 <__assert_func>
 800ccf8:	f100 0514 	add.w	r5, r0, #20
 800ccfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd00:	462b      	mov	r3, r5
 800cd02:	2200      	movs	r2, #0
 800cd04:	4543      	cmp	r3, r8
 800cd06:	d321      	bcc.n	800cd4c <__multiply+0x98>
 800cd08:	f107 0114 	add.w	r1, r7, #20
 800cd0c:	f104 0214 	add.w	r2, r4, #20
 800cd10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd18:	9302      	str	r3, [sp, #8]
 800cd1a:	1b13      	subs	r3, r2, r4
 800cd1c:	3b15      	subs	r3, #21
 800cd1e:	f023 0303 	bic.w	r3, r3, #3
 800cd22:	3304      	adds	r3, #4
 800cd24:	f104 0715 	add.w	r7, r4, #21
 800cd28:	42ba      	cmp	r2, r7
 800cd2a:	bf38      	it	cc
 800cd2c:	2304      	movcc	r3, #4
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	9b02      	ldr	r3, [sp, #8]
 800cd32:	9103      	str	r1, [sp, #12]
 800cd34:	428b      	cmp	r3, r1
 800cd36:	d80c      	bhi.n	800cd52 <__multiply+0x9e>
 800cd38:	2e00      	cmp	r6, #0
 800cd3a:	dd03      	ble.n	800cd44 <__multiply+0x90>
 800cd3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d05b      	beq.n	800cdfc <__multiply+0x148>
 800cd44:	6106      	str	r6, [r0, #16]
 800cd46:	b005      	add	sp, #20
 800cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4c:	f843 2b04 	str.w	r2, [r3], #4
 800cd50:	e7d8      	b.n	800cd04 <__multiply+0x50>
 800cd52:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd56:	f1ba 0f00 	cmp.w	sl, #0
 800cd5a:	d024      	beq.n	800cda6 <__multiply+0xf2>
 800cd5c:	f104 0e14 	add.w	lr, r4, #20
 800cd60:	46a9      	mov	r9, r5
 800cd62:	f04f 0c00 	mov.w	ip, #0
 800cd66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd6a:	f8d9 3000 	ldr.w	r3, [r9]
 800cd6e:	fa1f fb87 	uxth.w	fp, r7
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cd7c:	f8d9 7000 	ldr.w	r7, [r9]
 800cd80:	4463      	add	r3, ip
 800cd82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd86:	fb0a c70b 	mla	r7, sl, fp, ip
 800cd8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd94:	4572      	cmp	r2, lr
 800cd96:	f849 3b04 	str.w	r3, [r9], #4
 800cd9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd9e:	d8e2      	bhi.n	800cd66 <__multiply+0xb2>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	f845 c003 	str.w	ip, [r5, r3]
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdac:	3104      	adds	r1, #4
 800cdae:	f1b9 0f00 	cmp.w	r9, #0
 800cdb2:	d021      	beq.n	800cdf8 <__multiply+0x144>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	f104 0c14 	add.w	ip, r4, #20
 800cdba:	46ae      	mov	lr, r5
 800cdbc:	f04f 0a00 	mov.w	sl, #0
 800cdc0:	f8bc b000 	ldrh.w	fp, [ip]
 800cdc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cdc8:	fb09 770b 	mla	r7, r9, fp, r7
 800cdcc:	4457      	add	r7, sl
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdd4:	f84e 3b04 	str.w	r3, [lr], #4
 800cdd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cde0:	f8be 3000 	ldrh.w	r3, [lr]
 800cde4:	fb09 330a 	mla	r3, r9, sl, r3
 800cde8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cdec:	4562      	cmp	r2, ip
 800cdee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdf2:	d8e5      	bhi.n	800cdc0 <__multiply+0x10c>
 800cdf4:	9f01      	ldr	r7, [sp, #4]
 800cdf6:	51eb      	str	r3, [r5, r7]
 800cdf8:	3504      	adds	r5, #4
 800cdfa:	e799      	b.n	800cd30 <__multiply+0x7c>
 800cdfc:	3e01      	subs	r6, #1
 800cdfe:	e79b      	b.n	800cd38 <__multiply+0x84>
 800ce00:	0800dff8 	.word	0x0800dff8
 800ce04:	0800e009 	.word	0x0800e009

0800ce08 <__pow5mult>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	f012 0203 	ands.w	r2, r2, #3
 800ce12:	4607      	mov	r7, r0
 800ce14:	460e      	mov	r6, r1
 800ce16:	d007      	beq.n	800ce28 <__pow5mult+0x20>
 800ce18:	4c25      	ldr	r4, [pc, #148]	@ (800ceb0 <__pow5mult+0xa8>)
 800ce1a:	3a01      	subs	r2, #1
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce22:	f7ff fe9f 	bl	800cb64 <__multadd>
 800ce26:	4606      	mov	r6, r0
 800ce28:	10ad      	asrs	r5, r5, #2
 800ce2a:	d03d      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce2c:	69fc      	ldr	r4, [r7, #28]
 800ce2e:	b97c      	cbnz	r4, 800ce50 <__pow5mult+0x48>
 800ce30:	2010      	movs	r0, #16
 800ce32:	f7ff fd7f 	bl	800c934 <malloc>
 800ce36:	4602      	mov	r2, r0
 800ce38:	61f8      	str	r0, [r7, #28]
 800ce3a:	b928      	cbnz	r0, 800ce48 <__pow5mult+0x40>
 800ce3c:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb4 <__pow5mult+0xac>)
 800ce3e:	481e      	ldr	r0, [pc, #120]	@ (800ceb8 <__pow5mult+0xb0>)
 800ce40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce44:	f000 fc3e 	bl	800d6c4 <__assert_func>
 800ce48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce4c:	6004      	str	r4, [r0, #0]
 800ce4e:	60c4      	str	r4, [r0, #12]
 800ce50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce58:	b94c      	cbnz	r4, 800ce6e <__pow5mult+0x66>
 800ce5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f7ff ff12 	bl	800cc88 <__i2b>
 800ce64:	2300      	movs	r3, #0
 800ce66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	f04f 0900 	mov.w	r9, #0
 800ce72:	07eb      	lsls	r3, r5, #31
 800ce74:	d50a      	bpl.n	800ce8c <__pow5mult+0x84>
 800ce76:	4631      	mov	r1, r6
 800ce78:	4622      	mov	r2, r4
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff1a 	bl	800ccb4 <__multiply>
 800ce80:	4631      	mov	r1, r6
 800ce82:	4680      	mov	r8, r0
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7ff fe4b 	bl	800cb20 <_Bfree>
 800ce8a:	4646      	mov	r6, r8
 800ce8c:	106d      	asrs	r5, r5, #1
 800ce8e:	d00b      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	b938      	cbnz	r0, 800cea4 <__pow5mult+0x9c>
 800ce94:	4622      	mov	r2, r4
 800ce96:	4621      	mov	r1, r4
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ff0b 	bl	800ccb4 <__multiply>
 800ce9e:	6020      	str	r0, [r4, #0]
 800cea0:	f8c0 9000 	str.w	r9, [r0]
 800cea4:	4604      	mov	r4, r0
 800cea6:	e7e4      	b.n	800ce72 <__pow5mult+0x6a>
 800cea8:	4630      	mov	r0, r6
 800ceaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceae:	bf00      	nop
 800ceb0:	0800e064 	.word	0x0800e064
 800ceb4:	0800df89 	.word	0x0800df89
 800ceb8:	0800e009 	.word	0x0800e009

0800cebc <__lshift>:
 800cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	460c      	mov	r4, r1
 800cec2:	6849      	ldr	r1, [r1, #4]
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	4607      	mov	r7, r0
 800cece:	4691      	mov	r9, r2
 800ced0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced4:	f108 0601 	add.w	r6, r8, #1
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	db0b      	blt.n	800cef4 <__lshift+0x38>
 800cedc:	4638      	mov	r0, r7
 800cede:	f7ff fddf 	bl	800caa0 <_Balloc>
 800cee2:	4605      	mov	r5, r0
 800cee4:	b948      	cbnz	r0, 800cefa <__lshift+0x3e>
 800cee6:	4602      	mov	r2, r0
 800cee8:	4b28      	ldr	r3, [pc, #160]	@ (800cf8c <__lshift+0xd0>)
 800ceea:	4829      	ldr	r0, [pc, #164]	@ (800cf90 <__lshift+0xd4>)
 800ceec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cef0:	f000 fbe8 	bl	800d6c4 <__assert_func>
 800cef4:	3101      	adds	r1, #1
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	e7ee      	b.n	800ced8 <__lshift+0x1c>
 800cefa:	2300      	movs	r3, #0
 800cefc:	f100 0114 	add.w	r1, r0, #20
 800cf00:	f100 0210 	add.w	r2, r0, #16
 800cf04:	4618      	mov	r0, r3
 800cf06:	4553      	cmp	r3, sl
 800cf08:	db33      	blt.n	800cf72 <__lshift+0xb6>
 800cf0a:	6920      	ldr	r0, [r4, #16]
 800cf0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf10:	f104 0314 	add.w	r3, r4, #20
 800cf14:	f019 091f 	ands.w	r9, r9, #31
 800cf18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf20:	d02b      	beq.n	800cf7a <__lshift+0xbe>
 800cf22:	f1c9 0e20 	rsb	lr, r9, #32
 800cf26:	468a      	mov	sl, r1
 800cf28:	2200      	movs	r2, #0
 800cf2a:	6818      	ldr	r0, [r3, #0]
 800cf2c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf30:	4310      	orrs	r0, r2
 800cf32:	f84a 0b04 	str.w	r0, [sl], #4
 800cf36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3a:	459c      	cmp	ip, r3
 800cf3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf40:	d8f3      	bhi.n	800cf2a <__lshift+0x6e>
 800cf42:	ebac 0304 	sub.w	r3, ip, r4
 800cf46:	3b15      	subs	r3, #21
 800cf48:	f023 0303 	bic.w	r3, r3, #3
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	f104 0015 	add.w	r0, r4, #21
 800cf52:	4584      	cmp	ip, r0
 800cf54:	bf38      	it	cc
 800cf56:	2304      	movcc	r3, #4
 800cf58:	50ca      	str	r2, [r1, r3]
 800cf5a:	b10a      	cbz	r2, 800cf60 <__lshift+0xa4>
 800cf5c:	f108 0602 	add.w	r6, r8, #2
 800cf60:	3e01      	subs	r6, #1
 800cf62:	4638      	mov	r0, r7
 800cf64:	612e      	str	r6, [r5, #16]
 800cf66:	4621      	mov	r1, r4
 800cf68:	f7ff fdda 	bl	800cb20 <_Bfree>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf76:	3301      	adds	r3, #1
 800cf78:	e7c5      	b.n	800cf06 <__lshift+0x4a>
 800cf7a:	3904      	subs	r1, #4
 800cf7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf80:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf84:	459c      	cmp	ip, r3
 800cf86:	d8f9      	bhi.n	800cf7c <__lshift+0xc0>
 800cf88:	e7ea      	b.n	800cf60 <__lshift+0xa4>
 800cf8a:	bf00      	nop
 800cf8c:	0800dff8 	.word	0x0800dff8
 800cf90:	0800e009 	.word	0x0800e009

0800cf94 <__mcmp>:
 800cf94:	690a      	ldr	r2, [r1, #16]
 800cf96:	4603      	mov	r3, r0
 800cf98:	6900      	ldr	r0, [r0, #16]
 800cf9a:	1a80      	subs	r0, r0, r2
 800cf9c:	b530      	push	{r4, r5, lr}
 800cf9e:	d10e      	bne.n	800cfbe <__mcmp+0x2a>
 800cfa0:	3314      	adds	r3, #20
 800cfa2:	3114      	adds	r1, #20
 800cfa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfb4:	4295      	cmp	r5, r2
 800cfb6:	d003      	beq.n	800cfc0 <__mcmp+0x2c>
 800cfb8:	d205      	bcs.n	800cfc6 <__mcmp+0x32>
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	bd30      	pop	{r4, r5, pc}
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	d3f3      	bcc.n	800cfac <__mcmp+0x18>
 800cfc4:	e7fb      	b.n	800cfbe <__mcmp+0x2a>
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e7f9      	b.n	800cfbe <__mcmp+0x2a>
	...

0800cfcc <__mdiff>:
 800cfcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	4614      	mov	r4, r2
 800cfda:	f7ff ffdb 	bl	800cf94 <__mcmp>
 800cfde:	1e05      	subs	r5, r0, #0
 800cfe0:	d112      	bne.n	800d008 <__mdiff+0x3c>
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff fd5b 	bl	800caa0 <_Balloc>
 800cfea:	4602      	mov	r2, r0
 800cfec:	b928      	cbnz	r0, 800cffa <__mdiff+0x2e>
 800cfee:	4b3f      	ldr	r3, [pc, #252]	@ (800d0ec <__mdiff+0x120>)
 800cff0:	f240 2137 	movw	r1, #567	@ 0x237
 800cff4:	483e      	ldr	r0, [pc, #248]	@ (800d0f0 <__mdiff+0x124>)
 800cff6:	f000 fb65 	bl	800d6c4 <__assert_func>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d000:	4610      	mov	r0, r2
 800d002:	b003      	add	sp, #12
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	bfbc      	itt	lt
 800d00a:	464b      	movlt	r3, r9
 800d00c:	46a1      	movlt	r9, r4
 800d00e:	4630      	mov	r0, r6
 800d010:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d014:	bfba      	itte	lt
 800d016:	461c      	movlt	r4, r3
 800d018:	2501      	movlt	r5, #1
 800d01a:	2500      	movge	r5, #0
 800d01c:	f7ff fd40 	bl	800caa0 <_Balloc>
 800d020:	4602      	mov	r2, r0
 800d022:	b918      	cbnz	r0, 800d02c <__mdiff+0x60>
 800d024:	4b31      	ldr	r3, [pc, #196]	@ (800d0ec <__mdiff+0x120>)
 800d026:	f240 2145 	movw	r1, #581	@ 0x245
 800d02a:	e7e3      	b.n	800cff4 <__mdiff+0x28>
 800d02c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d030:	6926      	ldr	r6, [r4, #16]
 800d032:	60c5      	str	r5, [r0, #12]
 800d034:	f109 0310 	add.w	r3, r9, #16
 800d038:	f109 0514 	add.w	r5, r9, #20
 800d03c:	f104 0e14 	add.w	lr, r4, #20
 800d040:	f100 0b14 	add.w	fp, r0, #20
 800d044:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d048:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	46d9      	mov	r9, fp
 800d050:	f04f 0c00 	mov.w	ip, #0
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d05a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	fa1f f38a 	uxth.w	r3, sl
 800d064:	4619      	mov	r1, r3
 800d066:	b283      	uxth	r3, r0
 800d068:	1acb      	subs	r3, r1, r3
 800d06a:	0c00      	lsrs	r0, r0, #16
 800d06c:	4463      	add	r3, ip
 800d06e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d072:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d076:	b29b      	uxth	r3, r3
 800d078:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d07c:	4576      	cmp	r6, lr
 800d07e:	f849 3b04 	str.w	r3, [r9], #4
 800d082:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d086:	d8e5      	bhi.n	800d054 <__mdiff+0x88>
 800d088:	1b33      	subs	r3, r6, r4
 800d08a:	3b15      	subs	r3, #21
 800d08c:	f023 0303 	bic.w	r3, r3, #3
 800d090:	3415      	adds	r4, #21
 800d092:	3304      	adds	r3, #4
 800d094:	42a6      	cmp	r6, r4
 800d096:	bf38      	it	cc
 800d098:	2304      	movcc	r3, #4
 800d09a:	441d      	add	r5, r3
 800d09c:	445b      	add	r3, fp
 800d09e:	461e      	mov	r6, r3
 800d0a0:	462c      	mov	r4, r5
 800d0a2:	4544      	cmp	r4, r8
 800d0a4:	d30e      	bcc.n	800d0c4 <__mdiff+0xf8>
 800d0a6:	f108 0103 	add.w	r1, r8, #3
 800d0aa:	1b49      	subs	r1, r1, r5
 800d0ac:	f021 0103 	bic.w	r1, r1, #3
 800d0b0:	3d03      	subs	r5, #3
 800d0b2:	45a8      	cmp	r8, r5
 800d0b4:	bf38      	it	cc
 800d0b6:	2100      	movcc	r1, #0
 800d0b8:	440b      	add	r3, r1
 800d0ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0be:	b191      	cbz	r1, 800d0e6 <__mdiff+0x11a>
 800d0c0:	6117      	str	r7, [r2, #16]
 800d0c2:	e79d      	b.n	800d000 <__mdiff+0x34>
 800d0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0c8:	46e6      	mov	lr, ip
 800d0ca:	0c08      	lsrs	r0, r1, #16
 800d0cc:	fa1c fc81 	uxtah	ip, ip, r1
 800d0d0:	4471      	add	r1, lr
 800d0d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0d6:	b289      	uxth	r1, r1
 800d0d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0dc:	f846 1b04 	str.w	r1, [r6], #4
 800d0e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0e4:	e7dd      	b.n	800d0a2 <__mdiff+0xd6>
 800d0e6:	3f01      	subs	r7, #1
 800d0e8:	e7e7      	b.n	800d0ba <__mdiff+0xee>
 800d0ea:	bf00      	nop
 800d0ec:	0800dff8 	.word	0x0800dff8
 800d0f0:	0800e009 	.word	0x0800e009

0800d0f4 <__d2b>:
 800d0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0f8:	460f      	mov	r7, r1
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	ec59 8b10 	vmov	r8, r9, d0
 800d100:	4616      	mov	r6, r2
 800d102:	f7ff fccd 	bl	800caa0 <_Balloc>
 800d106:	4604      	mov	r4, r0
 800d108:	b930      	cbnz	r0, 800d118 <__d2b+0x24>
 800d10a:	4602      	mov	r2, r0
 800d10c:	4b23      	ldr	r3, [pc, #140]	@ (800d19c <__d2b+0xa8>)
 800d10e:	4824      	ldr	r0, [pc, #144]	@ (800d1a0 <__d2b+0xac>)
 800d110:	f240 310f 	movw	r1, #783	@ 0x30f
 800d114:	f000 fad6 	bl	800d6c4 <__assert_func>
 800d118:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d11c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d120:	b10d      	cbz	r5, 800d126 <__d2b+0x32>
 800d122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	f1b8 0300 	subs.w	r3, r8, #0
 800d12c:	d023      	beq.n	800d176 <__d2b+0x82>
 800d12e:	4668      	mov	r0, sp
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	f7ff fd7c 	bl	800cc2e <__lo0bits>
 800d136:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d13a:	b1d0      	cbz	r0, 800d172 <__d2b+0x7e>
 800d13c:	f1c0 0320 	rsb	r3, r0, #32
 800d140:	fa02 f303 	lsl.w	r3, r2, r3
 800d144:	430b      	orrs	r3, r1
 800d146:	40c2      	lsrs	r2, r0
 800d148:	6163      	str	r3, [r4, #20]
 800d14a:	9201      	str	r2, [sp, #4]
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	61a3      	str	r3, [r4, #24]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bf0c      	ite	eq
 800d154:	2201      	moveq	r2, #1
 800d156:	2202      	movne	r2, #2
 800d158:	6122      	str	r2, [r4, #16]
 800d15a:	b1a5      	cbz	r5, 800d186 <__d2b+0x92>
 800d15c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d160:	4405      	add	r5, r0
 800d162:	603d      	str	r5, [r7, #0]
 800d164:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d168:	6030      	str	r0, [r6, #0]
 800d16a:	4620      	mov	r0, r4
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d172:	6161      	str	r1, [r4, #20]
 800d174:	e7ea      	b.n	800d14c <__d2b+0x58>
 800d176:	a801      	add	r0, sp, #4
 800d178:	f7ff fd59 	bl	800cc2e <__lo0bits>
 800d17c:	9b01      	ldr	r3, [sp, #4]
 800d17e:	6163      	str	r3, [r4, #20]
 800d180:	3020      	adds	r0, #32
 800d182:	2201      	movs	r2, #1
 800d184:	e7e8      	b.n	800d158 <__d2b+0x64>
 800d186:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d18a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d18e:	6038      	str	r0, [r7, #0]
 800d190:	6918      	ldr	r0, [r3, #16]
 800d192:	f7ff fd2d 	bl	800cbf0 <__hi0bits>
 800d196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d19a:	e7e5      	b.n	800d168 <__d2b+0x74>
 800d19c:	0800dff8 	.word	0x0800dff8
 800d1a0:	0800e009 	.word	0x0800e009

0800d1a4 <__sfputc_r>:
 800d1a4:	6893      	ldr	r3, [r2, #8]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	b410      	push	{r4}
 800d1ac:	6093      	str	r3, [r2, #8]
 800d1ae:	da08      	bge.n	800d1c2 <__sfputc_r+0x1e>
 800d1b0:	6994      	ldr	r4, [r2, #24]
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	db01      	blt.n	800d1ba <__sfputc_r+0x16>
 800d1b6:	290a      	cmp	r1, #10
 800d1b8:	d103      	bne.n	800d1c2 <__sfputc_r+0x1e>
 800d1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1be:	f7fe bc0e 	b.w	800b9de <__swbuf_r>
 800d1c2:	6813      	ldr	r3, [r2, #0]
 800d1c4:	1c58      	adds	r0, r3, #1
 800d1c6:	6010      	str	r0, [r2, #0]
 800d1c8:	7019      	strb	r1, [r3, #0]
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <__sfputs_r>:
 800d1d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	460f      	mov	r7, r1
 800d1d8:	4614      	mov	r4, r2
 800d1da:	18d5      	adds	r5, r2, r3
 800d1dc:	42ac      	cmp	r4, r5
 800d1de:	d101      	bne.n	800d1e4 <__sfputs_r+0x12>
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	e007      	b.n	800d1f4 <__sfputs_r+0x22>
 800d1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e8:	463a      	mov	r2, r7
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ffda 	bl	800d1a4 <__sfputc_r>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d1f3      	bne.n	800d1dc <__sfputs_r+0xa>
 800d1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1f8 <_vfiprintf_r>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	460d      	mov	r5, r1
 800d1fe:	b09d      	sub	sp, #116	@ 0x74
 800d200:	4614      	mov	r4, r2
 800d202:	4698      	mov	r8, r3
 800d204:	4606      	mov	r6, r0
 800d206:	b118      	cbz	r0, 800d210 <_vfiprintf_r+0x18>
 800d208:	6a03      	ldr	r3, [r0, #32]
 800d20a:	b90b      	cbnz	r3, 800d210 <_vfiprintf_r+0x18>
 800d20c:	f7fe fafe 	bl	800b80c <__sinit>
 800d210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d212:	07d9      	lsls	r1, r3, #31
 800d214:	d405      	bmi.n	800d222 <_vfiprintf_r+0x2a>
 800d216:	89ab      	ldrh	r3, [r5, #12]
 800d218:	059a      	lsls	r2, r3, #22
 800d21a:	d402      	bmi.n	800d222 <_vfiprintf_r+0x2a>
 800d21c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d21e:	f7fe fcf0 	bl	800bc02 <__retarget_lock_acquire_recursive>
 800d222:	89ab      	ldrh	r3, [r5, #12]
 800d224:	071b      	lsls	r3, r3, #28
 800d226:	d501      	bpl.n	800d22c <_vfiprintf_r+0x34>
 800d228:	692b      	ldr	r3, [r5, #16]
 800d22a:	b99b      	cbnz	r3, 800d254 <_vfiprintf_r+0x5c>
 800d22c:	4629      	mov	r1, r5
 800d22e:	4630      	mov	r0, r6
 800d230:	f7fe fc14 	bl	800ba5c <__swsetup_r>
 800d234:	b170      	cbz	r0, 800d254 <_vfiprintf_r+0x5c>
 800d236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d238:	07dc      	lsls	r4, r3, #31
 800d23a:	d504      	bpl.n	800d246 <_vfiprintf_r+0x4e>
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295
 800d240:	b01d      	add	sp, #116	@ 0x74
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d246:	89ab      	ldrh	r3, [r5, #12]
 800d248:	0598      	lsls	r0, r3, #22
 800d24a:	d4f7      	bmi.n	800d23c <_vfiprintf_r+0x44>
 800d24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d24e:	f7fe fcd9 	bl	800bc04 <__retarget_lock_release_recursive>
 800d252:	e7f3      	b.n	800d23c <_vfiprintf_r+0x44>
 800d254:	2300      	movs	r3, #0
 800d256:	9309      	str	r3, [sp, #36]	@ 0x24
 800d258:	2320      	movs	r3, #32
 800d25a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d25e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d262:	2330      	movs	r3, #48	@ 0x30
 800d264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d414 <_vfiprintf_r+0x21c>
 800d268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d26c:	f04f 0901 	mov.w	r9, #1
 800d270:	4623      	mov	r3, r4
 800d272:	469a      	mov	sl, r3
 800d274:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d278:	b10a      	cbz	r2, 800d27e <_vfiprintf_r+0x86>
 800d27a:	2a25      	cmp	r2, #37	@ 0x25
 800d27c:	d1f9      	bne.n	800d272 <_vfiprintf_r+0x7a>
 800d27e:	ebba 0b04 	subs.w	fp, sl, r4
 800d282:	d00b      	beq.n	800d29c <_vfiprintf_r+0xa4>
 800d284:	465b      	mov	r3, fp
 800d286:	4622      	mov	r2, r4
 800d288:	4629      	mov	r1, r5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7ff ffa1 	bl	800d1d2 <__sfputs_r>
 800d290:	3001      	adds	r0, #1
 800d292:	f000 80a7 	beq.w	800d3e4 <_vfiprintf_r+0x1ec>
 800d296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d298:	445a      	add	r2, fp
 800d29a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d29c:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f000 809f 	beq.w	800d3e4 <_vfiprintf_r+0x1ec>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2b0:	f10a 0a01 	add.w	sl, sl, #1
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	9307      	str	r3, [sp, #28]
 800d2b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2be:	4654      	mov	r4, sl
 800d2c0:	2205      	movs	r2, #5
 800d2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c6:	4853      	ldr	r0, [pc, #332]	@ (800d414 <_vfiprintf_r+0x21c>)
 800d2c8:	f7f2 ff9a 	bl	8000200 <memchr>
 800d2cc:	9a04      	ldr	r2, [sp, #16]
 800d2ce:	b9d8      	cbnz	r0, 800d308 <_vfiprintf_r+0x110>
 800d2d0:	06d1      	lsls	r1, r2, #27
 800d2d2:	bf44      	itt	mi
 800d2d4:	2320      	movmi	r3, #32
 800d2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2da:	0713      	lsls	r3, r2, #28
 800d2dc:	bf44      	itt	mi
 800d2de:	232b      	movmi	r3, #43	@ 0x2b
 800d2e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2ea:	d015      	beq.n	800d318 <_vfiprintf_r+0x120>
 800d2ec:	9a07      	ldr	r2, [sp, #28]
 800d2ee:	4654      	mov	r4, sl
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	f04f 0c0a 	mov.w	ip, #10
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2fc:	3b30      	subs	r3, #48	@ 0x30
 800d2fe:	2b09      	cmp	r3, #9
 800d300:	d94b      	bls.n	800d39a <_vfiprintf_r+0x1a2>
 800d302:	b1b0      	cbz	r0, 800d332 <_vfiprintf_r+0x13a>
 800d304:	9207      	str	r2, [sp, #28]
 800d306:	e014      	b.n	800d332 <_vfiprintf_r+0x13a>
 800d308:	eba0 0308 	sub.w	r3, r0, r8
 800d30c:	fa09 f303 	lsl.w	r3, r9, r3
 800d310:	4313      	orrs	r3, r2
 800d312:	9304      	str	r3, [sp, #16]
 800d314:	46a2      	mov	sl, r4
 800d316:	e7d2      	b.n	800d2be <_vfiprintf_r+0xc6>
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	1d19      	adds	r1, r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	9103      	str	r1, [sp, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfbb      	ittet	lt
 800d324:	425b      	neglt	r3, r3
 800d326:	f042 0202 	orrlt.w	r2, r2, #2
 800d32a:	9307      	strge	r3, [sp, #28]
 800d32c:	9307      	strlt	r3, [sp, #28]
 800d32e:	bfb8      	it	lt
 800d330:	9204      	strlt	r2, [sp, #16]
 800d332:	7823      	ldrb	r3, [r4, #0]
 800d334:	2b2e      	cmp	r3, #46	@ 0x2e
 800d336:	d10a      	bne.n	800d34e <_vfiprintf_r+0x156>
 800d338:	7863      	ldrb	r3, [r4, #1]
 800d33a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d33c:	d132      	bne.n	800d3a4 <_vfiprintf_r+0x1ac>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	1d1a      	adds	r2, r3, #4
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	9203      	str	r2, [sp, #12]
 800d346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d34a:	3402      	adds	r4, #2
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d424 <_vfiprintf_r+0x22c>
 800d352:	7821      	ldrb	r1, [r4, #0]
 800d354:	2203      	movs	r2, #3
 800d356:	4650      	mov	r0, sl
 800d358:	f7f2 ff52 	bl	8000200 <memchr>
 800d35c:	b138      	cbz	r0, 800d36e <_vfiprintf_r+0x176>
 800d35e:	9b04      	ldr	r3, [sp, #16]
 800d360:	eba0 000a 	sub.w	r0, r0, sl
 800d364:	2240      	movs	r2, #64	@ 0x40
 800d366:	4082      	lsls	r2, r0
 800d368:	4313      	orrs	r3, r2
 800d36a:	3401      	adds	r4, #1
 800d36c:	9304      	str	r3, [sp, #16]
 800d36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d372:	4829      	ldr	r0, [pc, #164]	@ (800d418 <_vfiprintf_r+0x220>)
 800d374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d378:	2206      	movs	r2, #6
 800d37a:	f7f2 ff41 	bl	8000200 <memchr>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d03f      	beq.n	800d402 <_vfiprintf_r+0x20a>
 800d382:	4b26      	ldr	r3, [pc, #152]	@ (800d41c <_vfiprintf_r+0x224>)
 800d384:	bb1b      	cbnz	r3, 800d3ce <_vfiprintf_r+0x1d6>
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	3307      	adds	r3, #7
 800d38a:	f023 0307 	bic.w	r3, r3, #7
 800d38e:	3308      	adds	r3, #8
 800d390:	9303      	str	r3, [sp, #12]
 800d392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d394:	443b      	add	r3, r7
 800d396:	9309      	str	r3, [sp, #36]	@ 0x24
 800d398:	e76a      	b.n	800d270 <_vfiprintf_r+0x78>
 800d39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d39e:	460c      	mov	r4, r1
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	e7a8      	b.n	800d2f6 <_vfiprintf_r+0xfe>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	3401      	adds	r4, #1
 800d3a8:	9305      	str	r3, [sp, #20]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f04f 0c0a 	mov.w	ip, #10
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b6:	3a30      	subs	r2, #48	@ 0x30
 800d3b8:	2a09      	cmp	r2, #9
 800d3ba:	d903      	bls.n	800d3c4 <_vfiprintf_r+0x1cc>
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0c6      	beq.n	800d34e <_vfiprintf_r+0x156>
 800d3c0:	9105      	str	r1, [sp, #20]
 800d3c2:	e7c4      	b.n	800d34e <_vfiprintf_r+0x156>
 800d3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e7f0      	b.n	800d3b0 <_vfiprintf_r+0x1b8>
 800d3ce:	ab03      	add	r3, sp, #12
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	462a      	mov	r2, r5
 800d3d4:	4b12      	ldr	r3, [pc, #72]	@ (800d420 <_vfiprintf_r+0x228>)
 800d3d6:	a904      	add	r1, sp, #16
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7fd fdd3 	bl	800af84 <_printf_float>
 800d3de:	4607      	mov	r7, r0
 800d3e0:	1c78      	adds	r0, r7, #1
 800d3e2:	d1d6      	bne.n	800d392 <_vfiprintf_r+0x19a>
 800d3e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3e6:	07d9      	lsls	r1, r3, #31
 800d3e8:	d405      	bmi.n	800d3f6 <_vfiprintf_r+0x1fe>
 800d3ea:	89ab      	ldrh	r3, [r5, #12]
 800d3ec:	059a      	lsls	r2, r3, #22
 800d3ee:	d402      	bmi.n	800d3f6 <_vfiprintf_r+0x1fe>
 800d3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3f2:	f7fe fc07 	bl	800bc04 <__retarget_lock_release_recursive>
 800d3f6:	89ab      	ldrh	r3, [r5, #12]
 800d3f8:	065b      	lsls	r3, r3, #25
 800d3fa:	f53f af1f 	bmi.w	800d23c <_vfiprintf_r+0x44>
 800d3fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d400:	e71e      	b.n	800d240 <_vfiprintf_r+0x48>
 800d402:	ab03      	add	r3, sp, #12
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	462a      	mov	r2, r5
 800d408:	4b05      	ldr	r3, [pc, #20]	@ (800d420 <_vfiprintf_r+0x228>)
 800d40a:	a904      	add	r1, sp, #16
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7fe f851 	bl	800b4b4 <_printf_i>
 800d412:	e7e4      	b.n	800d3de <_vfiprintf_r+0x1e6>
 800d414:	0800e160 	.word	0x0800e160
 800d418:	0800e16a 	.word	0x0800e16a
 800d41c:	0800af85 	.word	0x0800af85
 800d420:	0800d1d3 	.word	0x0800d1d3
 800d424:	0800e166 	.word	0x0800e166

0800d428 <__sflush_r>:
 800d428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	0716      	lsls	r6, r2, #28
 800d432:	4605      	mov	r5, r0
 800d434:	460c      	mov	r4, r1
 800d436:	d454      	bmi.n	800d4e2 <__sflush_r+0xba>
 800d438:	684b      	ldr	r3, [r1, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dc02      	bgt.n	800d444 <__sflush_r+0x1c>
 800d43e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d440:	2b00      	cmp	r3, #0
 800d442:	dd48      	ble.n	800d4d6 <__sflush_r+0xae>
 800d444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d446:	2e00      	cmp	r6, #0
 800d448:	d045      	beq.n	800d4d6 <__sflush_r+0xae>
 800d44a:	2300      	movs	r3, #0
 800d44c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d450:	682f      	ldr	r7, [r5, #0]
 800d452:	6a21      	ldr	r1, [r4, #32]
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	d030      	beq.n	800d4ba <__sflush_r+0x92>
 800d458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	0759      	lsls	r1, r3, #29
 800d45e:	d505      	bpl.n	800d46c <__sflush_r+0x44>
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	1ad2      	subs	r2, r2, r3
 800d464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d466:	b10b      	cbz	r3, 800d46c <__sflush_r+0x44>
 800d468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d46a:	1ad2      	subs	r2, r2, r3
 800d46c:	2300      	movs	r3, #0
 800d46e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d470:	6a21      	ldr	r1, [r4, #32]
 800d472:	4628      	mov	r0, r5
 800d474:	47b0      	blx	r6
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	d106      	bne.n	800d48a <__sflush_r+0x62>
 800d47c:	6829      	ldr	r1, [r5, #0]
 800d47e:	291d      	cmp	r1, #29
 800d480:	d82b      	bhi.n	800d4da <__sflush_r+0xb2>
 800d482:	4a2a      	ldr	r2, [pc, #168]	@ (800d52c <__sflush_r+0x104>)
 800d484:	410a      	asrs	r2, r1
 800d486:	07d6      	lsls	r6, r2, #31
 800d488:	d427      	bmi.n	800d4da <__sflush_r+0xb2>
 800d48a:	2200      	movs	r2, #0
 800d48c:	6062      	str	r2, [r4, #4]
 800d48e:	04d9      	lsls	r1, r3, #19
 800d490:	6922      	ldr	r2, [r4, #16]
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	d504      	bpl.n	800d4a0 <__sflush_r+0x78>
 800d496:	1c42      	adds	r2, r0, #1
 800d498:	d101      	bne.n	800d49e <__sflush_r+0x76>
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	b903      	cbnz	r3, 800d4a0 <__sflush_r+0x78>
 800d49e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4a2:	602f      	str	r7, [r5, #0]
 800d4a4:	b1b9      	cbz	r1, 800d4d6 <__sflush_r+0xae>
 800d4a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4aa:	4299      	cmp	r1, r3
 800d4ac:	d002      	beq.n	800d4b4 <__sflush_r+0x8c>
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f7ff f9f6 	bl	800c8a0 <_free_r>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4b8:	e00d      	b.n	800d4d6 <__sflush_r+0xae>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b0      	blx	r6
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	1c50      	adds	r0, r2, #1
 800d4c4:	d1c9      	bne.n	800d45a <__sflush_r+0x32>
 800d4c6:	682b      	ldr	r3, [r5, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c6      	beq.n	800d45a <__sflush_r+0x32>
 800d4cc:	2b1d      	cmp	r3, #29
 800d4ce:	d001      	beq.n	800d4d4 <__sflush_r+0xac>
 800d4d0:	2b16      	cmp	r3, #22
 800d4d2:	d11e      	bne.n	800d512 <__sflush_r+0xea>
 800d4d4:	602f      	str	r7, [r5, #0]
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	e022      	b.n	800d520 <__sflush_r+0xf8>
 800d4da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4de:	b21b      	sxth	r3, r3
 800d4e0:	e01b      	b.n	800d51a <__sflush_r+0xf2>
 800d4e2:	690f      	ldr	r7, [r1, #16]
 800d4e4:	2f00      	cmp	r7, #0
 800d4e6:	d0f6      	beq.n	800d4d6 <__sflush_r+0xae>
 800d4e8:	0793      	lsls	r3, r2, #30
 800d4ea:	680e      	ldr	r6, [r1, #0]
 800d4ec:	bf08      	it	eq
 800d4ee:	694b      	ldreq	r3, [r1, #20]
 800d4f0:	600f      	str	r7, [r1, #0]
 800d4f2:	bf18      	it	ne
 800d4f4:	2300      	movne	r3, #0
 800d4f6:	eba6 0807 	sub.w	r8, r6, r7
 800d4fa:	608b      	str	r3, [r1, #8]
 800d4fc:	f1b8 0f00 	cmp.w	r8, #0
 800d500:	dde9      	ble.n	800d4d6 <__sflush_r+0xae>
 800d502:	6a21      	ldr	r1, [r4, #32]
 800d504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d506:	4643      	mov	r3, r8
 800d508:	463a      	mov	r2, r7
 800d50a:	4628      	mov	r0, r5
 800d50c:	47b0      	blx	r6
 800d50e:	2800      	cmp	r0, #0
 800d510:	dc08      	bgt.n	800d524 <__sflush_r+0xfc>
 800d512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d524:	4407      	add	r7, r0
 800d526:	eba8 0800 	sub.w	r8, r8, r0
 800d52a:	e7e7      	b.n	800d4fc <__sflush_r+0xd4>
 800d52c:	dfbffffe 	.word	0xdfbffffe

0800d530 <_fflush_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	690b      	ldr	r3, [r1, #16]
 800d534:	4605      	mov	r5, r0
 800d536:	460c      	mov	r4, r1
 800d538:	b913      	cbnz	r3, 800d540 <_fflush_r+0x10>
 800d53a:	2500      	movs	r5, #0
 800d53c:	4628      	mov	r0, r5
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	b118      	cbz	r0, 800d54a <_fflush_r+0x1a>
 800d542:	6a03      	ldr	r3, [r0, #32]
 800d544:	b90b      	cbnz	r3, 800d54a <_fflush_r+0x1a>
 800d546:	f7fe f961 	bl	800b80c <__sinit>
 800d54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d0f3      	beq.n	800d53a <_fflush_r+0xa>
 800d552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d554:	07d0      	lsls	r0, r2, #31
 800d556:	d404      	bmi.n	800d562 <_fflush_r+0x32>
 800d558:	0599      	lsls	r1, r3, #22
 800d55a:	d402      	bmi.n	800d562 <_fflush_r+0x32>
 800d55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d55e:	f7fe fb50 	bl	800bc02 <__retarget_lock_acquire_recursive>
 800d562:	4628      	mov	r0, r5
 800d564:	4621      	mov	r1, r4
 800d566:	f7ff ff5f 	bl	800d428 <__sflush_r>
 800d56a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d56c:	07da      	lsls	r2, r3, #31
 800d56e:	4605      	mov	r5, r0
 800d570:	d4e4      	bmi.n	800d53c <_fflush_r+0xc>
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	059b      	lsls	r3, r3, #22
 800d576:	d4e1      	bmi.n	800d53c <_fflush_r+0xc>
 800d578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d57a:	f7fe fb43 	bl	800bc04 <__retarget_lock_release_recursive>
 800d57e:	e7dd      	b.n	800d53c <_fflush_r+0xc>

0800d580 <__swhatbuf_r>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	460c      	mov	r4, r1
 800d584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d588:	2900      	cmp	r1, #0
 800d58a:	b096      	sub	sp, #88	@ 0x58
 800d58c:	4615      	mov	r5, r2
 800d58e:	461e      	mov	r6, r3
 800d590:	da0d      	bge.n	800d5ae <__swhatbuf_r+0x2e>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d598:	f04f 0100 	mov.w	r1, #0
 800d59c:	bf14      	ite	ne
 800d59e:	2340      	movne	r3, #64	@ 0x40
 800d5a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	6031      	str	r1, [r6, #0]
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	b016      	add	sp, #88	@ 0x58
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	466a      	mov	r2, sp
 800d5b0:	f000 f848 	bl	800d644 <_fstat_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dbec      	blt.n	800d592 <__swhatbuf_r+0x12>
 800d5b8:	9901      	ldr	r1, [sp, #4]
 800d5ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5c2:	4259      	negs	r1, r3
 800d5c4:	4159      	adcs	r1, r3
 800d5c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5ca:	e7eb      	b.n	800d5a4 <__swhatbuf_r+0x24>

0800d5cc <__smakebuf_r>:
 800d5cc:	898b      	ldrh	r3, [r1, #12]
 800d5ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5d0:	079d      	lsls	r5, r3, #30
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	d507      	bpl.n	800d5e8 <__smakebuf_r+0x1c>
 800d5d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	6163      	str	r3, [r4, #20]
 800d5e4:	b003      	add	sp, #12
 800d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e8:	ab01      	add	r3, sp, #4
 800d5ea:	466a      	mov	r2, sp
 800d5ec:	f7ff ffc8 	bl	800d580 <__swhatbuf_r>
 800d5f0:	9f00      	ldr	r7, [sp, #0]
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	4639      	mov	r1, r7
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7ff f9c6 	bl	800c988 <_malloc_r>
 800d5fc:	b948      	cbnz	r0, 800d612 <__smakebuf_r+0x46>
 800d5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d602:	059a      	lsls	r2, r3, #22
 800d604:	d4ee      	bmi.n	800d5e4 <__smakebuf_r+0x18>
 800d606:	f023 0303 	bic.w	r3, r3, #3
 800d60a:	f043 0302 	orr.w	r3, r3, #2
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	e7e2      	b.n	800d5d8 <__smakebuf_r+0xc>
 800d612:	89a3      	ldrh	r3, [r4, #12]
 800d614:	6020      	str	r0, [r4, #0]
 800d616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	9b01      	ldr	r3, [sp, #4]
 800d61e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d622:	b15b      	cbz	r3, 800d63c <__smakebuf_r+0x70>
 800d624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d628:	4630      	mov	r0, r6
 800d62a:	f000 f81d 	bl	800d668 <_isatty_r>
 800d62e:	b128      	cbz	r0, 800d63c <__smakebuf_r+0x70>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f023 0303 	bic.w	r3, r3, #3
 800d636:	f043 0301 	orr.w	r3, r3, #1
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	89a3      	ldrh	r3, [r4, #12]
 800d63e:	431d      	orrs	r5, r3
 800d640:	81a5      	strh	r5, [r4, #12]
 800d642:	e7cf      	b.n	800d5e4 <__smakebuf_r+0x18>

0800d644 <_fstat_r>:
 800d644:	b538      	push	{r3, r4, r5, lr}
 800d646:	4d07      	ldr	r5, [pc, #28]	@ (800d664 <_fstat_r+0x20>)
 800d648:	2300      	movs	r3, #0
 800d64a:	4604      	mov	r4, r0
 800d64c:	4608      	mov	r0, r1
 800d64e:	4611      	mov	r1, r2
 800d650:	602b      	str	r3, [r5, #0]
 800d652:	f7f5 fee4 	bl	800341e <_fstat>
 800d656:	1c43      	adds	r3, r0, #1
 800d658:	d102      	bne.n	800d660 <_fstat_r+0x1c>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	b103      	cbz	r3, 800d660 <_fstat_r+0x1c>
 800d65e:	6023      	str	r3, [r4, #0]
 800d660:	bd38      	pop	{r3, r4, r5, pc}
 800d662:	bf00      	nop
 800d664:	20000ac4 	.word	0x20000ac4

0800d668 <_isatty_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4d06      	ldr	r5, [pc, #24]	@ (800d684 <_isatty_r+0x1c>)
 800d66c:	2300      	movs	r3, #0
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f7f5 fee3 	bl	800343e <_isatty>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d102      	bne.n	800d682 <_isatty_r+0x1a>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	b103      	cbz	r3, 800d682 <_isatty_r+0x1a>
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	20000ac4 	.word	0x20000ac4

0800d688 <_sbrk_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	4d06      	ldr	r5, [pc, #24]	@ (800d6a4 <_sbrk_r+0x1c>)
 800d68c:	2300      	movs	r3, #0
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	602b      	str	r3, [r5, #0]
 800d694:	f7f5 feec 	bl	8003470 <_sbrk>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_sbrk_r+0x1a>
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_sbrk_r+0x1a>
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	20000ac4 	.word	0x20000ac4

0800d6a8 <memcpy>:
 800d6a8:	440a      	add	r2, r1
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6b0:	d100      	bne.n	800d6b4 <memcpy+0xc>
 800d6b2:	4770      	bx	lr
 800d6b4:	b510      	push	{r4, lr}
 800d6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6be:	4291      	cmp	r1, r2
 800d6c0:	d1f9      	bne.n	800d6b6 <memcpy+0xe>
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <__assert_func>:
 800d6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6c6:	4614      	mov	r4, r2
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	4b09      	ldr	r3, [pc, #36]	@ (800d6f0 <__assert_func+0x2c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	68d8      	ldr	r0, [r3, #12]
 800d6d2:	b954      	cbnz	r4, 800d6ea <__assert_func+0x26>
 800d6d4:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <__assert_func+0x30>)
 800d6d6:	461c      	mov	r4, r3
 800d6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6dc:	9100      	str	r1, [sp, #0]
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4905      	ldr	r1, [pc, #20]	@ (800d6f8 <__assert_func+0x34>)
 800d6e2:	f000 f841 	bl	800d768 <fiprintf>
 800d6e6:	f000 f851 	bl	800d78c <abort>
 800d6ea:	4b04      	ldr	r3, [pc, #16]	@ (800d6fc <__assert_func+0x38>)
 800d6ec:	e7f4      	b.n	800d6d8 <__assert_func+0x14>
 800d6ee:	bf00      	nop
 800d6f0:	20000080 	.word	0x20000080
 800d6f4:	0800e1b6 	.word	0x0800e1b6
 800d6f8:	0800e188 	.word	0x0800e188
 800d6fc:	0800e17b 	.word	0x0800e17b

0800d700 <_calloc_r>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	fba1 5402 	umull	r5, r4, r1, r2
 800d706:	b93c      	cbnz	r4, 800d718 <_calloc_r+0x18>
 800d708:	4629      	mov	r1, r5
 800d70a:	f7ff f93d 	bl	800c988 <_malloc_r>
 800d70e:	4606      	mov	r6, r0
 800d710:	b928      	cbnz	r0, 800d71e <_calloc_r+0x1e>
 800d712:	2600      	movs	r6, #0
 800d714:	4630      	mov	r0, r6
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	220c      	movs	r2, #12
 800d71a:	6002      	str	r2, [r0, #0]
 800d71c:	e7f9      	b.n	800d712 <_calloc_r+0x12>
 800d71e:	462a      	mov	r2, r5
 800d720:	4621      	mov	r1, r4
 800d722:	f7fe f9f1 	bl	800bb08 <memset>
 800d726:	e7f5      	b.n	800d714 <_calloc_r+0x14>

0800d728 <__ascii_mbtowc>:
 800d728:	b082      	sub	sp, #8
 800d72a:	b901      	cbnz	r1, 800d72e <__ascii_mbtowc+0x6>
 800d72c:	a901      	add	r1, sp, #4
 800d72e:	b142      	cbz	r2, 800d742 <__ascii_mbtowc+0x1a>
 800d730:	b14b      	cbz	r3, 800d746 <__ascii_mbtowc+0x1e>
 800d732:	7813      	ldrb	r3, [r2, #0]
 800d734:	600b      	str	r3, [r1, #0]
 800d736:	7812      	ldrb	r2, [r2, #0]
 800d738:	1e10      	subs	r0, r2, #0
 800d73a:	bf18      	it	ne
 800d73c:	2001      	movne	r0, #1
 800d73e:	b002      	add	sp, #8
 800d740:	4770      	bx	lr
 800d742:	4610      	mov	r0, r2
 800d744:	e7fb      	b.n	800d73e <__ascii_mbtowc+0x16>
 800d746:	f06f 0001 	mvn.w	r0, #1
 800d74a:	e7f8      	b.n	800d73e <__ascii_mbtowc+0x16>

0800d74c <__ascii_wctomb>:
 800d74c:	4603      	mov	r3, r0
 800d74e:	4608      	mov	r0, r1
 800d750:	b141      	cbz	r1, 800d764 <__ascii_wctomb+0x18>
 800d752:	2aff      	cmp	r2, #255	@ 0xff
 800d754:	d904      	bls.n	800d760 <__ascii_wctomb+0x14>
 800d756:	228a      	movs	r2, #138	@ 0x8a
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	f04f 30ff 	mov.w	r0, #4294967295
 800d75e:	4770      	bx	lr
 800d760:	700a      	strb	r2, [r1, #0]
 800d762:	2001      	movs	r0, #1
 800d764:	4770      	bx	lr
	...

0800d768 <fiprintf>:
 800d768:	b40e      	push	{r1, r2, r3}
 800d76a:	b503      	push	{r0, r1, lr}
 800d76c:	4601      	mov	r1, r0
 800d76e:	ab03      	add	r3, sp, #12
 800d770:	4805      	ldr	r0, [pc, #20]	@ (800d788 <fiprintf+0x20>)
 800d772:	f853 2b04 	ldr.w	r2, [r3], #4
 800d776:	6800      	ldr	r0, [r0, #0]
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	f7ff fd3d 	bl	800d1f8 <_vfiprintf_r>
 800d77e:	b002      	add	sp, #8
 800d780:	f85d eb04 	ldr.w	lr, [sp], #4
 800d784:	b003      	add	sp, #12
 800d786:	4770      	bx	lr
 800d788:	20000080 	.word	0x20000080

0800d78c <abort>:
 800d78c:	b508      	push	{r3, lr}
 800d78e:	2006      	movs	r0, #6
 800d790:	f000 f82c 	bl	800d7ec <raise>
 800d794:	2001      	movs	r0, #1
 800d796:	f7f5 fdf2 	bl	800337e <_exit>

0800d79a <_raise_r>:
 800d79a:	291f      	cmp	r1, #31
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	4605      	mov	r5, r0
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	d904      	bls.n	800d7ae <_raise_r+0x14>
 800d7a4:	2316      	movs	r3, #22
 800d7a6:	6003      	str	r3, [r0, #0]
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	bd38      	pop	{r3, r4, r5, pc}
 800d7ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7b0:	b112      	cbz	r2, 800d7b8 <_raise_r+0x1e>
 800d7b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7b6:	b94b      	cbnz	r3, 800d7cc <_raise_r+0x32>
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f000 f831 	bl	800d820 <_getpid_r>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	4601      	mov	r1, r0
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7c8:	f000 b818 	b.w	800d7fc <_kill_r>
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d00a      	beq.n	800d7e6 <_raise_r+0x4c>
 800d7d0:	1c59      	adds	r1, r3, #1
 800d7d2:	d103      	bne.n	800d7dc <_raise_r+0x42>
 800d7d4:	2316      	movs	r3, #22
 800d7d6:	6003      	str	r3, [r0, #0]
 800d7d8:	2001      	movs	r0, #1
 800d7da:	e7e7      	b.n	800d7ac <_raise_r+0x12>
 800d7dc:	2100      	movs	r1, #0
 800d7de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	4798      	blx	r3
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	e7e0      	b.n	800d7ac <_raise_r+0x12>
	...

0800d7ec <raise>:
 800d7ec:	4b02      	ldr	r3, [pc, #8]	@ (800d7f8 <raise+0xc>)
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	f7ff bfd2 	b.w	800d79a <_raise_r>
 800d7f6:	bf00      	nop
 800d7f8:	20000080 	.word	0x20000080

0800d7fc <_kill_r>:
 800d7fc:	b538      	push	{r3, r4, r5, lr}
 800d7fe:	4d07      	ldr	r5, [pc, #28]	@ (800d81c <_kill_r+0x20>)
 800d800:	2300      	movs	r3, #0
 800d802:	4604      	mov	r4, r0
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	f7f5 fda8 	bl	800335e <_kill>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d102      	bne.n	800d818 <_kill_r+0x1c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	b103      	cbz	r3, 800d818 <_kill_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	bf00      	nop
 800d81c:	20000ac4 	.word	0x20000ac4

0800d820 <_getpid_r>:
 800d820:	f7f5 bd95 	b.w	800334e <_getpid>

0800d824 <_init>:
 800d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d826:	bf00      	nop
 800d828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82a:	bc08      	pop	{r3}
 800d82c:	469e      	mov	lr, r3
 800d82e:	4770      	bx	lr

0800d830 <_fini>:
 800d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d832:	bf00      	nop
 800d834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d836:	bc08      	pop	{r3}
 800d838:	469e      	mov	lr, r3
 800d83a:	4770      	bx	lr
