
touch-screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f694  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800f858  0800f858  00010858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010328  08010328  0001223c  2**0
                  CONTENTS
  4 .ARM          00000008  08010328  08010328  00011328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010330  08010330  0001223c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010330  08010330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010334  08010334  00011334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  08010338  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  2000023c  08010574  0001223c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c6c  08010574  00012c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001223c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4ac  00000000  00000000  0001226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d2  00000000  00000000  00031718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  00036a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f3d8  00000000  00000000  00038022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c00  00000000  00000000  000673fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125cd6  00000000  00000000  00088ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aecd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b04  00000000  00000000  001aed14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001b7818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f83c 	.word	0x0800f83c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	0800f83c 	.word	0x0800f83c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <FoodOrder_Init>:
typedef struct FoodOrder {
    char name[20];
    uint8_t valid;
    int id;
} FoodOrder;
void FoodOrder_Init(FoodOrder* order) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    order->valid = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	751a      	strb	r2, [r3, #20]
    for(int i = 0; i < 20; ++i){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e007      	b.n	8000eec <FoodOrder_Init+0x24>
    	order->name[i] = '\0';
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; ++i){
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b13      	cmp	r3, #19
 8000ef0:	ddf4      	ble.n	8000edc <FoodOrder_Init+0x14>
    }
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <big>:
    0x01, 0x01, 0x1E, 0x00, 0x19, 0x1D, 0x17, 0x12, 0x00, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00 // #255 NBSP
};

// convert a little endian 16 bit number to big endian
uint16_t big(uint16_t original) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	uint16_t result = original << 8;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	81fb      	strh	r3, [r7, #14]
	result |= original >> 8;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	81fb      	strh	r3, [r7, #14]
	return result;
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <sendCommand>:

// send an SPI command in the correct format
void sendCommand(SPI_HandleTypeDef* spi, uint8_t commandByte, uint8_t *dataBytes, uint16_t numDataBytes) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	461a      	mov	r2, r3
 8000f38:	460b      	mov	r3, r1
 8000f3a:	72fb      	strb	r3, [r7, #11]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	813b      	strh	r3, [r7, #8]
	//printf("Sending command: cmd %x, args %d\r\n", commandByte, numDataBytes);

	// first send the command byte
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET); // pull DC low
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <sendCommand+0x50>)
 8000f48:	f004 f95a 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, &commandByte, 1, 100); // write the byte
 8000f4c:	f107 010b 	add.w	r1, r7, #11
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f008 f890 	bl	800907a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET); // pull DC back high
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f60:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <sendCommand+0x50>)
 8000f62:	f004 f94d 	bl	8005200 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(spi, dataBytes, numDataBytes, 100);
 8000f66:	893a      	ldrh	r2, [r7, #8]
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f008 f884 	bl	800907a <HAL_SPI_Transmit>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	48001400 	.word	0x48001400

08000f80 <sendBlock>:

// x1 <= x2, y1 <= y2
void sendBlock(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2, uint16_t value) {
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b08f      	sub	sp, #60	@ 0x3c
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4603      	mov	r3, r0
 8000f92:	817b      	strh	r3, [r7, #10]
 8000f94:	460b      	mov	r3, r1
 8000f96:	813b      	strh	r3, [r7, #8]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	466b      	mov	r3, sp
 8000f9e:	461e      	mov	r6, r3
	uint32_t amount = (uint32_t)(x2-x1+1) * (uint32_t)(y2-y1+1); // amount of pixels to send
 8000fa0:	893a      	ldrh	r2, [r7, #8]
 8000fa2:	897b      	ldrh	r3, [r7, #10]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t widthSpan[2] = {big(x1), big(x2)};
 8000fba:	897b      	ldrh	r3, [r7, #10]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff9f 	bl	8000f00 <big>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	82bb      	strh	r3, [r7, #20]
 8000fc6:	893b      	ldrh	r3, [r7, #8]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff99 	bl	8000f00 <big>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	82fb      	strh	r3, [r7, #22]
	uint16_t heightSpan[2] = {big(y1), big(y2)};
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff93 	bl	8000f00 <big>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	823b      	strh	r3, [r7, #16]
 8000fde:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff8c 	bl	8000f00 <big>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	827b      	strh	r3, [r7, #18]
	sendCommand(spi, HX8357_CASET, (uint8_t*)widthSpan, 4);
 8000fec:	f107 0214 	add.w	r2, r7, #20
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	212a      	movs	r1, #42	@ 0x2a
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ff99 	bl	8000f2c <sendCommand>
	sendCommand(spi, HX8357_PASET, (uint8_t*)heightSpan, 4);
 8000ffa:	f107 0210 	add.w	r2, r7, #16
 8000ffe:	2304      	movs	r3, #4
 8001000:	212b      	movs	r1, #43	@ 0x2b
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ff92 	bl	8000f2c <sendCommand>
	// This sends the pixels. There are likely more than 2^16 to send,
	// however the HAL SPI can only send 2^16 at a time, so break up the
	// transaction into chunks of 2^16. Don't send one at a time because that
	// is much much slower. It is still fairly slow so in the future I
	// could try to optimize it.
	sendCommand(spi, HX8357_RAMWR, NULL, 0);
 8001008:	2300      	movs	r3, #0
 800100a:	2200      	movs	r2, #0
 800100c:	212c      	movs	r1, #44	@ 0x2c
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff ff8c 	bl	8000f2c <sendCommand>
	uint16_t fullLength = 32767; // maximum amount of pixels that can be sent at once
 8001014:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001018:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t buffer[fullLength];
 800101a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800101c:	460b      	mov	r3, r1
 800101e:	3b01      	subs	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
 8001022:	b28b      	uxth	r3, r1
 8001024:	2200      	movs	r2, #0
 8001026:	4698      	mov	r8, r3
 8001028:	4691      	mov	r9, r2
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001036:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800103a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800103e:	b28b      	uxth	r3, r1
 8001040:	2200      	movs	r2, #0
 8001042:	461c      	mov	r4, r3
 8001044:	4615      	mov	r5, r2
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	012b      	lsls	r3, r5, #4
 8001050:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001054:	0122      	lsls	r2, r4, #4
 8001056:	460b      	mov	r3, r1
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	3307      	adds	r3, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3301      	adds	r3, #1
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	623b      	str	r3, [r7, #32]
	for (uint16_t i = 0; i < fullLength; i++) buffer[i] = big(value); // fill the buffer
 800106e:	2300      	movs	r3, #0
 8001070:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001072:	e00d      	b.n	8001090 <sendBlock+0x110>
 8001074:	8efc      	ldrh	r4, [r7, #54]	@ 0x36
 8001076:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff40 	bl	8000f00 <big>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800108a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800108c:	3301      	adds	r3, #1
 800108e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001090:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001092:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001094:	429a      	cmp	r2, r3
 8001096:	d3ed      	bcc.n	8001074 <sendBlock+0xf4>
	uint32_t fullTransactions = amount / fullLength; // amount of full transactions to send
 8001098:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800109a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800109c:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a0:	61fb      	str	r3, [r7, #28]
	uint16_t weirdLength = amount % fullLength; // one transaction will be a different amount
 80010a2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80010a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80010aa:	fb01 f202 	mul.w	r2, r1, r2
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	837b      	strh	r3, [r7, #26]
	if (weirdLength != 0) {
 80010b2:	8b7b      	ldrh	r3, [r7, #26]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <sendBlock+0x148>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, weirdLength * 2, 100);
 80010b8:	8b7b      	ldrh	r3, [r7, #26]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	6a39      	ldr	r1, [r7, #32]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f007 ffd9 	bl	800907a <HAL_SPI_Transmit>
	}
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80010cc:	e00a      	b.n	80010e4 <sendBlock+0x164>
		HAL_SPI_Transmit(spi, (uint8_t*)&buffer, fullLength * 2, 100);
 80010ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	2364      	movs	r3, #100	@ 0x64
 80010d6:	6a39      	ldr	r1, [r7, #32]
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f007 ffce 	bl	800907a <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < fullTransactions; i++) {
 80010de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e0:	3301      	adds	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80010e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3f0      	bcc.n	80010ce <sendBlock+0x14e>
 80010ec:	46b5      	mov	sp, r6
	}
}
 80010ee:	bf00      	nop
 80010f0:	373c      	adds	r7, #60	@ 0x3c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010f8 <sendCharacter>:

// (x, y) is the bottom left corner of the character
// size_x, size_y is magnification factor
void sendCharacter(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size_x, uint8_t size_y) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	4608      	mov	r0, r1
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	4603      	mov	r3, r0
 8001108:	817b      	strh	r3, [r7, #10]
 800110a:	460b      	mov	r3, r1
 800110c:	813b      	strh	r3, [r7, #8]
 800110e:	4613      	mov	r3, r2
 8001110:	71fb      	strb	r3, [r7, #7]
	// taken from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp#L1150-L1166
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001112:	2300      	movs	r3, #0
 8001114:	77fb      	strb	r3, [r7, #31]
 8001116:	e060      	b.n	80011da <sendCharacter+0xe2>
    	uint8_t line = font[c * 5 + i];
 8001118:	79fa      	ldrb	r2, [r7, #7]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	441a      	add	r2, r3
 8001120:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001124:	4413      	add	r3, r2
 8001126:	4a31      	ldr	r2, [pc, #196]	@ (80011ec <sendCharacter+0xf4>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	77bb      	strb	r3, [r7, #30]
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800112c:	2300      	movs	r3, #0
 800112e:	777b      	strb	r3, [r7, #29]
 8001130:	e049      	b.n	80011c6 <sendCharacter+0xce>
    		if (line & 1) {
 8001132:	7fbb      	ldrb	r3, [r7, #30]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d03b      	beq.n	80011b4 <sendCharacter+0xbc>
    			uint16_t x1 = x + 7 * size_x - j * size_x;
 800113c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001140:	b29b      	uxth	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	897b      	ldrh	r3, [r7, #10]
 800114c:	4413      	add	r3, r2
 800114e:	b29a      	uxth	r2, r3
 8001150:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001154:	b299      	uxth	r1, r3
 8001156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800115a:	b29b      	uxth	r3, r3
 800115c:	fb11 f303 	smulbb	r3, r1, r3
 8001160:	b29b      	uxth	r3, r3
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	837b      	strh	r3, [r7, #26]
    			uint16_t y1 = y + i * size_y;
 8001166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800116a:	b29a      	uxth	r2, r3
 800116c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001170:	b29b      	uxth	r3, r3
 8001172:	fb12 f303 	smulbb	r3, r2, r3
 8001176:	b29a      	uxth	r2, r3
 8001178:	893b      	ldrh	r3, [r7, #8]
 800117a:	4413      	add	r3, r2
 800117c:	833b      	strh	r3, [r7, #24]
    			uint16_t x2 = x1 + size_x - 1;
 800117e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001182:	b29a      	uxth	r2, r3
 8001184:	8b7b      	ldrh	r3, [r7, #26]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	3b01      	subs	r3, #1
 800118c:	82fb      	strh	r3, [r7, #22]
    			uint16_t y2 = y1 + size_y - 1;
 800118e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001192:	b29a      	uxth	r2, r3
 8001194:	8b3b      	ldrh	r3, [r7, #24]
 8001196:	4413      	add	r3, r2
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b01      	subs	r3, #1
 800119c:	82bb      	strh	r3, [r7, #20]
    			sendBlock(spi, x1, x2, y1, y2, color);
 800119e:	8b38      	ldrh	r0, [r7, #24]
 80011a0:	8afa      	ldrh	r2, [r7, #22]
 80011a2:	8b79      	ldrh	r1, [r7, #26]
 80011a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	8abb      	ldrh	r3, [r7, #20]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4603      	mov	r3, r0
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff fee6 	bl	8000f80 <sendBlock>
    	for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80011b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	777b      	strb	r3, [r7, #29]
 80011c0:	7fbb      	ldrb	r3, [r7, #30]
 80011c2:	085b      	lsrs	r3, r3, #1
 80011c4:	77bb      	strb	r3, [r7, #30]
 80011c6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	ddb1      	ble.n	8001132 <sendCharacter+0x3a>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 80011ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	77fb      	strb	r3, [r7, #31]
 80011da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	dd9a      	ble.n	8001118 <sendCharacter+0x20>
    		}
    	}
    }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0800fa48 	.word	0x0800fa48

080011f0 <sendString>:

void sendString(SPI_HandleTypeDef* spi, uint16_t x, uint16_t y, char* s, uint16_t color, uint8_t size_x, uint8_t size_y) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af04      	add	r7, sp, #16
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	817b      	strh	r3, [r7, #10]
 80011fe:	4613      	mov	r3, r2
 8001200:	813b      	strh	r3, [r7, #8]
	uint16_t width = (5 + 1) * size_y; // because character has 5 columns, +1 to add space between characters
 8001202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001206:	b29b      	uxth	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	0052      	lsls	r2, r2, #1
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; s[i] != 0; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	e023      	b.n	8001260 <sendString+0x70>
		uint16_t offset = y + i * width;
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	b29b      	uxth	r3, r3
 800121c:	8aba      	ldrh	r2, [r7, #20]
 800121e:	fb12 f303 	smulbb	r3, r2, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	893b      	ldrh	r3, [r7, #8]
 8001226:	4413      	add	r3, r2
 8001228:	827b      	strh	r3, [r7, #18]
		if (offset + width > 479) return; // off the end of the screen
 800122a:	8a7a      	ldrh	r2, [r7, #18]
 800122c:	8abb      	ldrh	r3, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001234:	da1b      	bge.n	800126e <sendString+0x7e>
		sendCharacter(spi, x, offset, s[i], color, size_x, size_y);
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	7818      	ldrb	r0, [r3, #0]
 800123e:	8a7a      	ldrh	r2, [r7, #18]
 8001240:	8979      	ldrh	r1, [r7, #10]
 8001242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	8c3b      	ldrh	r3, [r7, #32]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4603      	mov	r3, r0
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff ff4f 	bl	80010f8 <sendCharacter>
	for (uint8_t i = 0; s[i] != 0; i++) {
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	3301      	adds	r3, #1
 800125e:	75fb      	strb	r3, [r7, #23]
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1d5      	bne.n	8001218 <sendString+0x28>
 800126c:	e000      	b.n	8001270 <sendString+0x80>
		if (offset + width > 479) return; // off the end of the screen
 800126e:	bf00      	nop
	}
}
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <initialize_screen>:

void initialize_screen(SPI_HandleTypeDef* spi) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	printf("Starting initialization.\r\n");
 8001280:	4827      	ldr	r0, [pc, #156]	@ (8001320 <initialize_screen+0xa8>)
 8001282:	f00c fb2f 	bl	800d8e4 <puts>

	// hardware reset the display
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	4825      	ldr	r0, [pc, #148]	@ (8001324 <initialize_screen+0xac>)
 800128e:	f003 ffb7 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001292:	20fa      	movs	r0, #250	@ 0xfa
 8001294:	f002 fbb6 	bl	8003a04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4821      	ldr	r0, [pc, #132]	@ (8001324 <initialize_screen+0xac>)
 80012a0:	f003 ffae 	bl	8005200 <HAL_GPIO_WritePin>

	uint8_t *addr = initd;
 80012a4:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <initialize_screen+0xb0>)
 80012a6:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 80012a8:	e02c      	b.n	8001304 <initialize_screen+0x8c>
		x = *(addr++);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60fa      	str	r2, [r7, #12]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	72bb      	strb	r3, [r7, #10]
		numArgs = x & 0x7F;
 80012b4:	7abb      	ldrb	r3, [r7, #10]
 80012b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012ba:	727b      	strb	r3, [r7, #9]
		if (cmd != 0xFF) { // '255' is ignored
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2bff      	cmp	r3, #255	@ 0xff
 80012c0:	d015      	beq.n	80012ee <initialize_screen+0x76>
		  if (x & 0x80) {  // If high bit set, numArgs is a delay time
 80012c2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da06      	bge.n	80012d8 <initialize_screen+0x60>
			sendCommand(spi, cmd, NULL, 0);
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	2300      	movs	r3, #0
 80012ce:	2200      	movs	r2, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fe2b 	bl	8000f2c <sendCommand>
 80012d6:	e00a      	b.n	80012ee <initialize_screen+0x76>
		  } else {
			sendCommand(spi, cmd, addr, numArgs);
 80012d8:	7a7b      	ldrb	r3, [r7, #9]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	7af9      	ldrb	r1, [r7, #11]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fe23 	bl	8000f2c <sendCommand>
			addr += numArgs;
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
		  }
		}
		if (x & 0x80) {       // If high bit set...
 80012ee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da06      	bge.n	8001304 <initialize_screen+0x8c>
		  HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 80012f6:	7a7a      	ldrb	r2, [r7, #9]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fb80 	bl	8003a04 <HAL_Delay>
	while ((cmd = *(addr++)) > 0) { // '0' command ends list
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	60fa      	str	r2, [r7, #12]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	72fb      	strb	r3, [r7, #11]
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ca      	bne.n	80012aa <initialize_screen+0x32>
		}
	}
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800f858 	.word	0x0800f858
 8001324:	48001400 	.word	0x48001400
 8001328:	20000000 	.word	0x20000000

0800132c <draw>:

void draw(SPI_HandleTypeDef* spi) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af04      	add	r7, sp, #16
 8001332:	6078      	str	r0, [r7, #4]
	printf("Sending pixels.\r\n");
 8001334:	482b      	ldr	r0, [pc, #172]	@ (80013e4 <draw+0xb8>)
 8001336:	f00c fad5 	bl	800d8e4 <puts>

	const uint16_t yend = 479;
 800133a:	f240 13df 	movw	r3, #479	@ 0x1df
 800133e:	81fb      	strh	r3, [r7, #14]
	const uint16_t xend = 319;
 8001340:	f240 133f 	movw	r3, #319	@ 0x13f
 8001344:	81bb      	strh	r3, [r7, #12]

	// use https://rgbcolorpicker.com/565 to find pixel values
	sendBlock(spi, 0, xend, 0, yend, 0);
 8001346:	89ba      	ldrh	r2, [r7, #12]
 8001348:	2300      	movs	r3, #0
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fe13 	bl	8000f80 <sendBlock>
	sendBlock(spi, 25, 25+75, 50, yend-50, 0x2dab);
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	3b32      	subs	r3, #50	@ 0x32
 800135e:	b29b      	uxth	r3, r3
 8001360:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2332      	movs	r3, #50	@ 0x32
 800136a:	2264      	movs	r2, #100	@ 0x64
 800136c:	2119      	movs	r1, #25
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fe06 	bl	8000f80 <sendBlock>
	sendBlock(spi, 25+75+25, 25+75+25+75, 50, yend-50, 0x2dab);
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	3b32      	subs	r3, #50	@ 0x32
 8001378:	b29b      	uxth	r3, r3
 800137a:	f642 52ab 	movw	r2, #11691	@ 0x2dab
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2332      	movs	r3, #50	@ 0x32
 8001384:	22c8      	movs	r2, #200	@ 0xc8
 8001386:	217d      	movs	r1, #125	@ 0x7d
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fdf9 	bl	8000f80 <sendBlock>

	sendString(spi, xend-70, 20, "Delivering for?", 0xffff, 2, 2);
 800138e:	89bb      	ldrh	r3, [r7, #12]
 8001390:	3b46      	subs	r3, #70	@ 0x46
 8001392:	b299      	uxth	r1, r3
 8001394:	2302      	movs	r3, #2
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2302      	movs	r3, #2
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <draw+0xbc>)
 80013a4:	2214      	movs	r2, #20
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff22 	bl	80011f0 <sendString>
	sendString(spi, 25+75+25 + 10, 50 + 10, "B. Obama", 0x0, 2, 2);
 80013ac:	2302      	movs	r3, #2
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2302      	movs	r3, #2
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <draw+0xc0>)
 80013ba:	223c      	movs	r2, #60	@ 0x3c
 80013bc:	2187      	movs	r1, #135	@ 0x87
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff16 	bl	80011f0 <sendString>
	sendString(spi, 25 + 10, 50 + 10, "Benton E.", 0x0, 5, 5);
 80013c4:	2305      	movs	r3, #5
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2305      	movs	r3, #5
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <draw+0xc4>)
 80013d2:	223c      	movs	r2, #60	@ 0x3c
 80013d4:	2123      	movs	r1, #35	@ 0x23
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff0a 	bl	80011f0 <sendString>
	//sendBlock(spi, 0, 0, 0, 0, 0x17e0);
	//sendBlock(spi, xend, xend, yend, yend, 0xf880);
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800f874 	.word	0x0800f874
 80013e8:	0800f888 	.word	0x0800f888
 80013ec:	0800f898 	.word	0x0800f898
 80013f0:	0800f8a4 	.word	0x0800f8a4

080013f4 <writeRegister8>:
#include "touch-defines.h"

// plan is to try stmpe. if it flops, switch to manual
// i2c1_sda is PB9, i2c1_scl is PB8

void writeRegister8(I2C_HandleTypeDef* i2c, uint8_t reg, uint8_t value){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	4613      	mov	r3, r2
 8001402:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {reg, value};
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	733b      	strb	r3, [r7, #12]
 8001408:	78bb      	ldrb	r3, [r7, #2]
 800140a:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, buffer, 2, 1000);
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2302      	movs	r3, #2
 8001418:	2182      	movs	r1, #130	@ 0x82
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f003 ffbc 	bl	8005398 <HAL_I2C_Master_Transmit>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <writeRegister8+0x40>
		printf("I2C write to STMPE failed with %d.\r\n", status);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	4619      	mov	r1, r3
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <writeRegister8+0x48>)
 8001430:	f00c f9e8 	bl	800d804 <iprintf>
	}
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800f8b0 	.word	0x0800f8b0

08001440 <readRegister8>:

uint8_t readRegister8(I2C_HandleTypeDef* i2c, uint8_t reg) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
	// problem is don't know what restart is
	// You are supposed to i2c write the address, then do an empty i2c read
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, STMPE_ADDR << 1, &reg, 1, 1000);
 800144c:	1cfa      	adds	r2, r7, #3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2182      	movs	r1, #130	@ 0x82
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f003 ff9d 	bl	8005398 <HAL_I2C_Master_Transmit>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <readRegister8+0x32>
		printf("I2C write (for the purpose of reading) to STMPE failed with %d.\r\n", status);
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	@ (80014ac <readRegister8+0x6c>)
 800146e:	f00c f9c9 	bl	800d804 <iprintf>
	}

	uint8_t result = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	73bb      	strb	r3, [r7, #14]
	// TODO: maybe the byte value here should be 1
	status = HAL_I2C_Master_Receive(i2c, (STMPE_ADDR << 1) | 1, &result, 1, 1000);
 8001476:	f107 020e 	add.w	r2, r7, #14
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	2183      	movs	r1, #131	@ 0x83
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 f89f 	bl	80055c8 <HAL_I2C_Master_Receive>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <readRegister8+0x62>
		printf("I2C read from STMPE failed with %d.\r\n", status);
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <readRegister8+0x70>)
 800149a:	f00c f9b3 	bl	800d804 <iprintf>
		return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <readRegister8+0x64>
	}
	return result;
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0800f8d8 	.word	0x0800f8d8
 80014b0:	0800f91c 	.word	0x0800f91c

080014b4 <bufferEmpty>:
// 1 is true, 0 is false
uint8_t touched(I2C_HandleTypeDef* i2c) {
	return readRegister8(i2c, STMPE_TSC_CTRL) & 0x80;
}

uint8_t bufferEmpty(I2C_HandleTypeDef* i2c) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	return (readRegister8(i2c, STMPE_FIFO_STA) & STMPE_FIFO_STA_EMPTY);
 80014bc:	214b      	movs	r1, #75	@ 0x4b
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffbe 	bl	8001440 <readRegister8>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <readPosition>:

void readPosition(I2C_HandleTypeDef* i2c, uint16_t *x, uint16_t *y, uint8_t *z) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint8_t data[4];

  for (uint8_t i = 0; i < 4; i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
 80014e6:	e00e      	b.n	8001506 <readPosition+0x32>
    data[i] = readRegister8(i2c, 0xD7);
 80014e8:	7dfc      	ldrb	r4, [r7, #23]
 80014ea:	21d7      	movs	r1, #215	@ 0xd7
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff ffa7 	bl	8001440 <readRegister8>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	f104 0318 	add.w	r3, r4, #24
 80014fa:	443b      	add	r3, r7
 80014fc:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (uint8_t i = 0; i < 4; i++) {
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	3301      	adds	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d9ed      	bls.n	80014e8 <readPosition+0x14>
  }
  *x = data[0];
 800150c:	7c3b      	ldrb	r3, [r7, #16]
 800150e:	461a      	mov	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	801a      	strh	r2, [r3, #0]
  *x <<= 4;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b29a      	uxth	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	801a      	strh	r2, [r3, #0]
  *x |= (data[1] >> 4);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	7c7a      	ldrb	r2, [r7, #17]
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	4313      	orrs	r3, r2
 800152c:	b29a      	uxth	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	801a      	strh	r2, [r3, #0]
  *y = data[1] & 0x0F;
 8001532:	7c7b      	ldrb	r3, [r7, #17]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	801a      	strh	r2, [r3, #0]
  *y <<= 8;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	801a      	strh	r2, [r3, #0]
  *y |= data[2];
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	7cba      	ldrb	r2, [r7, #18]
 8001550:	4313      	orrs	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	801a      	strh	r2, [r3, #0]
  *z = data[3];
 8001558:	7cfa      	ldrb	r2, [r7, #19]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}

08001566 <map>:

// from: https://github.com/arduino/ArduinoCore-API/blob/0c853c5cded2768122fae258d42b2b4c06cdb3b1/api/Common.cpp
uint16_t map(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	69b9      	ldr	r1, [r7, #24]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	1a8a      	subs	r2, r1, r2
 8001580:	fb03 f202 	mul.w	r2, r3, r2
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1acb      	subs	r3, r1, r3
 800158a:	fb92 f3f3 	sdiv	r3, r2, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <within>:

uint8_t within(uint16_t x, uint16_t y, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	80bb      	strh	r3, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
 80015be:	4613      	mov	r3, r2
 80015c0:	803b      	strh	r3, [r7, #0]
	return (x > x1) && (x < x2) && (y > y1) && (y < y2);
 80015c2:	88fa      	ldrh	r2, [r7, #6]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d90d      	bls.n	80015e6 <within+0x42>
 80015ca:	88fa      	ldrh	r2, [r7, #6]
 80015cc:	883b      	ldrh	r3, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d209      	bcs.n	80015e6 <within+0x42>
 80015d2:	88ba      	ldrh	r2, [r7, #4]
 80015d4:	8a3b      	ldrh	r3, [r7, #16]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d905      	bls.n	80015e6 <within+0x42>
 80015da:	88ba      	ldrh	r2, [r7, #4]
 80015dc:	8abb      	ldrh	r3, [r7, #20]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d201      	bcs.n	80015e6 <within+0x42>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <within+0x44>
 80015e6:	2300      	movs	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc90      	pop	{r4, r7}
 80015f2:	4770      	bx	lr

080015f4 <touchHook>:

const uint16_t yend = 479;
const uint16_t xend = 319;
void touchHook(I2C_HandleTypeDef* i2c) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	6078      	str	r0, [r7, #4]
	writeRegister8(i2c, STMPE_INT_STA, 0xFF);
 80015fc:	22ff      	movs	r2, #255	@ 0xff
 80015fe:	210b      	movs	r1, #11
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fef7 	bl	80013f4 <writeRegister8>
	uint16_t x, y;
	uint8_t z;

	// clear the buffer and take the last thing from the buffer
	while (!bufferEmpty(i2c)) {
 8001606:	e008      	b.n	800161a <touchHook+0x26>
		readPosition(i2c, &x, &y, &z);
 8001608:	f107 030b 	add.w	r3, r7, #11
 800160c:	f107 020c 	add.w	r2, r7, #12
 8001610:	f107 010e 	add.w	r1, r7, #14
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff5d 	bl	80014d4 <readPosition>
	while (!bufferEmpty(i2c)) {
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff4a 	bl	80014b4 <bufferEmpty>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <touchHook+0x14>
	}

	x = map(x, 3520, 750, 0, 319);
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	4618      	mov	r0, r3
 800162a:	f240 133f 	movw	r3, #319	@ 0x13f
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001636:	f44f 615c 	mov.w	r1, #3520	@ 0xdc0
 800163a:	f7ff ff94 	bl	8001566 <map>
 800163e:	4603      	mov	r3, r0
 8001640:	81fb      	strh	r3, [r7, #14]
	y = map(y, 3700, 750, 0, 479);
 8001642:	89bb      	ldrh	r3, [r7, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	f240 13df 	movw	r3, #479	@ 0x1df
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001652:	f640 6174 	movw	r1, #3700	@ 0xe74
 8001656:	f7ff ff86 	bl	8001566 <map>
 800165a:	4603      	mov	r3, r0
 800165c:	81bb      	strh	r3, [r7, #12]

	if (within(x, y, 25, 100, 50, yend-50)) {
 800165e:	89f8      	ldrh	r0, [r7, #14]
 8001660:	89b9      	ldrh	r1, [r7, #12]
 8001662:	f240 13df 	movw	r3, #479	@ 0x1df
 8001666:	3b32      	subs	r3, #50	@ 0x32
 8001668:	b29b      	uxth	r3, r3
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2332      	movs	r3, #50	@ 0x32
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2364      	movs	r3, #100	@ 0x64
 8001672:	2219      	movs	r2, #25
 8001674:	f7ff ff96 	bl	80015a4 <within>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <touchHook+0x9a>
		printf("Got a touch: (%d, %d) (within the bottom button)\r\n", x, y);
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	4619      	mov	r1, r3
 8001682:	89bb      	ldrh	r3, [r7, #12]
 8001684:	461a      	mov	r2, r3
 8001686:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <touchHook+0xd0>)
 8001688:	f00c f8bc 	bl	800d804 <iprintf>
	} else if (within(x, y, 125, 200, 50, yend-50)) {
		printf("Got a touch: (%d, %d) (within the top button)\r\n", x, y);
	} else {
		//printf("Touched nothing.\r\n");
	}
}
 800168c:	e016      	b.n	80016bc <touchHook+0xc8>
	} else if (within(x, y, 125, 200, 50, yend-50)) {
 800168e:	89f8      	ldrh	r0, [r7, #14]
 8001690:	89b9      	ldrh	r1, [r7, #12]
 8001692:	f240 13df 	movw	r3, #479	@ 0x1df
 8001696:	3b32      	subs	r3, #50	@ 0x32
 8001698:	b29b      	uxth	r3, r3
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2332      	movs	r3, #50	@ 0x32
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	23c8      	movs	r3, #200	@ 0xc8
 80016a2:	227d      	movs	r2, #125	@ 0x7d
 80016a4:	f7ff ff7e 	bl	80015a4 <within>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <touchHook+0xc8>
		printf("Got a touch: (%d, %d) (within the top button)\r\n", x, y);
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	4619      	mov	r1, r3
 80016b2:	89bb      	ldrh	r3, [r7, #12]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <touchHook+0xd4>)
 80016b8:	f00c f8a4 	bl	800d804 <iprintf>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	0800f944 	.word	0x0800f944
 80016c8:	0800f978 	.word	0x0800f978

080016cc <initialize_touch>:

void initialize_touch(I2C_HandleTypeDef* i2c) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	// TODO: only thing I can think of is that you need to read the version here for some reason
	// the problem is that I need to do some sort of request response thing, for read
	// it is a write then request

	printf("Initializing touch.\r\n");
 80016d4:	483b      	ldr	r0, [pc, #236]	@ (80017c4 <initialize_touch+0xf8>)
 80016d6:	f00c f905 	bl	800d8e4 <puts>

	  uint16_t v;
	  v = readRegister8(i2c, 0);
 80016da:	2100      	movs	r1, #0
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff feaf 	bl	8001440 <readRegister8>
 80016e2:	4603      	mov	r3, r0
 80016e4:	81bb      	strh	r3, [r7, #12]
	  v <<= 8;
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	81bb      	strh	r3, [r7, #12]
	  v |= readRegister8(i2c, 1);
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fea6 	bl	8001440 <readRegister8>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	81bb      	strh	r3, [r7, #12]
	  printf("STMPE version is 0x%x\r\n", v);
 80016fe:	89bb      	ldrh	r3, [r7, #12]
 8001700:	4619      	mov	r1, r3
 8001702:	4831      	ldr	r0, [pc, #196]	@ (80017c8 <initialize_touch+0xfc>)
 8001704:	f00c f87e 	bl	800d804 <iprintf>

	  writeRegister8(i2c, STMPE_SYS_CTRL1, STMPE_SYS_CTRL1_RESET);
 8001708:	2202      	movs	r2, #2
 800170a:	2103      	movs	r1, #3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe71 	bl	80013f4 <writeRegister8>

	  HAL_Delay(100);
 8001712:	2064      	movs	r0, #100	@ 0x64
 8001714:	f002 f976 	bl	8003a04 <HAL_Delay>

	  for (uint8_t i = 0; i < 65; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e007      	b.n	800172e <initialize_touch+0x62>
	    readRegister8(i2c, i);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe8c 	bl	8001440 <readRegister8>
	  for (uint8_t i = 0; i < 65; i++) {
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b40      	cmp	r3, #64	@ 0x40
 8001732:	d9f4      	bls.n	800171e <initialize_touch+0x52>
	  }

	  writeRegister8(i2c, STMPE_SYS_CTRL2, 0x0); // turn on clocks!
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fe5b 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CTRL,
 800173e:	2201      	movs	r2, #1
 8001740:	2140      	movs	r1, #64	@ 0x40
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe56 	bl	80013f4 <writeRegister8>
	                 STMPE_TSC_CTRL_XYZ | STMPE_TSC_CTRL_EN); // XYZ and enable!
	  // Serial.println(readRegister8(STMPE_TSC_CTRL), HEX);
	  writeRegister8(i2c, STMPE_INT_EN, STMPE_INT_EN_TOUCHDET);
 8001748:	2201      	movs	r2, #1
 800174a:	210a      	movs	r1, #10
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fe51 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_ADC_CTRL1, STMPE_ADC_CTRL1_10BIT |
 8001752:	2260      	movs	r2, #96	@ 0x60
 8001754:	2120      	movs	r1, #32
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe4c 	bl	80013f4 <writeRegister8>
	                                      (0x6 << 4)); // 96 clocks per conversion
	  writeRegister8(i2c, STMPE_ADC_CTRL2, STMPE_ADC_CTRL2_6_5MHZ);
 800175c:	2202      	movs	r2, #2
 800175e:	2121      	movs	r1, #33	@ 0x21
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe47 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_CFG, STMPE_TSC_CFG_4SAMPLE |
 8001766:	22a4      	movs	r2, #164	@ 0xa4
 8001768:	2141      	movs	r1, #65	@ 0x41
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe42 	bl	80013f4 <writeRegister8>
	                                    STMPE_TSC_CFG_DELAY_1MS |
	                                    STMPE_TSC_CFG_SETTLE_5MS);
	  writeRegister8(i2c, STMPE_TSC_FRACTION_Z, 0x6);
 8001770:	2206      	movs	r2, #6
 8001772:	2156      	movs	r1, #86	@ 0x56
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fe3d 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_TH, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	214a      	movs	r1, #74	@ 0x4a
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fe38 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, STMPE_FIFO_STA_RESET);
 8001784:	2201      	movs	r2, #1
 8001786:	214b      	movs	r1, #75	@ 0x4b
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fe33 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_FIFO_STA, 0); // unreset
 800178e:	2200      	movs	r2, #0
 8001790:	214b      	movs	r1, #75	@ 0x4b
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe2e 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_TSC_I_DRIVE, STMPE_TSC_I_DRIVE_50MA);
 8001798:	2201      	movs	r2, #1
 800179a:	2158      	movs	r1, #88	@ 0x58
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fe29 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_STA, 0xFF); // reset all ints
 80017a2:	22ff      	movs	r2, #255	@ 0xff
 80017a4:	210b      	movs	r1, #11
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe24 	bl	80013f4 <writeRegister8>
	  writeRegister8(i2c, STMPE_INT_CTRL,
 80017ac:	2203      	movs	r2, #3
 80017ae:	2109      	movs	r1, #9
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe1f 	bl	80013f4 <writeRegister8>
	                 STMPE_INT_CTRL_POL_LOW | STMPE_INT_CTRL_EDGE | STMPE_INT_CTRL_ENABLE);

	  printf("Finished touch setup.\r\n");
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <initialize_touch+0x100>)
 80017b8:	f00c f894 	bl	800d8e4 <puts>
//			  readPosition(i2c, &x, &y, &z);
//			  //printf("yes touch: (%d, %d, %d)\r", x, y, z);
//			  //printf("no  touch: \r");
//		  }
//	  }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800f9a8 	.word	0x0800f9a8
 80017c8:	0800f9c0 	.word	0x0800f9c0
 80017cc:	0800f9d8 	.word	0x0800f9d8

080017d0 <readTinyCodeData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void readTinyCodeData(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0c4      	sub	sp, #272	@ 0x110
 80017d4:	af02      	add	r7, sp, #8
  uint8_t readBuffer[256]; // Buffer to store the read data
  uint16_t contentLength = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102

  // First, read the content length
  HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, READ_LEN, HAL_MAX_DELAY);
 80017dc:	463a      	mov	r2, r7
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2302      	movs	r3, #2
 80017e6:	2118      	movs	r1, #24
 80017e8:	4833      	ldr	r0, [pc, #204]	@ (80018b8 <readTinyCodeData+0xe8>)
 80017ea:	f003 feed 	bl	80055c8 <HAL_I2C_Master_Receive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
  if (status != HAL_OK)
 80017f4:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d158      	bne.n	80018ae <readTinyCodeData+0xde>
    // Handle communication error
  }
  else
  {
    // If read is successful, parse the content length
    contentLength = readBuffer[0] | (readBuffer[1] << 8);
 80017fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b21a      	sxth	r2, r3
 8001808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800180c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21b      	sxth	r3, r3
 800181a:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    if (contentLength == 0 ||  contentLength > 254)
 800181e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001822:	2b00      	cmp	r3, #0
 8001824:	d042      	beq.n	80018ac <readTinyCodeData+0xdc>
 8001826:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800182a:	2bfe      	cmp	r3, #254	@ 0xfe
 800182c:	d83e      	bhi.n	80018ac <readTinyCodeData+0xdc>
    {
      return;
    }
    printf("content length %d\n", contentLength);
 800182e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001832:	4619      	mov	r1, r3
 8001834:	4821      	ldr	r0, [pc, #132]	@ (80018bc <readTinyCodeData+0xec>)
 8001836:	f00b ffe5 	bl	800d804 <iprintf>
    if (contentLength > 0 && contentLength <= 254)
 800183a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800183e:	2b00      	cmp	r3, #0
 8001840:	d035      	beq.n	80018ae <readTinyCodeData+0xde>
 8001842:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001846:	2bfe      	cmp	r3, #254	@ 0xfe
 8001848:	d831      	bhi.n	80018ae <readTinyCodeData+0xde>
    {
      // Now, read the actual content based on the content length
      status = HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDR, readBuffer, contentLength + 2, HAL_MAX_DELAY);
 800184a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800184e:	3302      	adds	r3, #2
 8001850:	b29b      	uxth	r3, r3
 8001852:	463a      	mov	r2, r7
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	9100      	str	r1, [sp, #0]
 800185a:	2118      	movs	r1, #24
 800185c:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <readTinyCodeData+0xe8>)
 800185e:	f003 feb3 	bl	80055c8 <HAL_I2C_Master_Receive>
 8001862:	4603      	mov	r3, r0
 8001864:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
      if (status != HAL_OK)
 8001868:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11e      	bne.n	80018ae <readTinyCodeData+0xde>
      }
      else
      {
        // Data is now in readBuffer[2] to readBuffer[contentLength+1], process it as needed
        // Remember to handle non-UTF-8 or other data safely
        for (int i = 0; i < contentLength; ++i)
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001876:	e00f      	b.n	8001898 <readTinyCodeData+0xc8>
        {
          printf("%c", readBuffer[2 + i]);
 8001878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800187c:	3302      	adds	r3, #2
 800187e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001882:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001886:	5cd3      	ldrb	r3, [r2, r3]
 8001888:	4618      	mov	r0, r3
 800188a:	f00b ffcd 	bl	800d828 <putchar>
        for (int i = 0; i < contentLength; ++i)
 800188e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001892:	3301      	adds	r3, #1
 8001894:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001898:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800189c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbe9      	blt.n	8001878 <readTinyCodeData+0xa8>
        }
        printf("\n");
 80018a4:	200a      	movs	r0, #10
 80018a6:	f00b ffbf 	bl	800d828 <putchar>
 80018aa:	e000      	b.n	80018ae <readTinyCodeData+0xde>
      return;
 80018ac:	bf00      	nop
    else
    {
      // No content or content length invalid
    }
  }
}
 80018ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000036c 	.word	0x2000036c
 80018bc:	0800f9f0 	.word	0x0800f9f0

080018c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  	if(htim->Instance == TIM1){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10d      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x2e>
  		  uartSend("LIST\n");
 80018d2:	480a      	ldr	r0, [pc, #40]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018d4:	f000 f8ba 	bl	8001a4c <uartSend>
  		  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018e2:	4413      	add	r3, r2
 80018e4:	2201      	movs	r2, #1
 80018e6:	4619      	mov	r1, r3
 80018e8:	4807      	ldr	r0, [pc, #28]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018ea:	f009 f999 	bl	800ac20 <HAL_UART_Receive_IT>
  	}
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	0800fa04 	.word	0x0800fa04
 8001900:	20000b08 	.word	0x20000b08
 8001904:	2000097c 	.word	0x2000097c
 8001908:	200004e8 	.word	0x200004e8

0800190c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_UART_RxCpltCallback+0x28>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d104      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x1c>
  {
    ++i;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_UART_RxCpltCallback+0x2c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <HAL_UART_RxCpltCallback+0x2c>)
 8001926:	6013      	str	r3, [r2, #0]
  }
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40004800 	.word	0x40004800
 8001938:	20000b0c 	.word	0x20000b0c

0800193c <processReceivedData>:

void processReceivedData(char *data)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  int totalOrders = atoi(data);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f00b f9bb 	bl	800ccc0 <atoi>
 800194a:	60b8      	str	r0, [r7, #8]
  data += 3;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3303      	adds	r3, #3
 8001950:	607b      	str	r3, [r7, #4]
  int processedOrders = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  if (totalOrders == 0)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06d      	beq.n	8001a38 <processReceivedData+0xfc>
  {
    return;
  }
  for (int i = 0; i < MAX_FOOD_ORDERS; ++i)
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	e00c      	b.n	800197c <processReceivedData+0x40>
  {
    FoodOrder_Init(&foodOrders[i]);
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4a34      	ldr	r2, [pc, #208]	@ (8001a40 <processReceivedData+0x104>)
 800196e:	4413      	add	r3, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff faa9 	bl	8000ec8 <FoodOrder_Init>
  for (int i = 0; i < MAX_FOOD_ORDERS; ++i)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b04      	cmp	r3, #4
 8001980:	ddef      	ble.n	8001962 <processReceivedData+0x26>
  }
  while (processedOrders < totalOrders)
 8001982:	e032      	b.n	80019ea <processReceivedData+0xae>
  {
    foodOrders[processedOrders].id = atoi(data);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f00b f99b 	bl	800ccc0 <atoi>
 800198a:	4601      	mov	r1, r0
 800198c:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <processReceivedData+0x104>)
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	3318      	adds	r3, #24
 800199c:	6019      	str	r1, [r3, #0]
    data += 11;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	330b      	adds	r3, #11
 80019a2:	607b      	str	r3, [r7, #4]
    strcpy(foodOrders[processedOrders].name, data);
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <processReceivedData+0x104>)
 80019b0:	4413      	add	r3, r2
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00c f8f4 	bl	800dba2 <strcpy>
    while (*data != '\0')
 80019ba:	e002      	b.n	80019c2 <processReceivedData+0x86>
    {
      ++data;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
    while (*data != '\0')
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f8      	bne.n	80019bc <processReceivedData+0x80>
    }
    ++data;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
    foodOrders[processedOrders].valid = 1;
 80019d0:	491b      	ldr	r1, [pc, #108]	@ (8001a40 <processReceivedData+0x104>)
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3314      	adds	r3, #20
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    ++processedOrders;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  while (processedOrders < totalOrders)
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbc8      	blt.n	8001984 <processReceivedData+0x48>
  }
  for (int i = 0; i < processedOrders; ++i)
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e01a      	b.n	8001a2e <processReceivedData+0xf2>
  {
    printf("Name: %s\r\n", foodOrders[i].name);
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <processReceivedData+0x104>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	480e      	ldr	r0, [pc, #56]	@ (8001a44 <processReceivedData+0x108>)
 8001a0a:	f00b fefb 	bl	800d804 <iprintf>
    printf("id: %d\r\n", foodOrders[i].id);
 8001a0e:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <processReceivedData+0x104>)
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3318      	adds	r3, #24
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <processReceivedData+0x10c>)
 8001a24:	f00b feee 	bl	800d804 <iprintf>
  for (int i = 0; i < processedOrders; ++i)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbe0      	blt.n	80019f8 <processReceivedData+0xbc>
 8001a36:	e000      	b.n	8001a3a <processReceivedData+0xfe>
    return;
 8001a38:	bf00      	nop
  }
}
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000a7c 	.word	0x20000a7c
 8001a44:	0800fa0c 	.word	0x0800fa0c
 8001a48:	0800fa18 	.word	0x0800fa18

08001a4c <uartSend>:
static void uartSend(char *str)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7fe fc23 	bl	80002a0 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4808      	ldr	r0, [pc, #32]	@ (8001a88 <uartSend+0x3c>)
 8001a66:	f009 f84d 	bl	800ab04 <HAL_UART_Transmit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  if (HAL_OK != result) {
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <uartSend+0x32>
	  printf("USART send failed with code %d.\r\n", result);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <uartSend+0x40>)
 8001a7a:	f00b fec3 	bl	800d804 <iprintf>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200004e8 	.word	0x200004e8
 8001a8c:	0800fa24 	.word	0x0800fa24

08001a90 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  touchHook(&hi2c1);
 8001a9a:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <HAL_GPIO_EXTI_Callback+0x18>)
 8001a9c:	f7ff fdaa 	bl	80015f4 <touchHook>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000318 	.word	0x20000318

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  for (int i = 0; i < MAX_FOOD_ORDERS; ++i)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	e00c      	b.n	8001ad2 <main+0x26>
  {
    FoodOrder_Init(&foodOrders[i]);
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4a42      	ldr	r2, [pc, #264]	@ (8001bcc <main+0x120>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9fe 	bl	8000ec8 <FoodOrder_Init>
  for (int i = 0; i < MAX_FOOD_ORDERS; ++i)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	ddef      	ble.n	8001ab8 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad8:	f001 ff1f 	bl	800391a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001adc:	f000 f886 	bl	8001bec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ae0:	f000 f8e6 	bl	8001cb0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae4:	f000 ff62 	bl	80029ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ae8:	f000 f916 	bl	8001d18 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001aec:	f000 f978 	bl	8001de0 <MX_COMP1_Init>
  MX_COMP2_Init();
 8001af0:	f000 f9a4 	bl	8001e3c <MX_COMP2_Init>
  MX_I2C1_Init();
 8001af4:	f000 f9ce 	bl	8001e94 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001af8:	f000 fa4c 	bl	8001f94 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001afc:	f000 fa96 	bl	800202c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b00:	f000 fae2 	bl	80020c8 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8001b04:	f000 fb2c 	bl	8002160 <MX_SAI1_Init>
  MX_SAI2_Init();
 8001b08:	f000 fbc2 	bl	8002290 <MX_SAI2_Init>
  MX_SPI1_Init();
 8001b0c:	f000 fc28 	bl	8002360 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001b10:	f000 fc64 	bl	80023dc <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b14:	f000 fca0 	bl	8002458 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b18:	f000 fd8c 	bl	8002634 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b1c:	f000 fdee 	bl	80026fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b20:	f000 fe52 	bl	80027c8 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001b24:	f000 feb6 	bl	8002894 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8001b28:	f000 ff38 	bl	800299c <MX_USB_OTG_FS_USB_Init>
  MX_I2C2_Init();
 8001b2c:	f000 f9f2 	bl	8001f14 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001b30:	4827      	ldr	r0, [pc, #156]	@ (8001bd0 <main+0x124>)
 8001b32:	f007 fdd3 	bl	80096dc <HAL_TIM_Base_Start_IT>
  initialize_screen(&hspi1);
 8001b36:	4827      	ldr	r0, [pc, #156]	@ (8001bd4 <main+0x128>)
 8001b38:	f7ff fb9e 	bl	8001278 <initialize_screen>
  draw(&hspi1);
 8001b3c:	4825      	ldr	r0, [pc, #148]	@ (8001bd4 <main+0x128>)
 8001b3e:	f7ff fbf5 	bl	800132c <draw>
  initialize_touch(&hi2c1);
 8001b42:	4825      	ldr	r0, [pc, #148]	@ (8001bd8 <main+0x12c>)
 8001b44:	f7ff fdc2 	bl	80016cc <initialize_touch>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    while (i > 0)
 8001b48:	e039      	b.n	8001bbe <main+0x112>
    {
      //		  printf("%c", rxBuffer[rxIndex]);
      if (rxBuffer[rxIndex] == '\n' || rxIndex >= RX_BUFFER_SIZE - 1 || rxBuffer[rxIndex] == '\r')
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <main+0x130>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <main+0x134>)
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d00c      	beq.n	8001b74 <main+0xc8>
 8001b5a:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <main+0x130>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b62:	d807      	bhi.n	8001b74 <main+0xc8>
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <main+0x130>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <main+0x134>)
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	2b0d      	cmp	r3, #13
 8001b72:	d10d      	bne.n	8001b90 <main+0xe4>
      {
        // Null-terminate the string
        rxBuffer[rxIndex] = '\0';
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <main+0x130>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <main+0x134>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]

        // Process received data
        processReceivedData(rxBuffer);
 8001b82:	4817      	ldr	r0, [pc, #92]	@ (8001be0 <main+0x134>)
 8001b84:	f7ff feda 	bl	800193c <processReceivedData>

        // Reset index
        rxIndex = 0;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <main+0x130>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e006      	b.n	8001b9e <main+0xf2>
      }
      else
      {
        // Increment index to receive the next byte
        rxIndex++;
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <main+0x130>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <main+0x130>)
 8001b9c:	801a      	strh	r2, [r3, #0]
      }
      // Prepare to receive the next byte
      HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <main+0x130>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <main+0x134>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <main+0x138>)
 8001bb0:	f009 f836 	bl	800ac20 <HAL_UART_Receive_IT>

      --i;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <main+0x13c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <main+0x13c>)
 8001bbc:	6013      	str	r3, [r2, #0]
    while (i > 0)
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <main+0x13c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1c1      	bne.n	8001b4a <main+0x9e>
    }
    readTinyCodeData();
 8001bc6:	f7ff fe03 	bl	80017d0 <readTinyCodeData>
    while (i > 0)
 8001bca:	e7f8      	b.n	8001bbe <main+0x112>
 8001bcc:	20000a7c 	.word	0x20000a7c
 8001bd0:	20000800 	.word	0x20000800
 8001bd4:	20000738 	.word	0x20000738
 8001bd8:	20000318 	.word	0x20000318
 8001bdc:	20000b08 	.word	0x20000b08
 8001be0:	2000097c 	.word	0x2000097c
 8001be4:	200004e8 	.word	0x200004e8
 8001be8:	20000b0c 	.word	0x20000b0c

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b096      	sub	sp, #88	@ 0x58
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2244      	movs	r2, #68	@ 0x44
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00b ff52 	bl	800daa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f004 f92a 	bl	8005e68 <HAL_PWREx_ControlVoltageScaling>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001c1a:	f000 ff99 	bl	8002b50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c1e:	f004 f8f3 	bl	8005e08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c22:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <SystemClock_Config+0xc0>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c28:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <SystemClock_Config+0xc0>)
 8001c2a:	f023 0318 	bic.w	r3, r3, #24
 8001c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c32:	2314      	movs	r3, #20
 8001c34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c42:	2360      	movs	r3, #96	@ 0x60
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c46:	2302      	movs	r3, #2
 8001c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001c52:	233c      	movs	r3, #60	@ 0x3c
 8001c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 f9b2 	bl	8005fd0 <HAL_RCC_OscConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c72:	f000 ff6d 	bl	8002b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fdb8 	bl	8006804 <HAL_RCC_ClockConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001c9a:	f000 ff59 	bl	8002b50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c9e:	f006 fac1 	bl	8008224 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ca2:	bf00      	nop
 8001ca4:	3758      	adds	r7, #88	@ 0x58
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a6      	sub	sp, #152	@ 0x98
 8001cb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2294      	movs	r2, #148	@ 0x94
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b fef1 	bl	800daa4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8001cc2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001cc6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001cd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <PeriphCommonClock_Config+0x64>)
 8001cf8:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f005 f83f 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d08:	f000 ff22 	bl	8002b50 <Error_Handler>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3798      	adds	r7, #152	@ 0x98
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	01110000 	.word	0x01110000

08001d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <MX_ADC1_Init+0xc0>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3a:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d40:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d52:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8e:	4811      	ldr	r0, [pc, #68]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001d90:	f001 fffc 	bl	8003d8c <HAL_ADC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001d9a:	f000 fed9 	bl	8002b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <MX_ADC1_Init+0xc4>)
 8001da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001da2:	2306      	movs	r3, #6
 8001da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001daa:	237f      	movs	r3, #127	@ 0x7f
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dae:	2304      	movs	r3, #4
 8001db0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <MX_ADC1_Init+0xbc>)
 8001dbc:	f002 f92c 	bl	8004018 <HAL_ADC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001dc6:	f000 fec3 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000258 	.word	0x20000258
 8001dd8:	50040000 	.word	0x50040000
 8001ddc:	04300002 	.word	0x04300002

08001de0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001de6:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <MX_COMP1_Init+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001dec:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_COMP1_Init+0x58>)
 8001dee:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <MX_COMP1_Init+0x50>)
 8001e1c:	f002 fda0 	bl	8004960 <HAL_COMP_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001e26:	f000 fe93 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002c0 	.word	0x200002c0
 8001e34:	40010200 	.word	0x40010200
 8001e38:	00800030 	.word	0x00800030

08001e3c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e42:	4a13      	ldr	r2, [pc, #76]	@ (8001e90 <MX_COMP2_Init+0x54>)
 8001e44:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e48:	2270      	movs	r2, #112	@ 0x70
 8001e4a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_COMP2_Init+0x50>)
 8001e78:	f002 fd72 	bl	8004960 <HAL_COMP_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001e82:	f000 fe65 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200002ec 	.word	0x200002ec
 8001e90:	40010204 	.word	0x40010204

08001e94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <MX_I2C1_Init+0x78>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <MX_I2C1_Init+0x7c>)
 8001ea2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ece:	480e      	ldr	r0, [pc, #56]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ed0:	f003 f9c6 	bl	8005260 <HAL_I2C_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001eda:	f000 fe39 	bl	8002b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4809      	ldr	r0, [pc, #36]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ee2:	f003 fef9 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001eec:	f000 fe30 	bl	8002b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_I2C1_Init+0x74>)
 8001ef4:	f003 ff3b 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001efe:	f000 fe27 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000318 	.word	0x20000318
 8001f0c:	40005400 	.word	0x40005400
 8001f10:	307075b1 	.word	0x307075b1

08001f14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <MX_I2C2_Init+0x78>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f20:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <MX_I2C2_Init+0x7c>)
 8001f22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f4e:	480e      	ldr	r0, [pc, #56]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f50:	f003 f986 	bl	8005260 <HAL_I2C_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f5a:	f000 fdf9 	bl	8002b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4809      	ldr	r0, [pc, #36]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f62:	f003 feb9 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f6c:	f000 fdf0 	bl	8002b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f70:	2100      	movs	r1, #0
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_I2C2_Init+0x74>)
 8001f74:	f003 fefb 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f7e:	f000 fde7 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000036c 	.word	0x2000036c
 8001f8c:	40005800 	.word	0x40005800
 8001f90:	307075b1 	.word	0x307075b1

08001f94 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001f98:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001f9a:	4a23      	ldr	r2, [pc, #140]	@ (8002028 <MX_LPUART1_UART_Init+0x94>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fa4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001fdc:	4811      	ldr	r0, [pc, #68]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001fde:	f008 fd41 	bl	800aa64 <HAL_UART_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fe8:	f000 fdb2 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fec:	2100      	movs	r1, #0
 8001fee:	480d      	ldr	r0, [pc, #52]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8001ff0:	f00a fd9b 	bl	800cb2a <HAL_UARTEx_SetTxFifoThreshold>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ffa:	f000 fda9 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffe:	2100      	movs	r1, #0
 8002000:	4808      	ldr	r0, [pc, #32]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8002002:	f00a fdd0 	bl	800cba6 <HAL_UARTEx_SetRxFifoThreshold>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800200c:	f000 fda0 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <MX_LPUART1_UART_Init+0x90>)
 8002012:	f00a fd51 	bl	800cab8 <HAL_UARTEx_DisableFifoMode>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800201c:	f000 fd98 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200003c0 	.word	0x200003c0
 8002028:	40008000 	.word	0x40008000

0800202c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002032:	4a24      	ldr	r2, [pc, #144]	@ (80020c4 <MX_USART2_UART_Init+0x98>)
 8002034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002036:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204a:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002056:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002058:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800205c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800205e:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002064:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002076:	4812      	ldr	r0, [pc, #72]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 8002078:	f008 fcf4 	bl	800aa64 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002082:	f000 fd65 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 800208a:	f00a fd4e 	bl	800cb2a <HAL_UARTEx_SetTxFifoThreshold>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002094:	f000 fd5c 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 800209c:	f00a fd83 	bl	800cba6 <HAL_UARTEx_SetRxFifoThreshold>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80020a6:	f000 fd53 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_USART2_UART_Init+0x94>)
 80020ac:	f00a fd04 	bl	800cab8 <HAL_UARTEx_DisableFifoMode>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80020b6:	f000 fd4b 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000454 	.word	0x20000454
 80020c4:	40004400 	.word	0x40004400

080020c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <MX_USART3_UART_Init+0x94>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020d2:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002110:	4811      	ldr	r0, [pc, #68]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002112:	f008 fca7 	bl	800aa64 <HAL_UART_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800211c:	f000 fd18 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	480d      	ldr	r0, [pc, #52]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002124:	f00a fd01 	bl	800cb2a <HAL_UARTEx_SetTxFifoThreshold>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800212e:	f000 fd0f 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002132:	2100      	movs	r1, #0
 8002134:	4808      	ldr	r0, [pc, #32]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002136:	f00a fd36 	bl	800cba6 <HAL_UARTEx_SetRxFifoThreshold>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002140:	f000 fd06 	bl	8002b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002144:	4804      	ldr	r0, [pc, #16]	@ (8002158 <MX_USART3_UART_Init+0x90>)
 8002146:	f00a fcb7 	bl	800cab8 <HAL_UARTEx_DisableFifoMode>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002150:	f000 fcfe 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200004e8 	.word	0x200004e8
 800215c:	40004800 	.word	0x40004800

08002160 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002164:	4b45      	ldr	r3, [pc, #276]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002166:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <MX_SAI1_Init+0x120>)
 8002168:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <MX_SAI1_Init+0x11c>)
 800216c:	2200      	movs	r2, #0
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002170:	4b42      	ldr	r3, [pc, #264]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002178:	2240      	movs	r2, #64	@ 0x40
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800217c:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <MX_SAI1_Init+0x11c>)
 800217e:	2200      	movs	r2, #0
 8002180:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002184:	2200      	movs	r2, #0
 8002186:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002188:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <MX_SAI1_Init+0x11c>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800219a:	4b38      	ldr	r3, [pc, #224]	@ (800227c <MX_SAI1_Init+0x11c>)
 800219c:	2200      	movs	r2, #0
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80021a0:	4b36      	ldr	r3, [pc, #216]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021a8:	4a36      	ldr	r2, [pc, #216]	@ (8002284 <MX_SAI1_Init+0x124>)
 80021aa:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80021ac:	4b33      	ldr	r3, [pc, #204]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80021b2:	4b32      	ldr	r3, [pc, #200]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80021b8:	4b30      	ldr	r3, [pc, #192]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80021be:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021dc:	2208      	movs	r2, #8
 80021de:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80021e0:	4b26      	ldr	r3, [pc, #152]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80021e6:	4b25      	ldr	r3, [pc, #148]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80021f2:	4b22      	ldr	r3, [pc, #136]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80021f8:	4b20      	ldr	r3, [pc, #128]	@ (800227c <MX_SAI1_Init+0x11c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002200:	2200      	movs	r2, #0
 8002202:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002206:	2201      	movs	r2, #1
 8002208:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <MX_SAI1_Init+0x11c>)
 800220c:	2200      	movs	r2, #0
 800220e:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002210:	481a      	ldr	r0, [pc, #104]	@ (800227c <MX_SAI1_Init+0x11c>)
 8002212:	f006 fb43 	bl	800889c <HAL_SAI_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 800221c:	f000 fc98 	bl	8002b50 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002222:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <MX_SAI1_Init+0x12c>)
 8002224:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <MX_SAI1_Init+0x128>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <MX_SAI1_Init+0x128>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002244:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <MX_SAI1_Init+0x124>)
 8002248:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_SAI1_Init+0x128>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002252:	2200      	movs	r2, #0
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <MX_SAI1_Init+0x128>)
 8002258:	2200      	movs	r2, #0
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <MX_SAI1_Init+0x128>)
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002262:	2302      	movs	r3, #2
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	4807      	ldr	r0, [pc, #28]	@ (8002288 <MX_SAI1_Init+0x128>)
 800226a:	f006 fae5 	bl	8008838 <HAL_SAI_InitProtocol>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8002274:	f000 fc6c 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000057c 	.word	0x2000057c
 8002280:	40015424 	.word	0x40015424
 8002284:	0002ee00 	.word	0x0002ee00
 8002288:	20000610 	.word	0x20000610
 800228c:	40015404 	.word	0x40015404

08002290 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002294:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002296:	4a30      	ldr	r2, [pc, #192]	@ (8002358 <MX_SAI2_Init+0xc8>)
 8002298:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800229a:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <MX_SAI2_Init+0xc4>)
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022a8:	2240      	movs	r2, #64	@ 0x40
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80022ac:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80022b2:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80022b8:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80022d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022d8:	4a20      	ldr	r2, [pc, #128]	@ (800235c <MX_SAI2_Init+0xcc>)
 80022da:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <MX_SAI2_Init+0xc4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002302:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002304:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002308:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <MX_SAI2_Init+0xc4>)
 800230c:	2208      	movs	r2, #8
 800230e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002312:	2201      	movs	r2, #1
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002318:	2200      	movs	r2, #0
 800231a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <MX_SAI2_Init+0xc4>)
 800231e:	2200      	movs	r2, #0
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002324:	2200      	movs	r2, #0
 8002326:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <MX_SAI2_Init+0xc4>)
 800232a:	2200      	movs	r2, #0
 800232c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002330:	2200      	movs	r2, #0
 8002332:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002336:	2201      	movs	r2, #1
 8002338:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <MX_SAI2_Init+0xc4>)
 800233c:	2200      	movs	r2, #0
 800233e:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	@ (8002354 <MX_SAI2_Init+0xc4>)
 8002342:	f006 faab 	bl	800889c <HAL_SAI_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 800234c:	f000 fc00 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200006a4 	.word	0x200006a4
 8002358:	40015804 	.word	0x40015804
 800235c:	0002ee00 	.word	0x0002ee00

08002360 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <MX_SPI1_Init+0x74>)
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <MX_SPI1_Init+0x78>)
 8002368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800236a:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <MX_SPI1_Init+0x74>)
 800236c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <MX_SPI1_Init+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002378:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <MX_SPI1_Init+0x74>)
 800237a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800237e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <MX_SPI1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <MX_SPI1_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <MX_SPI1_Init+0x74>)
 800238e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002392:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002394:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <MX_SPI1_Init+0x74>)
 8002396:	2218      	movs	r2, #24
 8002398:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <MX_SPI1_Init+0x74>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023ba:	2208      	movs	r2, #8
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <MX_SPI1_Init+0x74>)
 80023c0:	f006 fdb8 	bl	8008f34 <HAL_SPI_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023ca:	f000 fbc1 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000738 	.word	0x20000738
 80023d8:	40013000 	.word	0x40013000

080023dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <MX_SPI3_Init+0x74>)
 80023e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002454 <MX_SPI3_Init+0x78>)
 80023e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_SPI3_Init+0x74>)
 80023e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_SPI3_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023f4:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <MX_SPI3_Init+0x74>)
 80023f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80023fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_SPI3_Init+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MX_SPI3_Init+0x74>)
 800240a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800240e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002410:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <MX_SPI3_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <MX_SPI3_Init+0x74>)
 800242a:	2207      	movs	r2, #7
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <MX_SPI3_Init+0x74>)
 8002436:	2208      	movs	r2, #8
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	@ (8002450 <MX_SPI3_Init+0x74>)
 800243c:	f006 fd7a 	bl	8008f34 <HAL_SPI_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002446:	f000 fb83 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000079c 	.word	0x2000079c
 8002454:	40003c00 	.word	0x40003c00

08002458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b09c      	sub	sp, #112	@ 0x70
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002478:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
 8002494:	615a      	str	r2, [r3, #20]
 8002496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002498:	463b      	mov	r3, r7
 800249a:	222c      	movs	r2, #44	@ 0x2c
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f00b fb00 	bl	800daa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024a4:	4b61      	ldr	r3, [pc, #388]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024a6:	4a62      	ldr	r2, [pc, #392]	@ (8002630 <MX_TIM1_Init+0x1d8>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27000;
 80024aa:	4b60      	ldr	r3, [pc, #384]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024ac:	f646 1278 	movw	r2, #27000	@ 0x6978
 80024b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80024b8:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024ba:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80024be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b5a      	ldr	r3, [pc, #360]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024c6:	4b59      	ldr	r3, [pc, #356]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b57      	ldr	r3, [pc, #348]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024d2:	4856      	ldr	r0, [pc, #344]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024d4:	f007 f8aa 	bl	800962c <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80024de:	f000 fb37 	bl	8002b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ec:	4619      	mov	r1, r3
 80024ee:	484f      	ldr	r0, [pc, #316]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80024f0:	f007 fbd2 	bl	8009c98 <HAL_TIM_ConfigClockSource>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024fa:	f000 fb29 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024fe:	484b      	ldr	r0, [pc, #300]	@ (800262c <MX_TIM1_Init+0x1d4>)
 8002500:	f007 f95c 	bl	80097bc <HAL_TIM_PWM_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800250a:	f000 fb21 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800251a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800251e:	4619      	mov	r1, r3
 8002520:	4842      	ldr	r0, [pc, #264]	@ (800262c <MX_TIM1_Init+0x1d4>)
 8002522:	f008 f8b5 	bl	800a690 <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800252c:	f000 fb10 	bl	8002b50 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8002530:	2301      	movs	r3, #1
 8002532:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002538:	2300      	movs	r3, #0
 800253a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800253c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	4839      	ldr	r0, [pc, #228]	@ (800262c <MX_TIM1_Init+0x1d4>)
 8002546:	f008 f9a9 	bl	800a89c <HAL_TIMEx_ConfigBreakInput>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002550:	f000 fafe 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8002554:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002558:	461a      	mov	r2, r3
 800255a:	2102      	movs	r1, #2
 800255c:	4833      	ldr	r0, [pc, #204]	@ (800262c <MX_TIM1_Init+0x1d4>)
 800255e:	f008 f99d 	bl	800a89c <HAL_TIMEx_ConfigBreakInput>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002568:	f000 faf2 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	2360      	movs	r3, #96	@ 0x60
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002588:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800258c:	2200      	movs	r2, #0
 800258e:	4619      	mov	r1, r3
 8002590:	4826      	ldr	r0, [pc, #152]	@ (800262c <MX_TIM1_Init+0x1d4>)
 8002592:	f007 fa6d 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800259c:	f000 fad8 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a4:	2204      	movs	r2, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4820      	ldr	r0, [pc, #128]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80025aa:	f007 fa61 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80025b4:	f000 facc 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025bc:	2208      	movs	r2, #8
 80025be:	4619      	mov	r1, r3
 80025c0:	481a      	ldr	r0, [pc, #104]	@ (800262c <MX_TIM1_Init+0x1d4>)
 80025c2:	f007 fa55 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80025cc:	f000 fac0 	bl	8002b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80025d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80025d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80025e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80025f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	4619      	mov	r1, r3
 800260c:	4807      	ldr	r0, [pc, #28]	@ (800262c <MX_TIM1_Init+0x1d4>)
 800260e:	f008 f8c7 	bl	800a7a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM1_Init+0x1c4>
  {
    Error_Handler();
 8002618:	f000 fa9a 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800261c:	4803      	ldr	r0, [pc, #12]	@ (800262c <MX_TIM1_Init+0x1d4>)
 800261e:	f000 fe6b 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 8002622:	bf00      	nop
 8002624:	3770      	adds	r7, #112	@ 0x70
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000800 	.word	0x20000800
 8002630:	40012c00 	.word	0x40012c00

08002634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	463b      	mov	r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800265e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002660:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 800266e:	f04f 32ff 	mov.w	r2, #4294967295
 8002672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002680:	481d      	ldr	r0, [pc, #116]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 8002682:	f007 f89b 	bl	80097bc <HAL_TIM_PWM_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800268c:	f000 fa60 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4816      	ldr	r0, [pc, #88]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 80026a0:	f007 fff6 	bl	800a690 <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80026aa:	f000 fa51 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2360      	movs	r3, #96	@ 0x60
 80026b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 80026c6:	f007 f9d3 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80026d0:	f000 fa3e 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	2208      	movs	r2, #8
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 80026dc:	f007 f9c8 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80026e6:	f000 fa33 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM2_Init+0xc4>)
 80026ec:	f000 fe04 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000084c 	.word	0x2000084c

080026fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002720:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002722:	4a28      	ldr	r2, [pc, #160]	@ (80027c4 <MX_TIM3_Init+0xc8>)
 8002724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002726:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002728:	2200      	movs	r2, #0
 800272a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002732:	4b23      	ldr	r3, [pc, #140]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002740:	4b1f      	ldr	r3, [pc, #124]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002746:	481e      	ldr	r0, [pc, #120]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002748:	f007 f838 	bl	80097bc <HAL_TIM_PWM_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002752:	f000 f9fd 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	4816      	ldr	r0, [pc, #88]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 8002766:	f007 ff93 	bl	800a690 <HAL_TIMEx_MasterConfigSynchronization>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002770:	f000 f9ee 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002774:	2360      	movs	r3, #96	@ 0x60
 8002776:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	2204      	movs	r2, #4
 8002788:	4619      	mov	r1, r3
 800278a:	480d      	ldr	r0, [pc, #52]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 800278c:	f007 f970 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002796:	f000 f9db 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2208      	movs	r2, #8
 800279e:	4619      	mov	r1, r3
 80027a0:	4807      	ldr	r0, [pc, #28]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 80027a2:	f007 f965 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80027ac:	f000 f9d0 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027b0:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <MX_TIM3_Init+0xc4>)
 80027b2:	f000 fda1 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	@ 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000898 	.word	0x20000898
 80027c4:	40000400 	.word	0x40000400

080027c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027da:	463b      	mov	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027ec:	4b27      	ldr	r3, [pc, #156]	@ (800288c <MX_TIM4_Init+0xc4>)
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <MX_TIM4_Init+0xc8>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <MX_TIM4_Init+0xc4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <MX_TIM4_Init+0xc4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <MX_TIM4_Init+0xc4>)
 8002800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002804:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <MX_TIM4_Init+0xc4>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <MX_TIM4_Init+0xc4>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002812:	481e      	ldr	r0, [pc, #120]	@ (800288c <MX_TIM4_Init+0xc4>)
 8002814:	f006 ffd2 	bl	80097bc <HAL_TIM_PWM_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800281e:	f000 f997 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4816      	ldr	r0, [pc, #88]	@ (800288c <MX_TIM4_Init+0xc4>)
 8002832:	f007 ff2d 	bl	800a690 <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800283c:	f000 f988 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002840:	2360      	movs	r3, #96	@ 0x60
 8002842:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	2208      	movs	r2, #8
 8002854:	4619      	mov	r1, r3
 8002856:	480d      	ldr	r0, [pc, #52]	@ (800288c <MX_TIM4_Init+0xc4>)
 8002858:	f007 f90a 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002862:	f000 f975 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002866:	463b      	mov	r3, r7
 8002868:	220c      	movs	r2, #12
 800286a:	4619      	mov	r1, r3
 800286c:	4807      	ldr	r0, [pc, #28]	@ (800288c <MX_TIM4_Init+0xc4>)
 800286e:	f007 f8ff 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002878:	f000 f96a 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800287c:	4803      	ldr	r0, [pc, #12]	@ (800288c <MX_TIM4_Init+0xc4>)
 800287e:	f000 fd3b 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200008e4 	.word	0x200008e4
 8002890:	40000800 	.word	0x40000800

08002894 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b096      	sub	sp, #88	@ 0x58
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	615a      	str	r2, [r3, #20]
 80028b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	222c      	movs	r2, #44	@ 0x2c
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00b f8ef 	bl	800daa4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028c6:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028c8:	4a33      	ldr	r2, [pc, #204]	@ (8002998 <MX_TIM15_Init+0x104>)
 80028ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80028d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80028f2:	4828      	ldr	r0, [pc, #160]	@ (8002994 <MX_TIM15_Init+0x100>)
 80028f4:	f006 ff62 	bl	80097bc <HAL_TIM_PWM_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f000 f927 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800290a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800290e:	4619      	mov	r1, r3
 8002910:	4820      	ldr	r0, [pc, #128]	@ (8002994 <MX_TIM15_Init+0x100>)
 8002912:	f007 febd 	bl	800a690 <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800291c:	f000 f918 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002920:	2360      	movs	r3, #96	@ 0x60
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292c:	2300      	movs	r3, #0
 800292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	4813      	ldr	r0, [pc, #76]	@ (8002994 <MX_TIM15_Init+0x100>)
 8002946:	f007 f893 	bl	8009a70 <HAL_TIM_PWM_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002950:	f000 f8fe 	bl	8002b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4807      	ldr	r0, [pc, #28]	@ (8002994 <MX_TIM15_Init+0x100>)
 8002978:	f007 ff12 	bl	800a7a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002982:	f000 f8e5 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002986:	4803      	ldr	r0, [pc, #12]	@ (8002994 <MX_TIM15_Init+0x100>)
 8002988:	f000 fcb6 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 800298c:	bf00      	nop
 800298e:	3758      	adds	r7, #88	@ 0x58
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000930 	.word	0x20000930
 8002998:	40014000 	.word	0x40014000

0800299c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c2:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c6:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029c8:	f043 0310 	orr.w	r3, r3, #16
 80029cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ce:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029da:	4b52      	ldr	r3, [pc, #328]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	4a51      	ldr	r2, [pc, #324]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002b24 <MX_GPIO_Init+0x178>)
 80029f8:	f043 0320 	orr.w	r3, r3, #32
 80029fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fe:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0a:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0e:	4a45      	ldr	r2, [pc, #276]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a16:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	4a3f      	ldr	r2, [pc, #252]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	4a39      	ldr	r2, [pc, #228]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a46:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a52:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a56:	4a33      	ldr	r2, [pc, #204]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a76:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <MX_GPIO_Init+0x178>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002a82:	f003 fa95 	bl	8005fb0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002a8c:	4826      	ldr	r0, [pc, #152]	@ (8002b28 <MX_GPIO_Init+0x17c>)
 8002a8e:	f002 fbb7 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a92:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	481f      	ldr	r0, [pc, #124]	@ (8002b28 <MX_GPIO_Init+0x17c>)
 8002aac:	f002 fa16 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ab6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4818      	ldr	r0, [pc, #96]	@ (8002b28 <MX_GPIO_Init+0x17c>)
 8002ac8:	f002 fa08 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002acc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ade:	230a      	movs	r3, #10
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aec:	f002 f9f6 	bl	8004edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b08:	f002 f9e8 	bl	8004edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2028      	movs	r0, #40	@ 0x28
 8002b12:	f002 f8f2 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b16:	2028      	movs	r0, #40	@ 0x28
 8002b18:	f002 f90b 	bl	8004d32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b1c:	bf00      	nop
 8002b1e:	3738      	adds	r7, #56	@ 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	48001400 	.word	0x48001400

08002b2c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002b34:	1d39      	adds	r1, r7, #4
 8002b36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4803      	ldr	r0, [pc, #12]	@ (8002b4c <__io_putchar+0x20>)
 8002b3e:	f007 ffe1 	bl	800ab04 <HAL_UART_Transmit>
  return ch;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200003c0 	.word	0x200003c0

08002b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b54:	b672      	cpsid	i
}
 8002b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <Error_Handler+0x8>

08002b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_MspInit+0x44>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c78 <HAL_ADC_MspInit+0xd4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d154      	bne.n	8002c70 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a26      	ldr	r2, [pc, #152]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c02:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	4a1a      	ldr	r2, [pc, #104]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1a:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <HAL_ADC_MspInit+0xd8>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c26:	230f      	movs	r3, #15
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c2a:	230b      	movs	r3, #11
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	4811      	ldr	r0, [pc, #68]	@ (8002c80 <HAL_ADC_MspInit+0xdc>)
 8002c3a:	f002 f94f 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c42:	230b      	movs	r3, #11
 8002c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c54:	f002 f942 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <HAL_ADC_MspInit+0xe0>)
 8002c6c:	f002 f936 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3730      	adds	r7, #48	@ 0x30
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	50040000 	.word	0x50040000
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000800 	.word	0x48000800
 8002c84:	48000400 	.word	0x48000400

08002c88 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <HAL_COMP_MspInit+0x98>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d118      	bne.n	8002cdc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4814      	ldr	r0, [pc, #80]	@ (8002d28 <HAL_COMP_MspInit+0xa0>)
 8002cd6:	f002 f901 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002cda:	e01c      	b.n	8002d16 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_COMP_MspInit+0xa4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d117      	bne.n	8002d16 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <HAL_COMP_MspInit+0x9c>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cfe:	23c0      	movs	r3, #192	@ 0xc0
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	2303      	movs	r3, #3
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <HAL_COMP_MspInit+0xa0>)
 8002d12:	f002 f8e3 	bl	8004edc <HAL_GPIO_Init>
}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	@ 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40010200 	.word	0x40010200
 8002d24:	40021000 	.word	0x40021000
 8002d28:	48000400 	.word	0x48000400
 8002d2c:	40010204 	.word	0x40010204

08002d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0b0      	sub	sp, #192	@ 0xc0
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d48:	f107 0318 	add.w	r3, r7, #24
 8002d4c:	2294      	movs	r2, #148	@ 0x94
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f00a fea7 	bl	800daa4 <memset>
  if(hi2c->Instance==I2C1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a42      	ldr	r2, [pc, #264]	@ (8002e64 <HAL_I2C_MspInit+0x134>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d13c      	bne.n	8002dda <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d60:	2340      	movs	r3, #64	@ 0x40
 8002d62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 f807 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d78:	f7ff feea 	bl	8002b50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d80:	4a39      	ldr	r2, [pc, #228]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d88:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d9c:	2312      	movs	r3, #18
 8002d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dae:	2304      	movs	r3, #4
 8002db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002db8:	4619      	mov	r1, r3
 8002dba:	482c      	ldr	r0, [pc, #176]	@ (8002e6c <HAL_I2C_MspInit+0x13c>)
 8002dbc:	f002 f88e 	bl	8004edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc0:	4b29      	ldr	r3, [pc, #164]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002dc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dcc:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002dd8:	e03f      	b.n	8002e5a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a24      	ldr	r2, [pc, #144]	@ (8002e70 <HAL_I2C_MspInit+0x140>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d13a      	bne.n	8002e5a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dec:	f107 0318 	add.w	r3, r7, #24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 ffc5 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002dfc:	f7ff fea8 	bl	8002b50 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e04:	4a18      	ldr	r2, [pc, #96]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e06:	f043 0320 	orr.w	r3, r3, #32
 8002e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1e:	2312      	movs	r3, #18
 8002e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e30:	2304      	movs	r3, #4
 8002e32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e36:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480d      	ldr	r0, [pc, #52]	@ (8002e74 <HAL_I2C_MspInit+0x144>)
 8002e3e:	f002 f84d 	bl	8004edc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	4a08      	ldr	r2, [pc, #32]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_I2C_MspInit+0x138>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
}
 8002e5a:	bf00      	nop
 8002e5c:	37c0      	adds	r7, #192	@ 0xc0
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40005400 	.word	0x40005400
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	48000400 	.word	0x48000400
 8002e70:	40005800 	.word	0x40005800
 8002e74:	48001400 	.word	0x48001400

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b0b2      	sub	sp, #200	@ 0xc8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e90:	f107 0320 	add.w	r3, r7, #32
 8002e94:	2294      	movs	r2, #148	@ 0x94
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00a fe03 	bl	800daa4 <memset>
  if(huart->Instance==LPUART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a67      	ldr	r2, [pc, #412]	@ (8003040 <HAL_UART_MspInit+0x1c8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d13e      	bne.n	8002f26 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 ff63 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ec0:	f7ff fe46 	bl	8002b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee0:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee8:	4b56      	ldr	r3, [pc, #344]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002ef4:	f003 f85c 	bl	8005fb0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ef8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f12:	2308      	movs	r3, #8
 8002f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f18:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	484a      	ldr	r0, [pc, #296]	@ (8003048 <HAL_UART_MspInit+0x1d0>)
 8002f20:	f001 ffdc 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f24:	e088      	b.n	8003038 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a48      	ldr	r2, [pc, #288]	@ (800304c <HAL_UART_MspInit+0x1d4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d13b      	bne.n	8002fa8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f34:	2300      	movs	r3, #0
 8002f36:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f38:	f107 0320 	add.w	r3, r7, #32
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 ff1f 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002f48:	f7ff fe02 	bl	8002b50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	4a3c      	ldr	r2, [pc, #240]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f58:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f64:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f68:	4a36      	ldr	r2, [pc, #216]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f70:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002f7c:	2378      	movs	r3, #120	@ 0x78
 8002f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f94:	2307      	movs	r3, #7
 8002f96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f9a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	482b      	ldr	r0, [pc, #172]	@ (8003050 <HAL_UART_MspInit+0x1d8>)
 8002fa2:	f001 ff9b 	bl	8004edc <HAL_GPIO_Init>
}
 8002fa6:	e047      	b.n	8003038 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a29      	ldr	r2, [pc, #164]	@ (8003054 <HAL_UART_MspInit+0x1dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d142      	bne.n	8003038 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fba:	f107 0320 	add.w	r3, r7, #32
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fede 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002fca:	f7ff fdc1 	bl	8002b50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fda:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	4a16      	ldr	r2, [pc, #88]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff2:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_UART_MspInit+0x1cc>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ffe:	2330      	movs	r3, #48	@ 0x30
 8003000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003016:	2307      	movs	r3, #7
 8003018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003020:	4619      	mov	r1, r3
 8003022:	480d      	ldr	r0, [pc, #52]	@ (8003058 <HAL_UART_MspInit+0x1e0>)
 8003024:	f001 ff5a 	bl	8004edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2100      	movs	r1, #0
 800302c:	2027      	movs	r0, #39	@ 0x27
 800302e:	f001 fe64 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003032:	2027      	movs	r0, #39	@ 0x27
 8003034:	f001 fe7d 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 8003038:	bf00      	nop
 800303a:	37c8      	adds	r7, #200	@ 0xc8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40008000 	.word	0x40008000
 8003044:	40021000 	.word	0x40021000
 8003048:	48001800 	.word	0x48001800
 800304c:	40004400 	.word	0x40004400
 8003050:	48000c00 	.word	0x48000c00
 8003054:	40004800 	.word	0x40004800
 8003058:	48000800 	.word	0x48000800

0800305c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <HAL_SPI_MspInit+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d129      	bne.n	80030d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307e:	4b2e      	ldr	r3, [pc, #184]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	4a2d      	ldr	r2, [pc, #180]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003088:	6613      	str	r3, [r2, #96]	@ 0x60
 800308a:	4b2b      	ldr	r3, [pc, #172]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	4a27      	ldr	r2, [pc, #156]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030a2:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030ae:	23f0      	movs	r3, #240	@ 0xf0
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030be:	2305      	movs	r3, #5
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030cc:	f001 ff06 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030d0:	e02c      	b.n	800312c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_SPI_MspInit+0xe0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d127      	bne.n	800312c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003100:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <HAL_SPI_MspInit+0xdc>)
 8003102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800310c:	2338      	movs	r3, #56	@ 0x38
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800311c:	2306      	movs	r3, #6
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	4806      	ldr	r0, [pc, #24]	@ (8003140 <HAL_SPI_MspInit+0xe4>)
 8003128:	f001 fed8 	bl	8004edc <HAL_GPIO_Init>
}
 800312c:	bf00      	nop
 800312e:	3730      	adds	r7, #48	@ 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40013000 	.word	0x40013000
 8003138:	40021000 	.word	0x40021000
 800313c:	40003c00 	.word	0x40003c00
 8003140:	48000400 	.word	0x48000400

08003144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	@ 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_TIM_Base_MspInit+0xac>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d140      	bne.n	80031e8 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003166:	4b23      	ldr	r3, [pc, #140]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 800316c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003170:	6613      	str	r3, [r2, #96]	@ 0x60
 8003172:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800317e:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 8003184:	f043 0310 	orr.w	r3, r3, #16
 8003188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800318a:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <HAL_TIM_Base_MspInit+0xb0>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4811      	ldr	r0, [pc, #68]	@ (80031f8 <HAL_TIM_Base_MspInit+0xb4>)
 80031b2:	f001 fe93 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80031b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80031c8:	2303      	movs	r3, #3
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	4809      	ldr	r0, [pc, #36]	@ (80031f8 <HAL_TIM_Base_MspInit+0xb4>)
 80031d4:	f001 fe82 	bl	8004edc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	2019      	movs	r0, #25
 80031de:	f001 fd8c 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031e2:	2019      	movs	r0, #25
 80031e4:	f001 fda5 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	@ 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40021000 	.word	0x40021000
 80031f8:	48001000 	.word	0x48001000

080031fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	@ 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321c:	d10c      	bne.n	8003238 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800321e:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	4a30      	ldr	r2, [pc, #192]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003236:	e050      	b.n	80032da <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM3)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2a      	ldr	r2, [pc, #168]	@ (80032e8 <HAL_TIM_PWM_MspInit+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10c      	bne.n	800325c <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003242:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a27      	ldr	r2, [pc, #156]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
}
 800325a:	e03e      	b.n	80032da <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM4)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <HAL_TIM_PWM_MspInit+0xf0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d128      	bne.n	80032b8 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003266:	4b1f      	ldr	r3, [pc, #124]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6593      	str	r3, [r2, #88]	@ 0x58
 8003272:	4b1c      	ldr	r3, [pc, #112]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 8003284:	f043 0310 	orr.w	r3, r3, #16
 8003288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800328a:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032a6:	2302      	movs	r3, #2
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	480f      	ldr	r0, [pc, #60]	@ (80032f0 <HAL_TIM_PWM_MspInit+0xf4>)
 80032b2:	f001 fe13 	bl	8004edc <HAL_GPIO_Init>
}
 80032b6:	e010      	b.n	80032da <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM15)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <HAL_TIM_PWM_MspInit+0xf8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10b      	bne.n	80032da <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032c2:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	4a07      	ldr	r2, [pc, #28]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_TIM_PWM_MspInit+0xe8>)
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
}
 80032da:	bf00      	nop
 80032dc:	3730      	adds	r7, #48	@ 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	48001000 	.word	0x48001000
 80032f4:	40014000 	.word	0x40014000

080032f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	@ 0x38
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a73      	ldr	r2, [pc, #460]	@ (80034e4 <HAL_TIM_MspPostInit+0x1ec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11d      	bne.n	8003356 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800331a:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	4a72      	ldr	r2, [pc, #456]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003320:	f043 0310 	orr.w	r3, r3, #16
 8003324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003326:	4b70      	ldr	r3, [pc, #448]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003332:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003344:	2301      	movs	r3, #1
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800334c:	4619      	mov	r1, r3
 800334e:	4867      	ldr	r0, [pc, #412]	@ (80034ec <HAL_TIM_MspPostInit+0x1f4>)
 8003350:	f001 fdc4 	bl	8004edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003354:	e0c2      	b.n	80034dc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d13a      	bne.n	80033d6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003360:	4b61      	ldr	r3, [pc, #388]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003364:	4a60      	ldr	r2, [pc, #384]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800336c:	4b5e      	ldr	r3, [pc, #376]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800336e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003378:	4b5b      	ldr	r3, [pc, #364]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800337a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337c:	4a5a      	ldr	r2, [pc, #360]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003384:	4b58      	ldr	r3, [pc, #352]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003390:	2301      	movs	r3, #1
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a0:	2301      	movs	r3, #1
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ae:	f001 fd95 	bl	8004edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033c4:	2301      	movs	r3, #1
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	4848      	ldr	r0, [pc, #288]	@ (80034f0 <HAL_TIM_MspPostInit+0x1f8>)
 80033d0:	f001 fd84 	bl	8004edc <HAL_GPIO_Init>
}
 80033d4:	e082      	b.n	80034dc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <HAL_TIM_MspPostInit+0x1fc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d138      	bne.n	8003452 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e0:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	4a40      	ldr	r2, [pc, #256]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ec:	4b3e      	ldr	r3, [pc, #248]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	4a3a      	ldr	r2, [pc, #232]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003404:	4b38      	ldr	r3, [pc, #224]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003420:	2302      	movs	r3, #2
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003428:	4619      	mov	r1, r3
 800342a:	4831      	ldr	r0, [pc, #196]	@ (80034f0 <HAL_TIM_MspPostInit+0x1f8>)
 800342c:	f001 fd56 	bl	8004edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003440:	2302      	movs	r3, #2
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003448:	4619      	mov	r1, r3
 800344a:	482b      	ldr	r0, [pc, #172]	@ (80034f8 <HAL_TIM_MspPostInit+0x200>)
 800344c:	f001 fd46 	bl	8004edc <HAL_GPIO_Init>
}
 8003450:	e044      	b.n	80034dc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a29      	ldr	r2, [pc, #164]	@ (80034fc <HAL_TIM_MspPostInit+0x204>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d11d      	bne.n	8003498 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800345c:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003460:	4a21      	ldr	r2, [pc, #132]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 8003462:	f043 0308 	orr.w	r3, r3, #8
 8003466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003468:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003474:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003486:	2302      	movs	r3, #2
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800348a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800348e:	4619      	mov	r1, r3
 8003490:	481b      	ldr	r0, [pc, #108]	@ (8003500 <HAL_TIM_MspPostInit+0x208>)
 8003492:	f001 fd23 	bl	8004edc <HAL_GPIO_Init>
}
 8003496:	e021      	b.n	80034dc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_TIM_MspPostInit+0x20c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d11c      	bne.n	80034dc <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	4a10      	ldr	r2, [pc, #64]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <HAL_TIM_MspPostInit+0x1f0>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80034cc:	230e      	movs	r3, #14
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4806      	ldr	r0, [pc, #24]	@ (80034f0 <HAL_TIM_MspPostInit+0x1f8>)
 80034d8:	f001 fd00 	bl	8004edc <HAL_GPIO_Init>
}
 80034dc:	bf00      	nop
 80034de:	3738      	adds	r7, #56	@ 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	48001000 	.word	0x48001000
 80034f0:	48000400 	.word	0x48000400
 80034f4:	40000400 	.word	0x40000400
 80034f8:	48000800 	.word	0x48000800
 80034fc:	40000800 	.word	0x40000800
 8003500:	48000c00 	.word	0x48000c00
 8003504:	40014000 	.word	0x40014000

08003508 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a50      	ldr	r2, [pc, #320]	@ (8003658 <HAL_SAI_MspInit+0x150>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d124      	bne.n	8003564 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800351a:	4b50      	ldr	r3, [pc, #320]	@ (800365c <HAL_SAI_MspInit+0x154>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003522:	4b4f      	ldr	r3, [pc, #316]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 8003524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003526:	4a4e      	ldr	r2, [pc, #312]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 8003528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800352c:	6613      	str	r3, [r2, #96]	@ 0x60
 800352e:	4b4c      	ldr	r3, [pc, #304]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800353a:	4b48      	ldr	r3, [pc, #288]	@ (800365c <HAL_SAI_MspInit+0x154>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a46      	ldr	r2, [pc, #280]	@ (800365c <HAL_SAI_MspInit+0x154>)
 8003542:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003544:	2374      	movs	r3, #116	@ 0x74
 8003546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003554:	230d      	movs	r3, #13
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4619      	mov	r1, r3
 800355e:	4841      	ldr	r0, [pc, #260]	@ (8003664 <HAL_SAI_MspInit+0x15c>)
 8003560:	f001 fcbc 	bl	8004edc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3f      	ldr	r2, [pc, #252]	@ (8003668 <HAL_SAI_MspInit+0x160>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d135      	bne.n	80035da <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_SAI_MspInit+0x154>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003576:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 8003578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357a:	4a39      	ldr	r2, [pc, #228]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 800357c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003580:	6613      	str	r3, [r2, #96]	@ 0x60
 8003582:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800358e:	4b33      	ldr	r3, [pc, #204]	@ (800365c <HAL_SAI_MspInit+0x154>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3301      	adds	r3, #1
 8003594:	4a31      	ldr	r2, [pc, #196]	@ (800365c <HAL_SAI_MspInit+0x154>)
 8003596:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003598:	2308      	movs	r3, #8
 800359a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035a8:	230d      	movs	r3, #13
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	482c      	ldr	r0, [pc, #176]	@ (8003664 <HAL_SAI_MspInit+0x15c>)
 80035b4:	f001 fc92 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80035b8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035ca:	230d      	movs	r3, #13
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4825      	ldr	r0, [pc, #148]	@ (800366c <HAL_SAI_MspInit+0x164>)
 80035d6:	f001 fc81 	bl	8004edc <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <HAL_SAI_MspInit+0x168>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d135      	bne.n	8003650 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_SAI_MspInit+0x16c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 80035ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80035f8:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <HAL_SAI_MspInit+0x158>)
 80035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_SAI_MspInit+0x16c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	4a1a      	ldr	r2, [pc, #104]	@ (8003674 <HAL_SAI_MspInit+0x16c>)
 800360c:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800360e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8003612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003620:	230d      	movs	r3, #13
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	4813      	ldr	r0, [pc, #76]	@ (8003678 <HAL_SAI_MspInit+0x170>)
 800362c:	f001 fc56 	bl	8004edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003630:	2340      	movs	r3, #64	@ 0x40
 8003632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003640:	230d      	movs	r3, #13
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	4619      	mov	r1, r3
 800364a:	480c      	ldr	r0, [pc, #48]	@ (800367c <HAL_SAI_MspInit+0x174>)
 800364c:	f001 fc46 	bl	8004edc <HAL_GPIO_Init>

    }
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40015404 	.word	0x40015404
 800365c:	20000b10 	.word	0x20000b10
 8003660:	40021000 	.word	0x40021000
 8003664:	48001000 	.word	0x48001000
 8003668:	40015424 	.word	0x40015424
 800366c:	48001400 	.word	0x48001400
 8003670:	40015804 	.word	0x40015804
 8003674:	20000b14 	.word	0x20000b14
 8003678:	48000400 	.word	0x48000400
 800367c:	48000800 	.word	0x48000800

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <NMI_Handler+0x4>

08003688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <MemManage_Handler+0x4>

08003698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <BusFault_Handler+0x4>

080036a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <UsageFault_Handler+0x4>

080036a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d6:	f000 f975 	bl	80039c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80036e6:	f006 f8c0 	bl	800986a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000800 	.word	0x20000800

080036f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <USART3_IRQHandler+0x10>)
 80036fa:	f007 fadd 	bl	800acb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200004e8 	.word	0x200004e8

08003708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800370c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003710:	f001 fd8e 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}

08003718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return 1;
 800371c:	2301      	movs	r3, #1
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_kill>:

int _kill(int pid, int sig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003732:	f00a fa09 	bl	800db48 <__errno>
 8003736:	4603      	mov	r3, r0
 8003738:	2216      	movs	r2, #22
 800373a:	601a      	str	r2, [r3, #0]
  return -1;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_exit>:

void _exit (int status)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffe7 	bl	8003728 <_kill>
  while (1) {}    /* Make sure we hang here */
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <_exit+0x12>

0800375e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e00a      	b.n	8003786 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003770:	f3af 8000 	nop.w
 8003774:	4601      	mov	r1, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	60ba      	str	r2, [r7, #8]
 800377c:	b2ca      	uxtb	r2, r1
 800377e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	dbf0      	blt.n	8003770 <_read+0x12>
  }

  return len;
 800378e:	687b      	ldr	r3, [r7, #4]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e009      	b.n	80037be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	60ba      	str	r2, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f9ba 	bl	8002b2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	dbf1      	blt.n	80037aa <_write+0x12>
  }
  return len;
 80037c6:	687b      	ldr	r3, [r7, #4]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_close>:

int _close(int file)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037f8:	605a      	str	r2, [r3, #4]
  return 0;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_isatty>:

int _isatty(int file)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003840:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <_sbrk+0x5c>)
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <_sbrk+0x60>)
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <_sbrk+0x64>)
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <_sbrk+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003868:	f00a f96e 	bl	800db48 <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	220c      	movs	r2, #12
 8003870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e009      	b.n	800388c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	4a05      	ldr	r2, [pc, #20]	@ (800389c <_sbrk+0x64>)
 8003888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200a0000 	.word	0x200a0000
 8003898:	00000400 	.word	0x00000400
 800389c:	20000b18 	.word	0x20000b18
 80038a0:	20000c70 	.word	0x20000c70

080038a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <SystemInit+0x20>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <SystemInit+0x20>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038cc:	f7ff ffea 	bl	80038a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d0:	480c      	ldr	r0, [pc, #48]	@ (8003904 <LoopForever+0x6>)
  ldr r1, =_edata
 80038d2:	490d      	ldr	r1, [pc, #52]	@ (8003908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <LoopForever+0xe>)
  movs r3, #0
 80038d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d8:	e002      	b.n	80038e0 <LoopCopyDataInit>

080038da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038de:	3304      	adds	r3, #4

080038e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e4:	d3f9      	bcc.n	80038da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003914 <LoopForever+0x16>)
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ec:	e001      	b.n	80038f2 <LoopFillZerobss>

080038ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f0:	3204      	adds	r2, #4

080038f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f4:	d3fb      	bcc.n	80038ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038f6:	f00a f92d 	bl	800db54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038fa:	f7fe f8d7 	bl	8001aac <main>

080038fe <LoopForever>:

LoopForever:
    b LoopForever
 80038fe:	e7fe      	b.n	80038fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003900:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003908:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800390c:	08010338 	.word	0x08010338
  ldr r2, =_sbss
 8003910:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8003914:	20000c6c 	.word	0x20000c6c

08003918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC1_IRQHandler>

0800391a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f001 f9dd 	bl	8004ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800392a:	2000      	movs	r0, #0
 800392c:	f000 f80e 	bl	800394c <HAL_InitTick>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	71fb      	strb	r3, [r7, #7]
 800393a:	e001      	b.n	8003940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800393c:	f7ff f90e 	bl	8002b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003940:	79fb      	ldrb	r3, [r7, #7]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003958:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <HAL_InitTick+0x6c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d023      	beq.n	80039a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <HAL_InitTick+0x70>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <HAL_InitTick+0x6c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800396e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f9e9 	bl	8004d4e <HAL_SYSTICK_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d809      	bhi.n	800399c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f001 f9b3 	bl	8004cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <HAL_InitTick+0x74>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e007      	b.n	80039ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	e004      	b.n	80039ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e001      	b.n	80039ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000070 	.word	0x20000070
 80039bc:	20000068 	.word	0x20000068
 80039c0:	2000006c 	.word	0x2000006c

080039c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_IncTick+0x20>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_IncTick+0x24>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	@ (80039e8 <HAL_IncTick+0x24>)
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000070 	.word	0x20000070
 80039e8:	20000b1c 	.word	0x20000b1c

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <HAL_GetTick+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000b1c 	.word	0x20000b1c

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff ffee 	bl	80039ec <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d005      	beq.n	8003a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_Delay+0x44>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2a:	bf00      	nop
 8003a2c:	f7ff ffde 	bl	80039ec <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d8f7      	bhi.n	8003a2c <HAL_Delay+0x28>
  {
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000070 	.word	0x20000070

08003a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3360      	adds	r3, #96	@ 0x60
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <LL_ADC_SetOffset+0x44>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	03fff000 	.word	0x03fff000

08003afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3360      	adds	r3, #96	@ 0x60
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3360      	adds	r3, #96	@ 0x60
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	615a      	str	r2, [r3, #20]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3330      	adds	r3, #48	@ 0x30
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	211f      	movs	r1, #31
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0e9b      	lsrs	r3, r3, #26
 8003bbc:	f003 011f 	and.w	r1, r3, #31
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3314      	adds	r3, #20
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0e5b      	lsrs	r3, r3, #25
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0d1b      	lsrs	r3, r3, #20
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2107      	movs	r1, #7
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	401a      	ands	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	0d1b      	lsrs	r3, r3, #20
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	431a      	orrs	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0318 	and.w	r3, r3, #24
 8003c56:	4908      	ldr	r1, [pc, #32]	@ (8003c78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c58:	40d9      	lsrs	r1, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	0007ffff 	.word	0x0007ffff

08003c7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6093      	str	r3, [r2, #8]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb4:	d101      	bne.n	8003cba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <LL_ADC_IsEnabled+0x18>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_ADC_IsEnabled+0x1a>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d101      	bne.n	8003d56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d101      	bne.n	8003d7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e129      	b.n	8003ffa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe fef5 	bl	8002ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff67 	bl	8003ca0 <LL_ADC_IsDeepPowerDownEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff4d 	bl	8003c7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff82 	bl	8003cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff66 	bl	8003cc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfc:	4b81      	ldr	r3, [pc, #516]	@ (8004004 <HAL_ADC_Init+0x278>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	4a81      	ldr	r2, [pc, #516]	@ (8004008 <HAL_ADC_Init+0x27c>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e10:	e002      	b.n	8003e18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f9      	bne.n	8003e12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff64 	bl	8003cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff75 	bl	8003d3e <LL_ADC_REG_IsConversionOngoing>
 8003e54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 80c2 	bne.w	8003fe8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 80be 	bne.w	8003fe8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e74:	f043 0202 	orr.w	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff49 	bl	8003d18 <LL_ADC_IsEnabled>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e8c:	485f      	ldr	r0, [pc, #380]	@ (800400c <HAL_ADC_Init+0x280>)
 8003e8e:	f7ff ff43 	bl	8003d18 <LL_ADC_IsEnabled>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	485c      	ldr	r0, [pc, #368]	@ (8004010 <HAL_ADC_Init+0x284>)
 8003ea0:	f7ff fdd4 	bl	8003a4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7e5b      	ldrb	r3, [r3, #25]
 8003ea8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003eb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003eba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d106      	bne.n	8003ee0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	045b      	lsls	r3, r3, #17
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_ADC_Init+0x288>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	69b9      	ldr	r1, [r7, #24]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff25 	bl	8003d64 <LL_ADC_INJ_IsConversionOngoing>
 8003f1a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d140      	bne.n	8003fa4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d13d      	bne.n	8003fa4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7e1b      	ldrb	r3, [r3, #24]
 8003f30:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f32:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f4a:	f023 0306 	bic.w	r3, r3, #6
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d118      	bne.n	8003f94 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f84:	430a      	orrs	r2, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	e007      	b.n	8003fa4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	f023 010f 	bic.w	r1, r3, #15
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc4:	e007      	b.n	8003fd6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 020f 	bic.w	r2, r2, #15
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fe6:	e007      	b.n	8003ff8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fec:	f043 0210 	orr.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000068 	.word	0x20000068
 8004008:	053e2d63 	.word	0x053e2d63
 800400c:	50040000 	.word	0x50040000
 8004010:	50040300 	.word	0x50040300
 8004014:	fff0c007 	.word	0xfff0c007

08004018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b0b6      	sub	sp, #216	@ 0xd8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x22>
 8004036:	2302      	movs	r3, #2
 8004038:	e3d5      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x7ce>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fe79 	bl	8003d3e <LL_ADC_REG_IsConversionOngoing>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 83ba 	bne.w	80047c8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b05      	cmp	r3, #5
 8004062:	d824      	bhi.n	80040ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	3b02      	subs	r3, #2
 800406a:	2b03      	cmp	r3, #3
 800406c:	d81b      	bhi.n	80040a6 <HAL_ADC_ConfigChannel+0x8e>
 800406e:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <HAL_ADC_ConfigChannel+0x5c>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	08004085 	.word	0x08004085
 8004078:	0800408d 	.word	0x0800408d
 800407c:	08004095 	.word	0x08004095
 8004080:	0800409d 	.word	0x0800409d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004084:	230c      	movs	r3, #12
 8004086:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800408a:	e010      	b.n	80040ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800408c:	2312      	movs	r3, #18
 800408e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004092:	e00c      	b.n	80040ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004094:	2318      	movs	r3, #24
 8004096:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800409a:	e008      	b.n	80040ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800409c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040a4:	e003      	b.n	80040ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80040a6:	2306      	movs	r3, #6
 80040a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80040bc:	f7ff fd62 	bl	8003b84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fe3a 	bl	8003d3e <LL_ADC_REG_IsConversionOngoing>
 80040ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fe46 	bl	8003d64 <LL_ADC_INJ_IsConversionOngoing>
 80040d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 81bf 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 81ba 	bne.w	8004464 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f8:	d10f      	bne.n	800411a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	4619      	mov	r1, r3
 8004106:	f7ff fd69 	bl	8003bdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fd23 	bl	8003b5e <LL_ADC_SetSamplingTimeCommonConfig>
 8004118:	e00e      	b.n	8004138 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	461a      	mov	r2, r3
 8004128:	f7ff fd58 	bl	8003bdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fd13 	bl	8003b5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	08db      	lsrs	r3, r3, #3
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d00a      	beq.n	8004170 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800416a:	f7ff fca3 	bl	8003ab4 <LL_ADC_SetOffset>
 800416e:	e179      	b.n	8004464 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fcc0 	bl	8003afc <LL_ADC_GetOffsetChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_ADC_ConfigChannel+0x184>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fcb5 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	f003 021f 	and.w	r2, r3, #31
 800419a:	e01e      	b.n	80041da <HAL_ADC_ConfigChannel+0x1c2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fcaa 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e004      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80041ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x1da>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0e9b      	lsrs	r3, r3, #26
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	e018      	b.n	8004224 <HAL_ADC_ConfigChannel+0x20c>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800420a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800420e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e004      	b.n	8004224 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800421a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004224:	429a      	cmp	r2, r3
 8004226:	d106      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fc79 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fc5d 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004242:	4603      	mov	r3, r0
 8004244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x24a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fc52 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004258:	4603      	mov	r3, r0
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	e01e      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x288>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fc47 	bl	8003afc <LL_ADC_GetOffsetChannel>
 800426e:	4603      	mov	r3, r0
 8004270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e004      	b.n	800429e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004294:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004298:	fab3 f383 	clz	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x2a0>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0e9b      	lsrs	r3, r3, #26
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	e018      	b.n	80042ea <HAL_ADC_ConfigChannel+0x2d2>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e004      	b.n	80042ea <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80042e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042e4:	fab3 f383 	clz	r3, r3
 80042e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d106      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fc16 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fbfa 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004308:	4603      	mov	r3, r0
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x310>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2102      	movs	r1, #2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fbef 	bl	8003afc <LL_ADC_GetOffsetChannel>
 800431e:	4603      	mov	r3, r0
 8004320:	0e9b      	lsrs	r3, r3, #26
 8004322:	f003 021f 	and.w	r2, r3, #31
 8004326:	e01e      	b.n	8004366 <HAL_ADC_ConfigChannel+0x34e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2102      	movs	r1, #2
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fbe4 	bl	8003afc <LL_ADC_GetOffsetChannel>
 8004334:	4603      	mov	r3, r0
 8004336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004346:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800434a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004356:	2320      	movs	r3, #32
 8004358:	e004      	b.n	8004364 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	fab3 f383 	clz	r3, r3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <HAL_ADC_ConfigChannel+0x366>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0e9b      	lsrs	r3, r3, #26
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	e014      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x390>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800438c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800438e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004392:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800439a:	2320      	movs	r3, #32
 800439c:	e004      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800439e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d106      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fbb7 	bl	8003b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2103      	movs	r1, #3
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fb9b 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x3ce>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2103      	movs	r1, #3
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fb90 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	0e9b      	lsrs	r3, r3, #26
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	e017      	b.n	8004416 <HAL_ADC_ConfigChannel+0x3fe>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2103      	movs	r1, #3
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fb85 	bl	8003afc <LL_ADC_GetOffsetChannel>
 80043f2:	4603      	mov	r3, r0
 80043f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800440c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <HAL_ADC_ConfigChannel+0x416>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	0e9b      	lsrs	r3, r3, #26
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	e011      	b.n	8004452 <HAL_ADC_ConfigChannel+0x43a>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800443c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004446:	2320      	movs	r3, #32
 8004448:	e003      	b.n	8004452 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800444a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004452:	429a      	cmp	r2, r3
 8004454:	d106      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	2103      	movs	r1, #3
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fb62 	bl	8003b28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fc55 	bl	8003d18 <LL_ADC_IsEnabled>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 813f 	bne.w	80046f4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f7ff fbd6 	bl	8003c34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a8e      	ldr	r2, [pc, #568]	@ (80046c8 <HAL_ADC_ConfigChannel+0x6b0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f040 8130 	bne.w	80046f4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x4a4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0e9b      	lsrs	r3, r3, #26
 80044aa:	3301      	adds	r3, #1
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e019      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4d8>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80044d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b09      	cmp	r3, #9
 80044e8:	bf94      	ite	ls
 80044ea:	2301      	movls	r3, #1
 80044ec:	2300      	movhi	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d079      	beq.n	80045e8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x4f8>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	3301      	adds	r3, #1
 8004508:	069b      	lsls	r3, r3, #26
 800450a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800450e:	e015      	b.n	800453c <HAL_ADC_ConfigChannel+0x524>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800451e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004520:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e003      	b.n	8004534 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800452c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3301      	adds	r3, #1
 8004536:	069b      	lsls	r3, r3, #26
 8004538:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_ADC_ConfigChannel+0x544>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	e017      	b.n	800458c <HAL_ADC_ConfigChannel+0x574>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800456a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800456e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x59a>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	3301      	adds	r3, #1
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	4613      	mov	r3, r2
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	4413      	add	r3, r2
 80045ae:	051b      	lsls	r3, r3, #20
 80045b0:	e018      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x5cc>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80045ca:	2320      	movs	r3, #32
 80045cc:	e003      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e4:	430b      	orrs	r3, r1
 80045e6:	e080      	b.n	80046ea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x5ec>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	069b      	lsls	r3, r3, #26
 80045fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004602:	e015      	b.n	8004630 <HAL_ADC_ConfigChannel+0x618>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e003      	b.n	8004628 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3301      	adds	r3, #1
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x638>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	e017      	b.n	8004680 <HAL_ADC_ConfigChannel+0x668>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	61bb      	str	r3, [r7, #24]
  return result;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004668:	2320      	movs	r3, #32
 800466a:	e003      	b.n	8004674 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3301      	adds	r3, #1
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	2101      	movs	r1, #1
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x694>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	3b1e      	subs	r3, #30
 80046a4:	051b      	lsls	r3, r3, #20
 80046a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046aa:	e01d      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x6d0>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	60fb      	str	r3, [r7, #12]
  return result;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e005      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x6bc>
 80046c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f003 021f 	and.w	r2, r3, #31
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	3b1e      	subs	r3, #30
 80046e2:	051b      	lsls	r3, r3, #20
 80046e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7ff fa74 	bl	8003bdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <HAL_ADC_ConfigChannel+0x7d8>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d06c      	beq.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004700:	483c      	ldr	r0, [pc, #240]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004702:	f7ff f9c9 	bl	8003a98 <LL_ADC_GetCommonPathInternalCh>
 8004706:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3a      	ldr	r2, [pc, #232]	@ (80047f8 <HAL_ADC_ConfigChannel+0x7e0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d127      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d121      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a35      	ldr	r2, [pc, #212]	@ (80047fc <HAL_ADC_ConfigChannel+0x7e4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d157      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800472a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800472e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004732:	4619      	mov	r1, r3
 8004734:	482f      	ldr	r0, [pc, #188]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004736:	f7ff f99c 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800473a:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <HAL_ADC_ConfigChannel+0x7e8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	4a30      	ldr	r2, [pc, #192]	@ (8004804 <HAL_ADC_ConfigChannel+0x7ec>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004754:	e002      	b.n	800475c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3b01      	subs	r3, #1
 800475a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f9      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004762:	e03a      	b.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a27      	ldr	r2, [pc, #156]	@ (8004808 <HAL_ADC_ConfigChannel+0x7f0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d113      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800476e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004772:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10d      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <HAL_ADC_ConfigChannel+0x7e4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d12a      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800478c:	4619      	mov	r1, r3
 800478e:	4819      	ldr	r0, [pc, #100]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004790:	f7ff f96f 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004794:	e021      	b.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <HAL_ADC_ConfigChannel+0x7f4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d11c      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d116      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <HAL_ADC_ConfigChannel+0x7e4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d111      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047be:	4619      	mov	r1, r3
 80047c0:	480c      	ldr	r0, [pc, #48]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7dc>)
 80047c2:	f7ff f956 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
 80047c6:	e008      	b.n	80047da <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80047e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	37d8      	adds	r7, #216	@ 0xd8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	80080000 	.word	0x80080000
 80047f4:	50040300 	.word	0x50040300
 80047f8:	c7520000 	.word	0xc7520000
 80047fc:	50040000 	.word	0x50040000
 8004800:	20000068 	.word	0x20000068
 8004804:	053e2d63 	.word	0x053e2d63
 8004808:	cb840000 	.word	0xcb840000
 800480c:	80000001 	.word	0x80000001

08004810 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <LL_EXTI_EnableIT_0_31+0x20>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4904      	ldr	r1, [pc, #16]	@ (8004830 <LL_EXTI_EnableIT_0_31+0x20>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40010400 	.word	0x40010400

08004834 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <LL_EXTI_DisableIT_0_31+0x24>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	43db      	mvns	r3, r3
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <LL_EXTI_DisableIT_0_31+0x24>)
 8004846:	4013      	ands	r3, r2
 8004848:	600b      	str	r3, [r1, #0]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010400 	.word	0x40010400

0800485c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <LL_EXTI_EnableEvent_0_31+0x20>)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4313      	orrs	r3, r2
 800486e:	604b      	str	r3, [r1, #4]

}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40010400 	.word	0x40010400

08004880 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	43db      	mvns	r3, r3
 8004890:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004892:	4013      	ands	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010400 	.word	0x40010400

080048a8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4904      	ldr	r1, [pc, #16]	@ (80048c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]

}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40010400 	.word	0x40010400

080048cc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	43db      	mvns	r3, r3
 80048dc:	4904      	ldr	r1, [pc, #16]	@ (80048f0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80048de:	4013      	ands	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]

}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010400 	.word	0x40010400

080048f4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	4904      	ldr	r1, [pc, #16]	@ (8004914 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40010400 	.word	0x40010400

08004918 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004920:	4b06      	ldr	r3, [pc, #24]	@ (800493c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	43db      	mvns	r3, r3
 8004928:	4904      	ldr	r1, [pc, #16]	@ (800493c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800492a:	4013      	ands	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010400 	.word	0x40010400

08004940 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004948:	4a04      	ldr	r2, [pc, #16]	@ (800495c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6153      	str	r3, [r2, #20]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010400 	.word	0x40010400

08004960 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e0d1      	b.n	8004b20 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800498a:	d102      	bne.n	8004992 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0c6      	b.n	8004b20 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d115      	bne.n	80049ca <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ac:	4b5f      	ldr	r3, [pc, #380]	@ (8004b2c <HAL_COMP_Init+0x1cc>)
 80049ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b2c <HAL_COMP_Init+0x1cc>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80049b8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b2c <HAL_COMP_Init+0x1cc>)
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fe f95f 	bl	8002c88 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b4b      	ldr	r3, [pc, #300]	@ (8004b30 <HAL_COMP_Init+0x1d0>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a16:	d106      	bne.n	8004a26 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004a18:	4b46      	ldr	r3, [pc, #280]	@ (8004b34 <HAL_COMP_Init+0x1d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a45      	ldr	r2, [pc, #276]	@ (8004b34 <HAL_COMP_Init+0x1d4>)
 8004a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e005      	b.n	8004a32 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004a26:	4b43      	ldr	r3, [pc, #268]	@ (8004b34 <HAL_COMP_Init+0x1d4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a42      	ldr	r2, [pc, #264]	@ (8004b34 <HAL_COMP_Init+0x1d4>)
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a30:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_COMP_Init+0x10e>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d113      	bne.n	8004a6e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a46:	4b3c      	ldr	r3, [pc, #240]	@ (8004b38 <HAL_COMP_Init+0x1d8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b3c <HAL_COMP_Init+0x1dc>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004a60:	e002      	b.n	8004a68 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f9      	bne.n	8004a62 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a33      	ldr	r2, [pc, #204]	@ (8004b40 <HAL_COMP_Init+0x1e0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d102      	bne.n	8004a7e <HAL_COMP_Init+0x11e>
 8004a78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a7c:	e001      	b.n	8004a82 <HAL_COMP_Init+0x122>
 8004a7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a82:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d037      	beq.n	8004b00 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004a9c:	6938      	ldr	r0, [r7, #16]
 8004a9e:	f7ff ff03 	bl	80048a8 <LL_EXTI_EnableRisingTrig_0_31>
 8004aa2:	e002      	b.n	8004aaa <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004aa4:	6938      	ldr	r0, [r7, #16]
 8004aa6:	f7ff ff11 	bl	80048cc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004ab6:	6938      	ldr	r0, [r7, #16]
 8004ab8:	f7ff ff1c 	bl	80048f4 <LL_EXTI_EnableFallingTrig_0_31>
 8004abc:	e002      	b.n	8004ac4 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004abe:	6938      	ldr	r0, [r7, #16]
 8004ac0:	f7ff ff2a 	bl	8004918 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004ac4:	6938      	ldr	r0, [r7, #16]
 8004ac6:	f7ff ff3b 	bl	8004940 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004ad6:	6938      	ldr	r0, [r7, #16]
 8004ad8:	f7ff fec0 	bl	800485c <LL_EXTI_EnableEvent_0_31>
 8004adc:	e002      	b.n	8004ae4 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004ade:	6938      	ldr	r0, [r7, #16]
 8004ae0:	f7ff fece 	bl	8004880 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004af0:	6938      	ldr	r0, [r7, #16]
 8004af2:	f7ff fe8d 	bl	8004810 <LL_EXTI_EnableIT_0_31>
 8004af6:	e009      	b.n	8004b0c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004af8:	6938      	ldr	r0, [r7, #16]
 8004afa:	f7ff fe9b 	bl	8004834 <LL_EXTI_DisableIT_0_31>
 8004afe:	e005      	b.n	8004b0c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004b00:	6938      	ldr	r0, [r7, #16]
 8004b02:	f7ff febd 	bl	8004880 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004b06:	6938      	ldr	r0, [r7, #16]
 8004b08:	f7ff fe94 	bl	8004834 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	ff207d03 	.word	0xff207d03
 8004b34:	40010204 	.word	0x40010204
 8004b38:	20000068 	.word	0x20000068
 8004b3c:	053e2d63 	.word	0x053e2d63
 8004b40:	40010200 	.word	0x40010200

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db0a      	blt.n	8004c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <__NVIC_SetPriority+0x4c>)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c0c:	e00a      	b.n	8004c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4908      	ldr	r1, [pc, #32]	@ (8004c34 <__NVIC_SetPriority+0x50>)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	761a      	strb	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf28      	it	cs
 8004c56:	2304      	movcs	r3, #4
 8004c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d902      	bls.n	8004c68 <NVIC_EncodePriority+0x30>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b03      	subs	r3, #3
 8004c66:	e000      	b.n	8004c6a <NVIC_EncodePriority+0x32>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	4313      	orrs	r3, r2
         );
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	@ 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb0:	d301      	bcc.n	8004cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e00f      	b.n	8004cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	f7ff ff8e 	bl	8004be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff29 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0c:	f7ff ff3e 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff8e 	bl	8004c38 <NVIC_EncodePriority>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff5d 	bl	8004be4 <__NVIC_SetPriority>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff31 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ffa2 	bl	8004ca0 <SysTick_Config>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d008      	beq.n	8004d90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e040      	b.n	8004e12 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 020e 	bic.w	r2, r2, #14
 8004d9e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dae:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	f003 021c 	and.w	r2, r3, #28
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ddc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dfe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d005      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e047      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 020e 	bic.w	r2, r2, #14
 8004e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f003 021c 	and.w	r2, r3, #28
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00c      	beq.n	8004eb2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004eb0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
    }
  }
  return status;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eea:	e166      	b.n	80051ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8158 	beq.w	80051b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d005      	beq.n	8004f1c <HAL_GPIO_Init+0x40>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d130      	bne.n	8004f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f52:	2201      	movs	r2, #1
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0201 	and.w	r2, r3, #1
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d017      	beq.n	8004fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	2203      	movs	r2, #3
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d123      	bne.n	800500e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	08da      	lsrs	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3208      	adds	r2, #8
 8004fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	08da      	lsrs	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3208      	adds	r2, #8
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0203 	and.w	r2, r3, #3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80b2 	beq.w	80051b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005050:	4b61      	ldr	r3, [pc, #388]	@ (80051d8 <HAL_GPIO_Init+0x2fc>)
 8005052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005054:	4a60      	ldr	r2, [pc, #384]	@ (80051d8 <HAL_GPIO_Init+0x2fc>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6613      	str	r3, [r2, #96]	@ 0x60
 800505c:	4b5e      	ldr	r3, [pc, #376]	@ (80051d8 <HAL_GPIO_Init+0x2fc>)
 800505e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005068:	4a5c      	ldr	r2, [pc, #368]	@ (80051dc <HAL_GPIO_Init+0x300>)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	3302      	adds	r3, #2
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	220f      	movs	r2, #15
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005092:	d02b      	beq.n	80050ec <HAL_GPIO_Init+0x210>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a52      	ldr	r2, [pc, #328]	@ (80051e0 <HAL_GPIO_Init+0x304>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d025      	beq.n	80050e8 <HAL_GPIO_Init+0x20c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a51      	ldr	r2, [pc, #324]	@ (80051e4 <HAL_GPIO_Init+0x308>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01f      	beq.n	80050e4 <HAL_GPIO_Init+0x208>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a50      	ldr	r2, [pc, #320]	@ (80051e8 <HAL_GPIO_Init+0x30c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d019      	beq.n	80050e0 <HAL_GPIO_Init+0x204>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a4f      	ldr	r2, [pc, #316]	@ (80051ec <HAL_GPIO_Init+0x310>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_GPIO_Init+0x200>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a4e      	ldr	r2, [pc, #312]	@ (80051f0 <HAL_GPIO_Init+0x314>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00d      	beq.n	80050d8 <HAL_GPIO_Init+0x1fc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a4d      	ldr	r2, [pc, #308]	@ (80051f4 <HAL_GPIO_Init+0x318>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <HAL_GPIO_Init+0x1f8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a4c      	ldr	r2, [pc, #304]	@ (80051f8 <HAL_GPIO_Init+0x31c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_GPIO_Init+0x1f4>
 80050cc:	2307      	movs	r3, #7
 80050ce:	e00e      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050d0:	2308      	movs	r3, #8
 80050d2:	e00c      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050d4:	2306      	movs	r3, #6
 80050d6:	e00a      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050d8:	2305      	movs	r3, #5
 80050da:	e008      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050dc:	2304      	movs	r3, #4
 80050de:	e006      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050e0:	2303      	movs	r3, #3
 80050e2:	e004      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e002      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_GPIO_Init+0x212>
 80050ec:	2300      	movs	r3, #0
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	f002 0203 	and.w	r2, r2, #3
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	4093      	lsls	r3, r2
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050fe:	4937      	ldr	r1, [pc, #220]	@ (80051dc <HAL_GPIO_Init+0x300>)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	3302      	adds	r3, #2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800510c:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <HAL_GPIO_Init+0x320>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	43db      	mvns	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005130:	4a32      	ldr	r2, [pc, #200]	@ (80051fc <HAL_GPIO_Init+0x320>)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005136:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <HAL_GPIO_Init+0x320>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	43db      	mvns	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800515a:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <HAL_GPIO_Init+0x320>)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005160:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <HAL_GPIO_Init+0x320>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	43db      	mvns	r3, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005184:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <HAL_GPIO_Init+0x320>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800518a:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <HAL_GPIO_Init+0x320>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	43db      	mvns	r3, r3
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ae:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <HAL_GPIO_Init+0x320>)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3301      	adds	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f47f ae91 	bne.w	8004eec <HAL_GPIO_Init+0x10>
  }
}
 80051ca:	bf00      	nop
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40010000 	.word	0x40010000
 80051e0:	48000400 	.word	0x48000400
 80051e4:	48000800 	.word	0x48000800
 80051e8:	48000c00 	.word	0x48000c00
 80051ec:	48001000 	.word	0x48001000
 80051f0:	48001400 	.word	0x48001400
 80051f4:	48001800 	.word	0x48001800
 80051f8:	48001c00 	.word	0x48001c00
 80051fc:	40010400 	.word	0x40010400

08005200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
 800520c:	4613      	mov	r3, r2
 800520e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005210:	787b      	ldrb	r3, [r7, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800521c:	e002      	b.n	8005224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800523a:	4b08      	ldr	r3, [pc, #32]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fc1e 	bl	8001a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40010400 	.word	0x40010400

08005260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e08d      	b.n	800538e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fd fd52 	bl	8002d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	@ 0x24
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	e006      	b.n	80052e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d108      	bne.n	8005302 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	e007      	b.n	8005312 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	461a      	mov	r2, r3
 80053a4:	460b      	mov	r3, r1
 80053a6:	817b      	strh	r3, [r7, #10]
 80053a8:	4613      	mov	r3, r2
 80053aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	f040 80fd 	bne.w	80055b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_I2C_Master_Transmit+0x30>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e0f6      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053d0:	f7fe fb0c 	bl	80039ec <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2319      	movs	r3, #25
 80053dc:	2201      	movs	r2, #1
 80053de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa0a 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0e1      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2221      	movs	r2, #33	@ 0x21
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2210      	movs	r2, #16
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	893a      	ldrh	r2, [r7, #8]
 8005412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	2bff      	cmp	r3, #255	@ 0xff
 8005422:	d906      	bls.n	8005432 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	22ff      	movs	r2, #255	@ 0xff
 8005428:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800542a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e007      	b.n	8005442 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800543c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005440:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d024      	beq.n	8005494 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3301      	adds	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	8979      	ldrh	r1, [r7, #10]
 8005486:	4b4e      	ldr	r3, [pc, #312]	@ (80055c0 <HAL_I2C_Master_Transmit+0x228>)
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fbf1 	bl	8005c74 <I2C_TransferConfig>
 8005492:	e066      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005498:	b2da      	uxtb	r2, r3
 800549a:	8979      	ldrh	r1, [r7, #10]
 800549c:	4b48      	ldr	r3, [pc, #288]	@ (80055c0 <HAL_I2C_Master_Transmit+0x228>)
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fbe6 	bl	8005c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054a8:	e05b      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f9f3 	bl	800589a <I2C_WaitOnTXISFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07b      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d034      	beq.n	8005562 <HAL_I2C_Master_Transmit+0x1ca>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d130      	bne.n	8005562 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2200      	movs	r2, #0
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f976 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e04d      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2bff      	cmp	r3, #255	@ 0xff
 8005522:	d90e      	bls.n	8005542 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	22ff      	movs	r2, #255	@ 0xff
 8005528:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	b2da      	uxtb	r2, r3
 8005530:	8979      	ldrh	r1, [r7, #10]
 8005532:	2300      	movs	r3, #0
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb9a 	bl	8005c74 <I2C_TransferConfig>
 8005540:	e00f      	b.n	8005562 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005550:	b2da      	uxtb	r2, r3
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	2300      	movs	r3, #0
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fb89 	bl	8005c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d19e      	bne.n	80054aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	6a39      	ldr	r1, [r7, #32]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f9d9 	bl	8005928 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e01a      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2220      	movs	r2, #32
 8005586:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b0c      	ldr	r3, [pc, #48]	@ (80055c4 <HAL_I2C_Master_Transmit+0x22c>)
 8005594:	400b      	ands	r3, r1
 8005596:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e000      	b.n	80055b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	80002000 	.word	0x80002000
 80055c4:	fe00e800 	.word	0xfe00e800

080055c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	461a      	mov	r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	817b      	strh	r3, [r7, #10]
 80055d8:	4613      	mov	r3, r2
 80055da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	f040 80db 	bne.w	80057a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_I2C_Master_Receive+0x30>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0d4      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005600:	f7fe f9f4 	bl	80039ec <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2319      	movs	r3, #25
 800560c:	2201      	movs	r2, #1
 800560e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8f2 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0bf      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2222      	movs	r2, #34	@ 0x22
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2210      	movs	r2, #16
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	2bff      	cmp	r3, #255	@ 0xff
 8005652:	d90e      	bls.n	8005672 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	@ 0xff
 8005658:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565e:	b2da      	uxtb	r2, r3
 8005660:	8979      	ldrh	r1, [r7, #10]
 8005662:	4b52      	ldr	r3, [pc, #328]	@ (80057ac <HAL_I2C_Master_Receive+0x1e4>)
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb02 	bl	8005c74 <I2C_TransferConfig>
 8005670:	e06d      	b.n	800574e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	b2da      	uxtb	r2, r3
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	4b49      	ldr	r3, [pc, #292]	@ (80057ac <HAL_I2C_Master_Receive+0x1e4>)
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 faf1 	bl	8005c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005692:	e05c      	b.n	800574e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	6a39      	ldr	r1, [r7, #32]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f989 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e07c      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d034      	beq.n	800574e <HAL_I2C_Master_Receive+0x186>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d130      	bne.n	800574e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2200      	movs	r2, #0
 80056f4:	2180      	movs	r1, #128	@ 0x80
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f880 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e04d      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570a:	b29b      	uxth	r3, r3
 800570c:	2bff      	cmp	r3, #255	@ 0xff
 800570e:	d90e      	bls.n	800572e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	22ff      	movs	r2, #255	@ 0xff
 8005714:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 faa4 	bl	8005c74 <I2C_TransferConfig>
 800572c:	e00f      	b.n	800574e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fa93 	bl	8005c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d19d      	bne.n	8005694 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	6a39      	ldr	r1, [r7, #32]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f8e3 	bl	8005928 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e01a      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2220      	movs	r2, #32
 8005772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b0c      	ldr	r3, [pc, #48]	@ (80057b0 <HAL_I2C_Master_Receive+0x1e8>)
 8005780:	400b      	ands	r3, r1
 8005782:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	80002400 	.word	0x80002400
 80057b0:	fe00e800 	.word	0xfe00e800

080057b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d103      	bne.n	80057d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d007      	beq.n	80057f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	619a      	str	r2, [r3, #24]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800580c:	e031      	b.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d02d      	beq.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fe f8e9 	bl	80039ec <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d122      	bne.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	429a      	cmp	r2, r3
 8005848:	d113      	bne.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e00f      	b.n	8005892 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	429a      	cmp	r2, r3
 800588e:	d0be      	beq.n	800580e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058a6:	e033      	b.n	8005910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f901 	bl	8005ab4 <I2C_IsErrorOccurred>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e031      	b.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d025      	beq.n	8005910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c4:	f7fe f892 	bl	80039ec <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11a      	bne.n	8005910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d013      	beq.n	8005910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e007      	b.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d1c4      	bne.n	80058a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005934:	e02f      	b.n	8005996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f8ba 	bl	8005ab4 <I2C_IsErrorOccurred>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e02d      	b.n	80059a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594a:	f7fe f84f 	bl	80039ec <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	429a      	cmp	r2, r3
 8005958:	d302      	bcc.n	8005960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d11a      	bne.n	8005996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	d013      	beq.n	8005996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e007      	b.n	80059a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d1c8      	bne.n	8005936 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059bc:	e06b      	b.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f876 	bl	8005ab4 <I2C_IsErrorOccurred>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e069      	b.n	8005aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d138      	bne.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d105      	bne.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e055      	b.n	8005aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d107      	bne.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2204      	movs	r2, #4
 8005a14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a16:	e002      	b.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2220      	movs	r2, #32
 8005a24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e029      	b.n	8005aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fd ffcb 	bl	80039ec <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d116      	bne.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d00f      	beq.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7a:	f043 0220 	orr.w	r2, r3, #32
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e007      	b.n	8005aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d18c      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	fe00e800 	.word	0xfe00e800

08005ab4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	@ 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d068      	beq.n	8005bb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ae8:	e049      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d045      	beq.n	8005b7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fd ff7b 	bl	80039ec <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <I2C_IsErrorOccurred+0x54>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13a      	bne.n	8005b7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2a:	d121      	bne.n	8005b70 <I2C_IsErrorOccurred+0xbc>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b32:	d01d      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d01a      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b4a:	f7fd ff4f 	bl	80039ec <HAL_GetTick>
 8005b4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b50:	e00e      	b.n	8005b70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b52:	f7fd ff4b 	bl	80039ec <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b19      	cmp	r3, #25
 8005b5e:	d907      	bls.n	8005b70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b6e:	e006      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d1e9      	bne.n	8005b52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d003      	beq.n	8005b94 <I2C_IsErrorOccurred+0xe0>
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0aa      	beq.n	8005aea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f043 0308 	orr.w	r3, r3, #8
 8005bec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f043 0302 	orr.w	r3, r3, #2
 8005c0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01c      	beq.n	8005c62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fdc3 	bl	80057b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <I2C_IsErrorOccurred+0x1bc>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	@ 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	fe00e800 	.word	0xfe00e800

08005c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	4613      	mov	r3, r2
 8005c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c8c:	7a7b      	ldrb	r3, [r7, #9]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ca2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	0d5b      	lsrs	r3, r3, #21
 8005cae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005cb2:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <I2C_TransferConfig+0x60>)
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	ea02 0103 	and.w	r1, r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	03ff63ff 	.word	0x03ff63ff

08005cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d138      	bne.n	8005d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e032      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	@ 0x24
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d139      	bne.n	8005df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e033      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2224      	movs	r2, #36	@ 0x24
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a04      	ldr	r2, [pc, #16]	@ (8005e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e16:	6013      	str	r3, [r2, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40007000 	.word	0x40007000

08005e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e38:	d102      	bne.n	8005e40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e3e:	e00b      	b.n	8005e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005e40:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4e:	d102      	bne.n	8005e56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e54:	e000      	b.n	8005e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005e56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40007000 	.word	0x40007000

08005e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d141      	bne.n	8005efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e76:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e82:	d131      	bne.n	8005ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e84:	4b47      	ldr	r3, [pc, #284]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8a:	4a46      	ldr	r2, [pc, #280]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e94:	4b43      	ldr	r3, [pc, #268]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e9c:	4a41      	ldr	r2, [pc, #260]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005ea4:	4b40      	ldr	r3, [pc, #256]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2232      	movs	r2, #50	@ 0x32
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	4a3f      	ldr	r2, [pc, #252]	@ (8005fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	0c9b      	lsrs	r3, r3, #18
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eba:	e002      	b.n	8005ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ec2:	4b38      	ldr	r3, [pc, #224]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ece:	d102      	bne.n	8005ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f2      	bne.n	8005ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ed6:	4b33      	ldr	r3, [pc, #204]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee2:	d158      	bne.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e057      	b.n	8005f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eee:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ef8:	e04d      	b.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f00:	d141      	bne.n	8005f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f02:	4b28      	ldr	r3, [pc, #160]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0e:	d131      	bne.n	8005f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f10:	4b24      	ldr	r3, [pc, #144]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f16:	4a23      	ldr	r2, [pc, #140]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f20:	4b20      	ldr	r3, [pc, #128]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f28:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005f30:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2232      	movs	r2, #50	@ 0x32
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	0c9b      	lsrs	r3, r3, #18
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f46:	e002      	b.n	8005f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4e:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5a:	d102      	bne.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f2      	bne.n	8005f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6e:	d112      	bne.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e011      	b.n	8005f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f74:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f84:	e007      	b.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f86:	4b07      	ldr	r3, [pc, #28]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f8e:	4a05      	ldr	r2, [pc, #20]	@ (8005fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40007000 	.word	0x40007000
 8005fa8:	20000068 	.word	0x20000068
 8005fac:	431bde83 	.word	0x431bde83

08005fb0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8005fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fbe:	6053      	str	r3, [r2, #4]
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40007000 	.word	0x40007000

08005fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f000 bc08 	b.w	80067f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe4:	4b96      	ldr	r3, [pc, #600]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
 8005fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fee:	4b94      	ldr	r3, [pc, #592]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80e4 	beq.w	80061ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <HAL_RCC_OscConfig+0x4c>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	2b0c      	cmp	r3, #12
 8006010:	f040 808b 	bne.w	800612a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b01      	cmp	r3, #1
 8006018:	f040 8087 	bne.w	800612a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800601c:	4b88      	ldr	r3, [pc, #544]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_OscConfig+0x64>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e3df      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	4b81      	ldr	r3, [pc, #516]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <HAL_RCC_OscConfig+0x7e>
 8006044:	4b7e      	ldr	r3, [pc, #504]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800604c:	e005      	b.n	800605a <HAL_RCC_OscConfig+0x8a>
 800604e:	4b7c      	ldr	r3, [pc, #496]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800605a:	4293      	cmp	r3, r2
 800605c:	d223      	bcs.n	80060a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fdcc 	bl	8006c00 <RCC_SetFlashLatencyFromMSIRange>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e3c0      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006072:	4b73      	ldr	r3, [pc, #460]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a72      	ldr	r2, [pc, #456]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006078:	f043 0308 	orr.w	r3, r3, #8
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b70      	ldr	r3, [pc, #448]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	496d      	ldr	r1, [pc, #436]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800608c:	4313      	orrs	r3, r2
 800608e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006090:	4b6b      	ldr	r3, [pc, #428]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4968      	ldr	r1, [pc, #416]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	604b      	str	r3, [r1, #4]
 80060a4:	e025      	b.n	80060f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a6:	4b66      	ldr	r3, [pc, #408]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a65      	ldr	r2, [pc, #404]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4b63      	ldr	r3, [pc, #396]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4960      	ldr	r1, [pc, #384]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c4:	4b5e      	ldr	r3, [pc, #376]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	495b      	ldr	r1, [pc, #364]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fd8c 	bl	8006c00 <RCC_SetFlashLatencyFromMSIRange>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e380      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060f2:	f000 fcc1 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b51      	ldr	r3, [pc, #324]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	4950      	ldr	r1, [pc, #320]	@ (8006244 <HAL_RCC_OscConfig+0x274>)
 8006104:	5ccb      	ldrb	r3, [r1, r3]
 8006106:	f003 031f 	and.w	r3, r3, #31
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	4a4e      	ldr	r2, [pc, #312]	@ (8006248 <HAL_RCC_OscConfig+0x278>)
 8006110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006112:	4b4e      	ldr	r3, [pc, #312]	@ (800624c <HAL_RCC_OscConfig+0x27c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd fc18 	bl	800394c <HAL_InitTick>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d052      	beq.n	80061cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	e364      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d032      	beq.n	8006198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006132:	4b43      	ldr	r3, [pc, #268]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a42      	ldr	r2, [pc, #264]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800613e:	f7fd fc55 	bl	80039ec <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006146:	f7fd fc51 	bl	80039ec <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e34d      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006158:	4b39      	ldr	r3, [pc, #228]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006164:	4b36      	ldr	r3, [pc, #216]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a35      	ldr	r2, [pc, #212]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800616a:	f043 0308 	orr.w	r3, r3, #8
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b33      	ldr	r3, [pc, #204]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	4930      	ldr	r1, [pc, #192]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006182:	4b2f      	ldr	r3, [pc, #188]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	492b      	ldr	r1, [pc, #172]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
 8006196:	e01a      	b.n	80061ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006198:	4b29      	ldr	r3, [pc, #164]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a28      	ldr	r2, [pc, #160]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061a4:	f7fd fc22 	bl	80039ec <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061ac:	f7fd fc1e 	bl	80039ec <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e31a      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1dc>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d073      	beq.n	80062c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d005      	beq.n	80061ec <HAL_RCC_OscConfig+0x21c>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d10e      	bne.n	8006204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d10b      	bne.n	8006204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	4b14      	ldr	r3, [pc, #80]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d063      	beq.n	80062c0 <HAL_RCC_OscConfig+0x2f0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d15f      	bne.n	80062c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e2f7      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620c:	d106      	bne.n	800621c <HAL_RCC_OscConfig+0x24c>
 800620e:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a0b      	ldr	r2, [pc, #44]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e025      	b.n	8006268 <HAL_RCC_OscConfig+0x298>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006224:	d114      	bne.n	8006250 <HAL_RCC_OscConfig+0x280>
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a05      	ldr	r2, [pc, #20]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 800622c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b03      	ldr	r3, [pc, #12]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a02      	ldr	r2, [pc, #8]	@ (8006240 <HAL_RCC_OscConfig+0x270>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e013      	b.n	8006268 <HAL_RCC_OscConfig+0x298>
 8006240:	40021000 	.word	0x40021000
 8006244:	0800ff48 	.word	0x0800ff48
 8006248:	20000068 	.word	0x20000068
 800624c:	2000006c 	.word	0x2000006c
 8006250:	4ba0      	ldr	r3, [pc, #640]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a9f      	ldr	r2, [pc, #636]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	4b9d      	ldr	r3, [pc, #628]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a9c      	ldr	r2, [pc, #624]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d013      	beq.n	8006298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fd fbbc 	bl	80039ec <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006278:	f7fd fbb8 	bl	80039ec <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	@ 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e2b4      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800628a:	4b92      	ldr	r3, [pc, #584]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x2a8>
 8006296:	e014      	b.n	80062c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fd fba8 	bl	80039ec <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a0:	f7fd fba4 	bl	80039ec <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	@ 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e2a0      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062b2:	4b88      	ldr	r3, [pc, #544]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x2d0>
 80062be:	e000      	b.n	80062c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d060      	beq.n	8006390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_OscConfig+0x310>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b0c      	cmp	r3, #12
 80062d8:	d119      	bne.n	800630e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d116      	bne.n	800630e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e0:	4b7c      	ldr	r3, [pc, #496]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_OscConfig+0x328>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e27d      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f8:	4b76      	ldr	r3, [pc, #472]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	061b      	lsls	r3, r3, #24
 8006306:	4973      	ldr	r1, [pc, #460]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006308:	4313      	orrs	r3, r2
 800630a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800630c:	e040      	b.n	8006390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d023      	beq.n	800635e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006316:	4b6f      	ldr	r3, [pc, #444]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6e      	ldr	r2, [pc, #440]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fd fb63 	bl	80039ec <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632a:	f7fd fb5f 	bl	80039ec <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e25b      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800633c:	4b65      	ldr	r3, [pc, #404]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b62      	ldr	r3, [pc, #392]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	495f      	ldr	r1, [pc, #380]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	e018      	b.n	8006390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635e:	4b5d      	ldr	r3, [pc, #372]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5c      	ldr	r2, [pc, #368]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636a:	f7fd fb3f 	bl	80039ec <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006372:	f7fd fb3b 	bl	80039ec <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e237      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006384:	4b53      	ldr	r3, [pc, #332]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f0      	bne.n	8006372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03c      	beq.n	8006416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a4:	4b4b      	ldr	r3, [pc, #300]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80063a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063aa:	4a4a      	ldr	r2, [pc, #296]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b4:	f7fd fb1a 	bl	80039ec <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063bc:	f7fd fb16 	bl	80039ec <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e212      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063ce:	4b41      	ldr	r3, [pc, #260]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80063d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0ef      	beq.n	80063bc <HAL_RCC_OscConfig+0x3ec>
 80063dc:	e01b      	b.n	8006416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063de:	4b3d      	ldr	r3, [pc, #244]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80063e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e4:	4a3b      	ldr	r2, [pc, #236]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fd fafd 	bl	80039ec <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f6:	f7fd faf9 	bl	80039ec <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1f5      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006408:	4b32      	ldr	r3, [pc, #200]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800640a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1ef      	bne.n	80063f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80a6 	beq.w	8006570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006424:	2300      	movs	r3, #0
 8006426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006428:	4b2a      	ldr	r3, [pc, #168]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006434:	4b27      	ldr	r3, [pc, #156]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006438:	4a26      	ldr	r2, [pc, #152]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800643a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800643e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006440:	4b24      	ldr	r3, [pc, #144]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644c:	2301      	movs	r3, #1
 800644e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006450:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <HAL_RCC_OscConfig+0x508>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d118      	bne.n	800648e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <HAL_RCC_OscConfig+0x508>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1d      	ldr	r2, [pc, #116]	@ (80064d8 <HAL_RCC_OscConfig+0x508>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006468:	f7fd fac0 	bl	80039ec <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006470:	f7fd fabc 	bl	80039ec <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1b8      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006482:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <HAL_RCC_OscConfig+0x508>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d108      	bne.n	80064a8 <HAL_RCC_OscConfig+0x4d8>
 8006496:	4b0f      	ldr	r3, [pc, #60]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649c:	4a0d      	ldr	r2, [pc, #52]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064a6:	e029      	b.n	80064fc <HAL_RCC_OscConfig+0x52c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b05      	cmp	r3, #5
 80064ae:	d115      	bne.n	80064dc <HAL_RCC_OscConfig+0x50c>
 80064b0:	4b08      	ldr	r3, [pc, #32]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	4a07      	ldr	r2, [pc, #28]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80064b8:	f043 0304 	orr.w	r3, r3, #4
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064c0:	4b04      	ldr	r3, [pc, #16]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c6:	4a03      	ldr	r2, [pc, #12]	@ (80064d4 <HAL_RCC_OscConfig+0x504>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064d0:	e014      	b.n	80064fc <HAL_RCC_OscConfig+0x52c>
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000
 80064d8:	40007000 	.word	0x40007000
 80064dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	4a9c      	ldr	r2, [pc, #624]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064ec:	4b99      	ldr	r3, [pc, #612]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f2:	4a98      	ldr	r2, [pc, #608]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006504:	f7fd fa72 	bl	80039ec <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800650a:	e00a      	b.n	8006522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650c:	f7fd fa6e 	bl	80039ec <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e168      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006522:	4b8c      	ldr	r3, [pc, #560]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ed      	beq.n	800650c <HAL_RCC_OscConfig+0x53c>
 8006530:	e015      	b.n	800655e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006532:	f7fd fa5b 	bl	80039ec <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006538:	e00a      	b.n	8006550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653a:	f7fd fa57 	bl	80039ec <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e151      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006550:	4b80      	ldr	r3, [pc, #512]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ed      	bne.n	800653a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800655e:	7ffb      	ldrb	r3, [r7, #31]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006564:	4b7b      	ldr	r3, [pc, #492]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	4a7a      	ldr	r2, [pc, #488]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800656e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d03c      	beq.n	80065f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01c      	beq.n	80065be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006584:	4b73      	ldr	r3, [pc, #460]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800658a:	4a72      	ldr	r2, [pc, #456]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fd fa2a 	bl	80039ec <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800659c:	f7fd fa26 	bl	80039ec <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e122      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065ae:	4b69      	ldr	r3, [pc, #420]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80065b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ef      	beq.n	800659c <HAL_RCC_OscConfig+0x5cc>
 80065bc:	e01b      	b.n	80065f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065be:	4b65      	ldr	r3, [pc, #404]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80065c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065c4:	4a63      	ldr	r2, [pc, #396]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ce:	f7fd fa0d 	bl	80039ec <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065d6:	f7fd fa09 	bl	80039ec <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e105      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80065ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1ef      	bne.n	80065d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80f9 	beq.w	80067f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	2b02      	cmp	r3, #2
 8006606:	f040 80cf 	bne.w	80067a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800660a:	4b52      	ldr	r3, [pc, #328]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	429a      	cmp	r2, r3
 800661c:	d12c      	bne.n	8006678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	3b01      	subs	r3, #1
 800662a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d123      	bne.n	8006678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d11b      	bne.n	8006678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d113      	bne.n	8006678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	3b01      	subs	r3, #1
 800665e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006660:	429a      	cmp	r2, r3
 8006662:	d109      	bne.n	8006678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	3b01      	subs	r3, #1
 8006672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006674:	429a      	cmp	r2, r3
 8006676:	d071      	beq.n	800675c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b0c      	cmp	r3, #12
 800667c:	d068      	beq.n	8006750 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800667e:	4b35      	ldr	r3, [pc, #212]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800668a:	4b32      	ldr	r3, [pc, #200]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0ac      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800669a:	4b2e      	ldr	r3, [pc, #184]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2d      	ldr	r2, [pc, #180]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80066a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066a6:	f7fd f9a1 	bl	80039ec <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ae:	f7fd f99d 	bl	80039ec <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e099      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066c0:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f0      	bne.n	80066ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066cc:	4b21      	ldr	r3, [pc, #132]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	4b21      	ldr	r3, [pc, #132]	@ (8006758 <HAL_RCC_OscConfig+0x788>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066dc:	3a01      	subs	r2, #1
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	4311      	orrs	r1, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066e6:	0212      	lsls	r2, r2, #8
 80066e8:	4311      	orrs	r1, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066ee:	0852      	lsrs	r2, r2, #1
 80066f0:	3a01      	subs	r2, #1
 80066f2:	0552      	lsls	r2, r2, #21
 80066f4:	4311      	orrs	r1, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80066fa:	0852      	lsrs	r2, r2, #1
 80066fc:	3a01      	subs	r2, #1
 80066fe:	0652      	lsls	r2, r2, #25
 8006700:	4311      	orrs	r1, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006706:	06d2      	lsls	r2, r2, #27
 8006708:	430a      	orrs	r2, r1
 800670a:	4912      	ldr	r1, [pc, #72]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800670c:	4313      	orrs	r3, r2
 800670e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006710:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a0f      	ldr	r2, [pc, #60]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800671c:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a0c      	ldr	r2, [pc, #48]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006728:	f7fd f960 	bl	80039ec <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006730:	f7fd f95c 	bl	80039ec <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e058      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006742:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <HAL_RCC_OscConfig+0x784>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800674e:	e050      	b.n	80067f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e04f      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
 8006754:	40021000 	.word	0x40021000
 8006758:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800675c:	4b27      	ldr	r3, [pc, #156]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d144      	bne.n	80067f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006768:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a23      	ldr	r2, [pc, #140]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 800676e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006774:	4b21      	ldr	r3, [pc, #132]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 800677a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800677e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006780:	f7fd f934 	bl	80039ec <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006788:	f7fd f930 	bl	80039ec <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e02c      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679a:	4b18      	ldr	r3, [pc, #96]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x7b8>
 80067a6:	e024      	b.n	80067f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b0c      	cmp	r3, #12
 80067ac:	d01f      	beq.n	80067ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ae:	4b13      	ldr	r3, [pc, #76]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a12      	ldr	r2, [pc, #72]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 80067b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fd f917 	bl	80039ec <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fd f913 	bl	80039ec <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e00f      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d4:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4905      	ldr	r1, [pc, #20]	@ (80067fc <HAL_RCC_OscConfig+0x82c>)
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_RCC_OscConfig+0x830>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	60cb      	str	r3, [r1, #12]
 80067ec:	e001      	b.n	80067f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40021000 	.word	0x40021000
 8006800:	feeefffc 	.word	0xfeeefffc

08006804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e11d      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800681c:	4b90      	ldr	r3, [pc, #576]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d910      	bls.n	800684c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	498b      	ldr	r1, [pc, #556]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b89      	ldr	r3, [pc, #548]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e105      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	4b81      	ldr	r3, [pc, #516]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006864:	429a      	cmp	r2, r3
 8006866:	d908      	bls.n	800687a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006868:	4b7e      	ldr	r3, [pc, #504]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	497b      	ldr	r1, [pc, #492]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d079      	beq.n	800697a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b03      	cmp	r3, #3
 800688c:	d11e      	bne.n	80068cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688e:	4b75      	ldr	r3, [pc, #468]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0dc      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800689e:	f000 fa09 	bl	8006cb4 <RCC_GetSysClockFreqFromPLLSource>
 80068a2:	4603      	mov	r3, r0
 80068a4:	4a70      	ldr	r2, [pc, #448]	@ (8006a68 <HAL_RCC_ClockConfig+0x264>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d946      	bls.n	8006938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80068aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d140      	bne.n	8006938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068b6:	4b6b      	ldr	r3, [pc, #428]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068be:	4a69      	ldr	r2, [pc, #420]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e035      	b.n	8006938 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d4:	4b63      	ldr	r3, [pc, #396]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d115      	bne.n	800690c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0b9      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d107      	bne.n	80068fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0ad      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068fc:	4b59      	ldr	r3, [pc, #356]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0a5      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800690c:	f000 f8b4 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8006910:	4603      	mov	r3, r0
 8006912:	4a55      	ldr	r2, [pc, #340]	@ (8006a68 <HAL_RCC_ClockConfig+0x264>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d90f      	bls.n	8006938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006918:	4b52      	ldr	r3, [pc, #328]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006924:	4b4f      	ldr	r3, [pc, #316]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692c:	4a4d      	ldr	r2, [pc, #308]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800692e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006932:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006938:	4b4a      	ldr	r3, [pc, #296]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f023 0203 	bic.w	r2, r3, #3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4947      	ldr	r1, [pc, #284]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694a:	f7fd f84f 	bl	80039ec <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006950:	e00a      	b.n	8006968 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006952:	f7fd f84b 	bl	80039ec <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e077      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006968:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 020c 	and.w	r2, r3, #12
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	429a      	cmp	r2, r3
 8006978:	d1eb      	bne.n	8006952 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b80      	cmp	r3, #128	@ 0x80
 800697e:	d105      	bne.n	800698c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006980:	4b38      	ldr	r3, [pc, #224]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a37      	ldr	r2, [pc, #220]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800698a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d208      	bcs.n	80069ba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	492b      	ldr	r1, [pc, #172]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ba:	4b29      	ldr	r3, [pc, #164]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d210      	bcs.n	80069ea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 020f 	bic.w	r2, r3, #15
 80069d0:	4923      	ldr	r1, [pc, #140]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d8:	4b21      	ldr	r3, [pc, #132]	@ (8006a60 <HAL_RCC_ClockConfig+0x25c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e036      	b.n	8006a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	4918      	ldr	r1, [pc, #96]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a14:	4b13      	ldr	r3, [pc, #76]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4910      	ldr	r1, [pc, #64]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a28:	f000 f826 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <HAL_RCC_ClockConfig+0x260>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	490c      	ldr	r1, [pc, #48]	@ (8006a6c <HAL_RCC_ClockConfig+0x268>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	4a0a      	ldr	r2, [pc, #40]	@ (8006a70 <HAL_RCC_ClockConfig+0x26c>)
 8006a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a48:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <HAL_RCC_ClockConfig+0x270>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fc ff7d 	bl	800394c <HAL_InitTick>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]

  return status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40022000 	.word	0x40022000
 8006a64:	40021000 	.word	0x40021000
 8006a68:	04c4b400 	.word	0x04c4b400
 8006a6c:	0800ff48 	.word	0x0800ff48
 8006a70:	20000068 	.word	0x20000068
 8006a74:	2000006c 	.word	0x2000006c

08006a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b089      	sub	sp, #36	@ 0x24
 8006a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a86:	4b3e      	ldr	r3, [pc, #248]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a90:	4b3b      	ldr	r3, [pc, #236]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x34>
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d121      	bne.n	8006aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d11e      	bne.n	8006aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006aac:	4b34      	ldr	r3, [pc, #208]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ab8:	4b31      	ldr	r3, [pc, #196]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e005      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	091b      	lsrs	r3, r3, #4
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d102      	bne.n	8006af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006af0:	4b25      	ldr	r3, [pc, #148]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e004      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006afc:	4b23      	ldr	r3, [pc, #140]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8006afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b0c      	cmp	r3, #12
 8006b04:	d134      	bne.n	8006b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b06:	4b1e      	ldr	r3, [pc, #120]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d003      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d003      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0xac>
 8006b1c:	e005      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b20:	617b      	str	r3, [r7, #20]
      break;
 8006b22:	e005      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b24:	4b19      	ldr	r3, [pc, #100]	@ (8006b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8006b26:	617b      	str	r3, [r7, #20]
      break;
 8006b28:	e002      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	617b      	str	r3, [r7, #20]
      break;
 8006b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b30:	4b13      	ldr	r3, [pc, #76]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b3e:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	fb03 f202 	mul.w	r2, r3, r2
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b56:	4b0a      	ldr	r3, [pc, #40]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	0e5b      	lsrs	r3, r3, #25
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	3301      	adds	r3, #1
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b70:	69bb      	ldr	r3, [r7, #24]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3724      	adds	r7, #36	@ 0x24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40021000 	.word	0x40021000
 8006b84:	0800ff60 	.word	0x0800ff60
 8006b88:	00f42400 	.word	0x00f42400
 8006b8c:	007a1200 	.word	0x007a1200

08006b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b94:	4b03      	ldr	r3, [pc, #12]	@ (8006ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000068 	.word	0x20000068

08006ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006bac:	f7ff fff0 	bl	8006b90 <HAL_RCC_GetHCLKFreq>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4b06      	ldr	r3, [pc, #24]	@ (8006bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	0a1b      	lsrs	r3, r3, #8
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	4904      	ldr	r1, [pc, #16]	@ (8006bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bbe:	5ccb      	ldrb	r3, [r1, r3]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	0800ff58 	.word	0x0800ff58

08006bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bd8:	f7ff ffda 	bl	8006b90 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0adb      	lsrs	r3, r3, #11
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4904      	ldr	r1, [pc, #16]	@ (8006bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	0800ff58 	.word	0x0800ff58

08006c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c0c:	4b27      	ldr	r3, [pc, #156]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c18:	f7ff f906 	bl	8005e28 <HAL_PWREx_GetVoltageRange>
 8006c1c:	6178      	str	r0, [r7, #20]
 8006c1e:	e014      	b.n	8006c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c20:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c24:	4a21      	ldr	r2, [pc, #132]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c38:	f7ff f8f6 	bl	8005e28 <HAL_PWREx_GetVoltageRange>
 8006c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c42:	4a1a      	ldr	r2, [pc, #104]	@ (8006cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c50:	d10b      	bne.n	8006c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d913      	bls.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c5c:	d902      	bls.n	8006c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c5e:	2302      	movs	r3, #2
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e00d      	b.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c64:	2301      	movs	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	e00a      	b.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c6e:	d902      	bls.n	8006c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006c70:	2302      	movs	r3, #2
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	e004      	b.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b70      	cmp	r3, #112	@ 0x70
 8006c7a:	d101      	bne.n	8006c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 020f 	bic.w	r2, r3, #15
 8006c88:	4909      	ldr	r1, [pc, #36]	@ (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c90:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d001      	beq.n	8006ca2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40022000 	.word	0x40022000

08006cb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cba:	4b2d      	ldr	r3, [pc, #180]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d00b      	beq.n	8006ce2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d825      	bhi.n	8006d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d008      	beq.n	8006ce8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d11f      	bne.n	8006d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006cdc:	4b25      	ldr	r3, [pc, #148]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006cde:	613b      	str	r3, [r7, #16]
    break;
 8006ce0:	e01f      	b.n	8006d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006ce2:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006ce4:	613b      	str	r3, [r7, #16]
    break;
 8006ce6:	e01c      	b.n	8006d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ce8:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d107      	bne.n	8006d04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e005      	b.n	8006d10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d04:	4b1a      	ldr	r3, [pc, #104]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006d10:	4a1a      	ldr	r2, [pc, #104]	@ (8006d7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d18:	613b      	str	r3, [r7, #16]
    break;
 8006d1a:	e002      	b.n	8006d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]
    break;
 8006d20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d22:	4b13      	ldr	r3, [pc, #76]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d30:	4b0f      	ldr	r3, [pc, #60]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	fb03 f202 	mul.w	r2, r3, r2
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d48:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	0e5b      	lsrs	r3, r3, #25
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	3301      	adds	r3, #1
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006d62:	683b      	ldr	r3, [r7, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40021000 	.word	0x40021000
 8006d74:	00f42400 	.word	0x00f42400
 8006d78:	007a1200 	.word	0x007a1200
 8006d7c:	0800ff60 	.word	0x0800ff60

08006d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d88:	2300      	movs	r3, #0
 8006d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d040      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da0:	2b80      	cmp	r3, #128	@ 0x80
 8006da2:	d02a      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006da4:	2b80      	cmp	r3, #128	@ 0x80
 8006da6:	d825      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006da8:	2b60      	cmp	r3, #96	@ 0x60
 8006daa:	d026      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006dac:	2b60      	cmp	r3, #96	@ 0x60
 8006dae:	d821      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	d006      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	d81d      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d010      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006dc0:	e018      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006dc2:	4b89      	ldr	r3, [pc, #548]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	4a88      	ldr	r2, [pc, #544]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dcc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006dce:	e015      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fa34 	bl	8008244 <RCCEx_PLLSAI1_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006de0:	e00c      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3320      	adds	r3, #32
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fb1f 	bl	800842c <RCCEx_PLLSAI2_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	74fb      	strb	r3, [r7, #19]
      break;
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfc:	7cfb      	ldrb	r3, [r7, #19]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e02:	4b79      	ldr	r3, [pc, #484]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e08:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e10:	4975      	ldr	r1, [pc, #468]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006e18:	e001      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d047      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e32:	d030      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e38:	d82a      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e3e:	d02a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e44:	d824      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e50:	d81e      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006e5c:	e018      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e5e:	4b62      	ldr	r3, [pc, #392]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4a61      	ldr	r2, [pc, #388]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e6a:	e015      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f9e6 	bl	8008244 <RCCEx_PLLSAI1_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e7c:	e00c      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3320      	adds	r3, #32
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 fad1 	bl	800842c <RCCEx_PLLSAI2_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	74fb      	strb	r3, [r7, #19]
      break;
 8006e94:	e000      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e98:	7cfb      	ldrb	r3, [r7, #19]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e9e:	4b52      	ldr	r3, [pc, #328]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eac:	494e      	ldr	r1, [pc, #312]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006eb4:	e001      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
 8006eb8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 809f 	beq.w	8007006 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ecc:	4b46      	ldr	r3, [pc, #280]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006edc:	2300      	movs	r3, #0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee2:	4b41      	ldr	r3, [pc, #260]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	4a40      	ldr	r2, [pc, #256]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eee:	4b3e      	ldr	r3, [pc, #248]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006efa:	2301      	movs	r3, #1
 8006efc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006efe:	4b3b      	ldr	r3, [pc, #236]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a3a      	ldr	r2, [pc, #232]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f0a:	f7fc fd6f 	bl	80039ec <HAL_GetTick>
 8006f0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f10:	e009      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f12:	f7fc fd6b 	bl	80039ec <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d902      	bls.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	74fb      	strb	r3, [r7, #19]
        break;
 8006f24:	e005      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f26:	4b31      	ldr	r3, [pc, #196]	@ (8006fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006f32:	7cfb      	ldrb	r3, [r7, #19]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d15b      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f38:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01f      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d019      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f56:	4b24      	ldr	r3, [pc, #144]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f62:	4b21      	ldr	r3, [pc, #132]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f68:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f72:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f78:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f82:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fc fd2a 	bl	80039ec <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9a:	e00b      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9c:	f7fc fd26 	bl	80039ec <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d902      	bls.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0ec      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006fc2:	7cfb      	ldrb	r3, [r7, #19]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fc8:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd8:	4903      	ldr	r1, [pc, #12]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fe2:	7cfb      	ldrb	r3, [r7, #19]
 8006fe4:	74bb      	strb	r3, [r7, #18]
 8006fe6:	e005      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	7cfb      	ldrb	r3, [r7, #19]
 8006ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ff4:	7c7b      	ldrb	r3, [r7, #17]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d105      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ffa:	4ba0      	ldr	r3, [pc, #640]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	4a9f      	ldr	r2, [pc, #636]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007012:	4b9a      	ldr	r3, [pc, #616]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007018:	f023 0203 	bic.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007020:	4996      	ldr	r1, [pc, #600]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007034:	4b91      	ldr	r3, [pc, #580]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703a:	f023 020c 	bic.w	r2, r3, #12
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	498e      	ldr	r1, [pc, #568]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007056:	4b89      	ldr	r3, [pc, #548]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007064:	4985      	ldr	r1, [pc, #532]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007078:	4b80      	ldr	r3, [pc, #512]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007086:	497d      	ldr	r1, [pc, #500]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800709a:	4b78      	ldr	r3, [pc, #480]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a8:	4974      	ldr	r1, [pc, #464]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070bc:	4b6f      	ldr	r3, [pc, #444]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ca:	496c      	ldr	r1, [pc, #432]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070de:	4b67      	ldr	r3, [pc, #412]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ec:	4963      	ldr	r1, [pc, #396]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007100:	4b5e      	ldr	r3, [pc, #376]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710e:	495b      	ldr	r1, [pc, #364]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007122:	4b56      	ldr	r3, [pc, #344]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007128:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007130:	4952      	ldr	r1, [pc, #328]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007144:	4b4d      	ldr	r3, [pc, #308]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	494a      	ldr	r1, [pc, #296]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007166:	4b45      	ldr	r3, [pc, #276]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007174:	4941      	ldr	r1, [pc, #260]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007188:	4b3c      	ldr	r3, [pc, #240]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800718a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800718e:	f023 0203 	bic.w	r2, r3, #3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	4939      	ldr	r1, [pc, #228]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d028      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071aa:	4b34      	ldr	r3, [pc, #208]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b8:	4930      	ldr	r1, [pc, #192]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071c8:	d106      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071ca:	4b2c      	ldr	r3, [pc, #176]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	4a2b      	ldr	r2, [pc, #172]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80071d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071d4:	60d3      	str	r3, [r2, #12]
 80071d6:	e011      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	2101      	movs	r1, #1
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 f82b 	bl	8008244 <RCCEx_PLLSAI1_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071f2:	7cfb      	ldrb	r3, [r7, #19]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d04d      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800720c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007210:	d108      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007212:	4b1a      	ldr	r3, [pc, #104]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007218:	4a18      	ldr	r2, [pc, #96]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800721a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800721e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007222:	e012      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007224:	4b15      	ldr	r3, [pc, #84]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800722a:	4a14      	ldr	r2, [pc, #80]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800722c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007230:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007234:	4b11      	ldr	r3, [pc, #68]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007242:	490e      	ldr	r1, [pc, #56]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800724e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007252:	d106      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007254:	4b09      	ldr	r3, [pc, #36]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4a08      	ldr	r2, [pc, #32]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800725a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800725e:	60d3      	str	r3, [r2, #12]
 8007260:	e020      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800726c:	4b03      	ldr	r3, [pc, #12]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a02      	ldr	r2, [pc, #8]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007276:	60d3      	str	r3, [r2, #12]
 8007278:	e014      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	2101      	movs	r1, #1
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ffd7 	bl	8008244 <RCCEx_PLLSAI1_Config>
 8007296:	4603      	mov	r3, r0
 8007298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800729a:	7cfb      	ldrb	r3, [r7, #19]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80072a0:	7cfb      	ldrb	r3, [r7, #19]
 80072a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d028      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072b0:	4b4a      	ldr	r3, [pc, #296]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072be:	4947      	ldr	r1, [pc, #284]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d0:	4b42      	ldr	r3, [pc, #264]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4a41      	ldr	r2, [pc, #260]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072da:	60d3      	str	r3, [r2, #12]
 80072dc:	e011      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072e6:	d10c      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	2101      	movs	r1, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 ffa8 	bl	8008244 <RCCEx_PLLSAI1_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80072fe:	7cfb      	ldrb	r3, [r7, #19]
 8007300:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01e      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800730e:	4b33      	ldr	r3, [pc, #204]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007314:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800731e:	492f      	ldr	r1, [pc, #188]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800732c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007330:	d10c      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f000 ff83 	bl	8008244 <RCCEx_PLLSAI1_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007342:	7cfb      	ldrb	r3, [r7, #19]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007358:	4b20      	ldr	r3, [pc, #128]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800735a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800735e:	f023 0204 	bic.w	r2, r3, #4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007368:	491c      	ldr	r1, [pc, #112]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800737c:	4b17      	ldr	r3, [pc, #92]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800737e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007382:	f023 0218 	bic.w	r2, r3, #24
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	4913      	ldr	r1, [pc, #76]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d017      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80073a0:	4b0e      	ldr	r3, [pc, #56]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b0:	490a      	ldr	r1, [pc, #40]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073c2:	d105      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c4:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40021000 	.word	0x40021000

080073e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073f2:	d13e      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073f4:	4bb6      	ldr	r3, [pc, #728]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fe:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007406:	d028      	beq.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800740e:	f200 86f4 	bhi.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007418:	d005      	beq.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007420:	d00e      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007422:	f000 beea 	b.w	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007426:	4baa      	ldr	r3, [pc, #680]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b02      	cmp	r3, #2
 8007432:	f040 86e4 	bne.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8007436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743a:	61fb      	str	r3, [r7, #28]
      break;
 800743c:	f000 bedf 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007440:	4ba3      	ldr	r3, [pc, #652]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b02      	cmp	r3, #2
 800744c:	f040 86d9 	bne.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8007450:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007454:	61fb      	str	r3, [r7, #28]
      break;
 8007456:	f000 bed4 	b.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800745a:	4b9d      	ldr	r3, [pc, #628]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007466:	f040 86ce 	bne.w	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800746a:	4b9a      	ldr	r3, [pc, #616]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800746c:	61fb      	str	r3, [r7, #28]
      break;
 800746e:	f000 beca 	b.w	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007472:	4b97      	ldr	r3, [pc, #604]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b03      	cmp	r3, #3
 8007480:	d036      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d840      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d003      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d020      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007494:	e039      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007496:	4b8e      	ldr	r3, [pc, #568]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d116      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80074a2:	4b8b      	ldr	r3, [pc, #556]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80074ae:	4b88      	ldr	r3, [pc, #544]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	091b      	lsrs	r3, r3, #4
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	e005      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80074ba:	4b85      	ldr	r3, [pc, #532]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	4a84      	ldr	r2, [pc, #528]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80074c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80074ce:	e01f      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61bb      	str	r3, [r7, #24]
      break;
 80074d4:	e01c      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074d6:	4b7e      	ldr	r3, [pc, #504]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e2:	d102      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80074e4:	4b7d      	ldr	r3, [pc, #500]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80074e6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80074e8:	e012      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]
      break;
 80074ee:	e00f      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074f0:	4b77      	ldr	r3, [pc, #476]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80074fe:	4b78      	ldr	r3, [pc, #480]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007500:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007502:	e005      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]
      break;
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	61bb      	str	r3, [r7, #24]
      break;
 800750e:	bf00      	nop
    }

    switch(PeriphClk)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007516:	f000 8606 	beq.w	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007520:	f200 8673 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800752a:	f000 8469 	beq.w	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007534:	f200 8669 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800753e:	f000 8531 	beq.w	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007548:	f200 865f 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007552:	f000 8187 	beq.w	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800755c:	f200 8655 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007566:	f000 80cd 	beq.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007570:	f200 864b 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800757a:	f000 8430 	beq.w	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007584:	f200 8641 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800758e:	f000 83e4 	beq.w	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007598:	f200 8637 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a2:	f000 80af 	beq.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ac:	f200 862d 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b6:	f000 809d 	beq.w	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	f200 8623 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ca:	f000 808b 	beq.w	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075d4:	f200 8619 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075de:	f000 8554 	beq.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e8:	f200 860f 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f2:	f000 8500 	beq.w	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fc:	f200 8605 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007606:	f000 84a1 	beq.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007610:	f200 85fb 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b80      	cmp	r3, #128	@ 0x80
 8007618:	f000 846c 	beq.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b80      	cmp	r3, #128	@ 0x80
 8007620:	f200 85f3 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b20      	cmp	r3, #32
 8007628:	d84c      	bhi.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 85ec 	beq.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3b01      	subs	r3, #1
 8007636:	2b1f      	cmp	r3, #31
 8007638:	f200 85e7 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800763c:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	08007a59 	.word	0x08007a59
 8007648:	08007ac7 	.word	0x08007ac7
 800764c:	0800820b 	.word	0x0800820b
 8007650:	08007b5b 	.word	0x08007b5b
 8007654:	0800820b 	.word	0x0800820b
 8007658:	0800820b 	.word	0x0800820b
 800765c:	0800820b 	.word	0x0800820b
 8007660:	08007bd3 	.word	0x08007bd3
 8007664:	0800820b 	.word	0x0800820b
 8007668:	0800820b 	.word	0x0800820b
 800766c:	0800820b 	.word	0x0800820b
 8007670:	0800820b 	.word	0x0800820b
 8007674:	0800820b 	.word	0x0800820b
 8007678:	0800820b 	.word	0x0800820b
 800767c:	0800820b 	.word	0x0800820b
 8007680:	08007c57 	.word	0x08007c57
 8007684:	0800820b 	.word	0x0800820b
 8007688:	0800820b 	.word	0x0800820b
 800768c:	0800820b 	.word	0x0800820b
 8007690:	0800820b 	.word	0x0800820b
 8007694:	0800820b 	.word	0x0800820b
 8007698:	0800820b 	.word	0x0800820b
 800769c:	0800820b 	.word	0x0800820b
 80076a0:	0800820b 	.word	0x0800820b
 80076a4:	0800820b 	.word	0x0800820b
 80076a8:	0800820b 	.word	0x0800820b
 80076ac:	0800820b 	.word	0x0800820b
 80076b0:	0800820b 	.word	0x0800820b
 80076b4:	0800820b 	.word	0x0800820b
 80076b8:	0800820b 	.word	0x0800820b
 80076bc:	0800820b 	.word	0x0800820b
 80076c0:	08007cd9 	.word	0x08007cd9
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	f000 83e8 	beq.w	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80076cc:	f000 bd9d 	b.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80076d0:	40021000 	.word	0x40021000
 80076d4:	0003d090 	.word	0x0003d090
 80076d8:	0800ff60 	.word	0x0800ff60
 80076dc:	00f42400 	.word	0x00f42400
 80076e0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80076ea:	f000 ff93 	bl	8008614 <RCCEx_GetSAIxPeriphCLKFreq>
 80076ee:	61f8      	str	r0, [r7, #28]
      break;
 80076f0:	f000 bd8e 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80076fa:	f000 ff8b 	bl	8008614 <RCCEx_GetSAIxPeriphCLKFreq>
 80076fe:	61f8      	str	r0, [r7, #28]
      break;
 8007700:	f000 bd86 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007704:	4b9a      	ldr	r3, [pc, #616]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800770a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007716:	d015      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800771e:	f200 8092 	bhi.w	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007728:	d029      	beq.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007730:	f200 8089 	bhi.w	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d07b      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007740:	d04a      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007742:	e080      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007744:	4b8a      	ldr	r3, [pc, #552]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b02      	cmp	r3, #2
 800774e:	d17d      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007750:	4b87      	ldr	r3, [pc, #540]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800775c:	4b84      	ldr	r3, [pc, #528]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	e005      	b.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8007768:	4b81      	ldr	r3, [pc, #516]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	4a7f      	ldr	r2, [pc, #508]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777a:	61fb      	str	r3, [r7, #28]
          break;
 800777c:	e066      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800777e:	4b7c      	ldr	r3, [pc, #496]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800778a:	d162      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800778c:	4b78      	ldr	r3, [pc, #480]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007798:	d15b      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800779a:	4b75      	ldr	r3, [pc, #468]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	fb03 f202 	mul.w	r2, r3, r2
 80077ae:	4b70      	ldr	r3, [pc, #448]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	091b      	lsrs	r3, r3, #4
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	3301      	adds	r3, #1
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80077c0:	4b6b      	ldr	r3, [pc, #428]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	0d5b      	lsrs	r3, r3, #21
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	3301      	adds	r3, #1
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d4:	61fb      	str	r3, [r7, #28]
          break;
 80077d6:	e03c      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80077d8:	4b65      	ldr	r3, [pc, #404]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e4:	d138      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80077e6:	4b62      	ldr	r3, [pc, #392]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077f2:	d131      	bne.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80077f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077fe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	fb03 f202 	mul.w	r2, r3, r2
 8007808:	4b59      	ldr	r3, [pc, #356]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	3301      	adds	r3, #1
 8007814:	fbb2 f3f3 	udiv	r3, r2, r3
 8007818:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800781a:	4b55      	ldr	r3, [pc, #340]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	0d5b      	lsrs	r3, r3, #21
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	3301      	adds	r3, #1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	61fb      	str	r3, [r7, #28]
          break;
 8007830:	e012      	b.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007832:	4b4f      	ldr	r3, [pc, #316]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007834:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d10e      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007840:	4b4d      	ldr	r3, [pc, #308]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007842:	61fb      	str	r3, [r7, #28]
          break;
 8007844:	e00b      	b.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8007846:	bf00      	nop
 8007848:	f000 bce2 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800784c:	bf00      	nop
 800784e:	f000 bcdf 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007852:	bf00      	nop
 8007854:	f000 bcdc 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007858:	bf00      	nop
 800785a:	f000 bcd9 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800785e:	bf00      	nop
        break;
 8007860:	f000 bcd6 	b.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007864:	4b42      	ldr	r3, [pc, #264]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007866:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800786a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007872:	d13d      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007874:	4b3e      	ldr	r3, [pc, #248]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800787c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007880:	f040 84c5 	bne.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007884:	4b3a      	ldr	r3, [pc, #232]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007890:	f040 84bd 	bne.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007894:	4b36      	ldr	r3, [pc, #216]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	0a1b      	lsrs	r3, r3, #8
 800789a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	fb03 f202 	mul.w	r2, r3, r2
 80078a8:	4b31      	ldr	r3, [pc, #196]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	3301      	adds	r3, #1
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80078ba:	4b2d      	ldr	r3, [pc, #180]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	0edb      	lsrs	r3, r3, #27
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80078cc:	4b28      	ldr	r3, [pc, #160]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80078d8:	2311      	movs	r3, #17
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e001      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80078de:	2307      	movs	r3, #7
 80078e0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	61fb      	str	r3, [r7, #28]
      break;
 80078ec:	f000 bc8f 	b.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80078f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007902:	d016      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800790a:	f200 809b 	bhi.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007914:	d032      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800791c:	f200 8092 	bhi.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8084 	beq.w	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800792e:	d052      	beq.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007930:	e088      	b.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007932:	4b0f      	ldr	r3, [pc, #60]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b02      	cmp	r3, #2
 800793c:	f040 8084 	bne.w	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800794c:	4b08      	ldr	r3, [pc, #32]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	e005      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800795a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	4a03      	ldr	r2, [pc, #12]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796a:	61fb      	str	r3, [r7, #28]
          break;
 800796c:	e06c      	b.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800796e:	bf00      	nop
 8007970:	40021000 	.word	0x40021000
 8007974:	0800ff60 	.word	0x0800ff60
 8007978:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800797c:	4ba5      	ldr	r3, [pc, #660]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007988:	d160      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800798a:	4ba2      	ldr	r3, [pc, #648]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007996:	d159      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007998:	4b9e      	ldr	r3, [pc, #632]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	fb03 f202 	mul.w	r2, r3, r2
 80079ac:	4b99      	ldr	r3, [pc, #612]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	091b      	lsrs	r3, r3, #4
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	3301      	adds	r3, #1
 80079b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80079be:	4b95      	ldr	r3, [pc, #596]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	0d5b      	lsrs	r3, r3, #21
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	3301      	adds	r3, #1
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d2:	61fb      	str	r3, [r7, #28]
          break;
 80079d4:	e03a      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80079d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e2:	d135      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80079e4:	4b8b      	ldr	r3, [pc, #556]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079f0:	d12e      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80079f2:	4b88      	ldr	r3, [pc, #544]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079fc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	fb03 f202 	mul.w	r2, r3, r2
 8007a06:	4b83      	ldr	r3, [pc, #524]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	091b      	lsrs	r3, r3, #4
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	3301      	adds	r3, #1
 8007a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a16:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007a18:	4b7e      	ldr	r3, [pc, #504]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	0d5b      	lsrs	r3, r3, #21
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	3301      	adds	r3, #1
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2c:	61fb      	str	r3, [r7, #28]
          break;
 8007a2e:	e00f      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007a30:	4b78      	ldr	r3, [pc, #480]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10a      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007a3e:	4b76      	ldr	r3, [pc, #472]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007a40:	61fb      	str	r3, [r7, #28]
          break;
 8007a42:	e007      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007a44:	bf00      	nop
 8007a46:	e3e2      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007a48:	bf00      	nop
 8007a4a:	e3e0      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007a4c:	bf00      	nop
 8007a4e:	e3de      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007a50:	bf00      	nop
 8007a52:	e3dc      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007a54:	bf00      	nop
      break;
 8007a56:	e3da      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007a58:	4b6e      	ldr	r3, [pc, #440]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d827      	bhi.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a81 	.word	0x08007a81
 8007a74:	08007a89 	.word	0x08007a89
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007aa5 	.word	0x08007aa5
          frequency = HAL_RCC_GetPCLK2Freq();
 8007a80:	f7ff f8a8 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 8007a84:	61f8      	str	r0, [r7, #28]
          break;
 8007a86:	e01d      	b.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a88:	f7fe fff6 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007a8c:	61f8      	str	r0, [r7, #28]
          break;
 8007a8e:	e019      	b.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a90:	4b60      	ldr	r3, [pc, #384]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9c:	d10f      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8007a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aa0:	61fb      	str	r3, [r7, #28]
          break;
 8007aa2:	e00c      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab6:	61fb      	str	r3, [r7, #28]
          break;
 8007ab8:	e003      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8007aba:	bf00      	nop
 8007abc:	e3a8      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007abe:	bf00      	nop
 8007ac0:	e3a6      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ac2:	bf00      	nop
        break;
 8007ac4:	e3a4      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007ac6:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b0c      	cmp	r3, #12
 8007ad6:	d83a      	bhi.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b4f 	.word	0x08007b4f
 8007ae8:	08007b4f 	.word	0x08007b4f
 8007aec:	08007b4f 	.word	0x08007b4f
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	08007b4f 	.word	0x08007b4f
 8007af8:	08007b4f 	.word	0x08007b4f
 8007afc:	08007b4f 	.word	0x08007b4f
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007b4f 	.word	0x08007b4f
 8007b08:	08007b4f 	.word	0x08007b4f
 8007b0c:	08007b4f 	.word	0x08007b4f
 8007b10:	08007b39 	.word	0x08007b39
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b14:	f7ff f848 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007b18:	61f8      	str	r0, [r7, #28]
          break;
 8007b1a:	e01d      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b1c:	f7fe ffac 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007b20:	61f8      	str	r0, [r7, #28]
          break;
 8007b22:	e019      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b24:	4b3b      	ldr	r3, [pc, #236]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b30:	d10f      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007b32:	4b3a      	ldr	r3, [pc, #232]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b34:	61fb      	str	r3, [r7, #28]
          break;
 8007b36:	e00c      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b38:	4b36      	ldr	r3, [pc, #216]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d107      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8007b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b4a:	61fb      	str	r3, [r7, #28]
          break;
 8007b4c:	e003      	b.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007b4e:	bf00      	nop
 8007b50:	e35e      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b52:	bf00      	nop
 8007b54:	e35c      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b56:	bf00      	nop
        break;
 8007b58:	e35a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b30      	cmp	r3, #48	@ 0x30
 8007b6a:	d021      	beq.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b30      	cmp	r3, #48	@ 0x30
 8007b70:	d829      	bhi.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d011      	beq.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d823      	bhi.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d004      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8007b8a:	e01c      	b.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b8c:	f7ff f80c 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007b90:	61f8      	str	r0, [r7, #28]
          break;
 8007b92:	e01d      	b.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b94:	f7fe ff70 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007b98:	61f8      	str	r0, [r7, #28]
          break;
 8007b9a:	e019      	b.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba8:	d10f      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8007baa:	4b1c      	ldr	r3, [pc, #112]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bac:	61fb      	str	r3, [r7, #28]
          break;
 8007bae:	e00c      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bb0:	4b18      	ldr	r3, [pc, #96]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d107      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc2:	61fb      	str	r3, [r7, #28]
          break;
 8007bc4:	e003      	b.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8007bc6:	bf00      	nop
 8007bc8:	e322      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bca:	bf00      	nop
 8007bcc:	e320      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bce:	bf00      	nop
        break;
 8007bd0:	e31e      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2bc0      	cmp	r3, #192	@ 0xc0
 8007be2:	d027      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007be8:	d82f      	bhi.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b80      	cmp	r3, #128	@ 0x80
 8007bee:	d017      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b80      	cmp	r3, #128	@ 0x80
 8007bf4:	d829      	bhi.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b40      	cmp	r3, #64	@ 0x40
 8007c00:	d004      	beq.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007c02:	e022      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7fe ffd0 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007c08:	61f8      	str	r0, [r7, #28]
          break;
 8007c0a:	e023      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c0c:	f7fe ff34 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007c10:	61f8      	str	r0, [r7, #28]
          break;
 8007c12:	e01f      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007c14:	40021000 	.word	0x40021000
 8007c18:	02dc6c00 	.word	0x02dc6c00
 8007c1c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c20:	4b9b      	ldr	r3, [pc, #620]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2c:	d10f      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007c2e:	4b99      	ldr	r3, [pc, #612]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007c30:	61fb      	str	r3, [r7, #28]
          break;
 8007c32:	e00c      	b.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c34:	4b96      	ldr	r3, [pc, #600]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d107      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c46:	61fb      	str	r3, [r7, #28]
          break;
 8007c48:	e003      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8007c4a:	bf00      	nop
 8007c4c:	e2e0      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c4e:	bf00      	nop
 8007c50:	e2de      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c52:	bf00      	nop
        break;
 8007c54:	e2dc      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007c56:	4b8e      	ldr	r3, [pc, #568]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c68:	d025      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c70:	d82c      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c78:	d013      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c80:	d824      	bhi.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8e:	d004      	beq.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007c90:	e01c      	b.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c92:	f7fe ff89 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007c96:	61f8      	str	r0, [r7, #28]
          break;
 8007c98:	e01d      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c9a:	f7fe feed 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007c9e:	61f8      	str	r0, [r7, #28]
          break;
 8007ca0:	e019      	b.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cae:	d10f      	bne.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8007cb0:	4b78      	ldr	r3, [pc, #480]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007cb2:	61fb      	str	r3, [r7, #28]
          break;
 8007cb4:	e00c      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cb6:	4b76      	ldr	r3, [pc, #472]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc8:	61fb      	str	r3, [r7, #28]
          break;
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007ccc:	bf00      	nop
 8007cce:	e29f      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cd0:	bf00      	nop
 8007cd2:	e29d      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cd4:	bf00      	nop
        break;
 8007cd6:	e29b      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cde:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cea:	d025      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cf2:	d82c      	bhi.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cfa:	d013      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d02:	d824      	bhi.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d10:	d004      	beq.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007d12:	e01c      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d14:	f7fe ff48 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007d18:	61f8      	str	r0, [r7, #28]
          break;
 8007d1a:	e01d      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d1c:	f7fe feac 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007d20:	61f8      	str	r0, [r7, #28]
          break;
 8007d22:	e019      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d24:	4b5a      	ldr	r3, [pc, #360]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d30:	d10f      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007d32:	4b58      	ldr	r3, [pc, #352]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007d34:	61fb      	str	r3, [r7, #28]
          break;
 8007d36:	e00c      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d38:	4b55      	ldr	r3, [pc, #340]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d107      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d4a:	61fb      	str	r3, [r7, #28]
          break;
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007d4e:	bf00      	nop
 8007d50:	e25e      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d52:	bf00      	nop
 8007d54:	e25c      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d56:	bf00      	nop
        break;
 8007d58:	e25a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6c:	d007      	beq.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d74:	d12f      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fe fe7f 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007d7a:	61f8      	str	r0, [r7, #28]
          break;
 8007d7c:	e02e      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007d7e:	4b44      	ldr	r3, [pc, #272]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d8a:	d126      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007d8c:	4b40      	ldr	r3, [pc, #256]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d020      	beq.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007d98:	4b3d      	ldr	r3, [pc, #244]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	0a1b      	lsrs	r3, r3, #8
 8007d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	fb03 f202 	mul.w	r2, r3, r2
 8007dac:	4b38      	ldr	r3, [pc, #224]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	3301      	adds	r3, #1
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007dbe:	4b34      	ldr	r3, [pc, #208]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	0e5b      	lsrs	r3, r3, #25
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	3301      	adds	r3, #1
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd2:	61fb      	str	r3, [r7, #28]
          break;
 8007dd4:	e001      	b.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007dd6:	bf00      	nop
 8007dd8:	e21a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007dda:	bf00      	nop
        break;
 8007ddc:	e218      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007dde:	4b2c      	ldr	r3, [pc, #176]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007df0:	f7fe fef0 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 8007df4:	61f8      	str	r0, [r7, #28]
        break;
 8007df6:	e20b      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007df8:	f7fe fe3e 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007dfc:	61f8      	str	r0, [r7, #28]
        break;
 8007dfe:	e207      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007e00:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e06:	f003 0318 	and.w	r3, r3, #24
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b10      	cmp	r3, #16
 8007e10:	d010      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d834      	bhi.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d024      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007e24:	e02d      	b.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007e26:	69b9      	ldr	r1, [r7, #24]
 8007e28:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007e2c:	f000 fbf2 	bl	8008614 <RCCEx_GetSAIxPeriphCLKFreq>
 8007e30:	61f8      	str	r0, [r7, #28]
          break;
 8007e32:	e02b      	b.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e34:	4b16      	ldr	r3, [pc, #88]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d122      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e40:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007e4c:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	e005      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007e58:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e5e:	0a1b      	lsrs	r3, r3, #8
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	4a0c      	ldr	r2, [pc, #48]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6a:	61fb      	str	r3, [r7, #28]
          break;
 8007e6c:	e00b      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e6e:	4b08      	ldr	r3, [pc, #32]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e7a:	d106      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007e7e:	61fb      	str	r3, [r7, #28]
          break;
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007e82:	bf00      	nop
 8007e84:	e1c4      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e86:	bf00      	nop
 8007e88:	e1c2      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e8a:	bf00      	nop
        break;
 8007e8c:	e1c0      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007e8e:	bf00      	nop
 8007e90:	40021000 	.word	0x40021000
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	0800ff60 	.word	0x0800ff60
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007e9c:	4b96      	ldr	r3, [pc, #600]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eae:	d013      	beq.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb6:	d819      	bhi.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec4:	d004      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8007ec6:	e011      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ec8:	f7fe fe6e 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	61f8      	str	r0, [r7, #28]
          break;
 8007ece:	e010      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ed0:	f7fe fdd2 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007ed4:	61f8      	str	r0, [r7, #28]
          break;
 8007ed6:	e00c      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ed8:	4b87      	ldr	r3, [pc, #540]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee4:	d104      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007ee6:	4b85      	ldr	r3, [pc, #532]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007ee8:	61fb      	str	r3, [r7, #28]
          break;
 8007eea:	e001      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007eec:	bf00      	nop
 8007eee:	e18f      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ef0:	bf00      	nop
        break;
 8007ef2:	e18d      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007ef4:	4b80      	ldr	r3, [pc, #512]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f06:	d013      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f0e:	d819      	bhi.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f1c:	d004      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007f1e:	e011      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f20:	f7fe fe42 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007f24:	61f8      	str	r0, [r7, #28]
          break;
 8007f26:	e010      	b.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f28:	f7fe fda6 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007f2c:	61f8      	str	r0, [r7, #28]
          break;
 8007f2e:	e00c      	b.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f30:	4b71      	ldr	r3, [pc, #452]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f3c:	d104      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007f40:	61fb      	str	r3, [r7, #28]
          break;
 8007f42:	e001      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007f44:	bf00      	nop
 8007f46:	e163      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f48:	bf00      	nop
        break;
 8007f4a:	e161      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f5e:	d013      	beq.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f66:	d819      	bhi.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f74:	d004      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007f76:	e011      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f78:	f7fe fe16 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007f7c:	61f8      	str	r0, [r7, #28]
          break;
 8007f7e:	e010      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f80:	f7fe fd7a 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007f84:	61f8      	str	r0, [r7, #28]
          break;
 8007f86:	e00c      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f88:	4b5b      	ldr	r3, [pc, #364]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f94:	d104      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8007f96:	4b59      	ldr	r3, [pc, #356]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007f98:	61fb      	str	r3, [r7, #28]
          break;
 8007f9a:	e001      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007f9c:	bf00      	nop
 8007f9e:	e137      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007fa0:	bf00      	nop
        break;
 8007fa2:	e135      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007fa4:	4b54      	ldr	r3, [pc, #336]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d011      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d818      	bhi.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d004      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007fc8:	e011      	b.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fca:	f7fe fded 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8007fce:	61f8      	str	r0, [r7, #28]
          break;
 8007fd0:	e010      	b.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007fd2:	f7fe fd51 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8007fd6:	61f8      	str	r0, [r7, #28]
          break;
 8007fd8:	e00c      	b.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fda:	4b47      	ldr	r3, [pc, #284]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe6:	d104      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007fe8:	4b44      	ldr	r3, [pc, #272]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007fea:	61fb      	str	r3, [r7, #28]
          break;
 8007fec:	e001      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007fee:	bf00      	nop
 8007ff0:	e10e      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ff2:	bf00      	nop
        break;
 8007ff4:	e10c      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007ff6:	4b40      	ldr	r3, [pc, #256]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008008:	d02c      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008010:	d833      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008018:	d01a      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008020:	d82b      	bhi.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800802e:	d004      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8008030:	e023      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008032:	f7fe fdb9 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 8008036:	61f8      	str	r0, [r7, #28]
          break;
 8008038:	e026      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800803c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b02      	cmp	r3, #2
 8008046:	d11a      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8008048:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800804c:	61fb      	str	r3, [r7, #28]
          break;
 800804e:	e016      	b.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008050:	4b29      	ldr	r3, [pc, #164]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800805c:	d111      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800805e:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8008060:	61fb      	str	r3, [r7, #28]
          break;
 8008062:	e00e      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008064:	4b24      	ldr	r3, [pc, #144]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b02      	cmp	r3, #2
 8008070:	d109      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008076:	61fb      	str	r3, [r7, #28]
          break;
 8008078:	e005      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800807a:	bf00      	nop
 800807c:	e0c8      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800807e:	bf00      	nop
 8008080:	e0c6      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008082:	bf00      	nop
 8008084:	e0c4      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008086:	bf00      	nop
        break;
 8008088:	e0c2      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800808a:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008090:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800809c:	d030      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080a4:	d837      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ac:	d01a      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080b4:	d82f      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080c2:	d004      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80080c4:	e027      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080c6:	f7fe fd6f 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 80080ca:	61f8      	str	r0, [r7, #28]
          break;
 80080cc:	e02a      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80080ce:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d11e      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80080dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080e0:	61fb      	str	r3, [r7, #28]
          break;
 80080e2:	e01a      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080e4:	4b04      	ldr	r3, [pc, #16]	@ (80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080f0:	d115      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80080f2:	4b02      	ldr	r3, [pc, #8]	@ (80080fc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80080f4:	61fb      	str	r3, [r7, #28]
          break;
 80080f6:	e012      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80080f8:	40021000 	.word	0x40021000
 80080fc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008100:	4b46      	ldr	r3, [pc, #280]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b02      	cmp	r3, #2
 800810c:	d109      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800810e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008112:	61fb      	str	r3, [r7, #28]
          break;
 8008114:	e005      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8008116:	bf00      	nop
 8008118:	e07a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800811a:	bf00      	nop
 800811c:	e078      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800811e:	bf00      	nop
 8008120:	e076      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8008122:	bf00      	nop
        break;
 8008124:	e074      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008126:	4b3d      	ldr	r3, [pc, #244]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800812c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008138:	d02c      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008140:	d855      	bhi.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814e:	d004      	beq.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8008150:	e04d      	b.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008152:	f7fe fc91 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 8008156:	61f8      	str	r0, [r7, #28]
          break;
 8008158:	e04e      	b.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800815a:	4b30      	ldr	r3, [pc, #192]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d145      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008166:	4b2d      	ldr	r3, [pc, #180]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008172:	4b2a      	ldr	r3, [pc, #168]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	e005      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800817e:	4b27      	ldr	r3, [pc, #156]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008184:	0a1b      	lsrs	r3, r3, #8
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	4a25      	ldr	r2, [pc, #148]	@ (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008190:	61fb      	str	r3, [r7, #28]
          break;
 8008192:	e02e      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008194:	4b21      	ldr	r3, [pc, #132]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a0:	d129      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80081a2:	4b1e      	ldr	r3, [pc, #120]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ae:	d122      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80081b0:	4b1a      	ldr	r3, [pc, #104]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ba:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	fb03 f202 	mul.w	r2, r3, r2
 80081c4:	4b15      	ldr	r3, [pc, #84]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	091b      	lsrs	r3, r3, #4
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	3301      	adds	r3, #1
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80081d6:	4b11      	ldr	r3, [pc, #68]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	0d5b      	lsrs	r3, r3, #21
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	3301      	adds	r3, #1
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ea:	61fb      	str	r3, [r7, #28]
          break;
 80081ec:	e003      	b.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80081ee:	bf00      	nop
 80081f0:	e00e      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80081f2:	bf00      	nop
 80081f4:	e00c      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80081f6:	bf00      	nop
        break;
 80081f8:	e00a      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80081fa:	bf00      	nop
 80081fc:	e008      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80081fe:	bf00      	nop
 8008200:	e006      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008202:	bf00      	nop
 8008204:	e004      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8008206:	bf00      	nop
 8008208:	e002      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800820a:	bf00      	nop
 800820c:	e000      	b.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800820e:	bf00      	nop
    }
  }

  return(frequency);
 8008210:	69fb      	ldr	r3, [r7, #28]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	40021000 	.word	0x40021000
 8008220:	0800ff60 	.word	0x0800ff60

08008224 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a04      	ldr	r2, [pc, #16]	@ (8008240 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800822e:	f043 0304 	orr.w	r3, r3, #4
 8008232:	6013      	str	r3, [r2, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40021000 	.word	0x40021000

08008244 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008252:	4b72      	ldr	r3, [pc, #456]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00e      	beq.n	800827c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800825e:	4b6f      	ldr	r3, [pc, #444]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f003 0203 	and.w	r2, r3, #3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d103      	bne.n	8008276 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
       ||
 8008272:	2b00      	cmp	r3, #0
 8008274:	d142      	bne.n	80082fc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
 800827a:	e03f      	b.n	80082fc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d018      	beq.n	80082b6 <RCCEx_PLLSAI1_Config+0x72>
 8008284:	2b03      	cmp	r3, #3
 8008286:	d825      	bhi.n	80082d4 <RCCEx_PLLSAI1_Config+0x90>
 8008288:	2b01      	cmp	r3, #1
 800828a:	d002      	beq.n	8008292 <RCCEx_PLLSAI1_Config+0x4e>
 800828c:	2b02      	cmp	r3, #2
 800828e:	d009      	beq.n	80082a4 <RCCEx_PLLSAI1_Config+0x60>
 8008290:	e020      	b.n	80082d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008292:	4b62      	ldr	r3, [pc, #392]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d11d      	bne.n	80082da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a2:	e01a      	b.n	80082da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082a4:	4b5d      	ldr	r3, [pc, #372]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d116      	bne.n	80082de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b4:	e013      	b.n	80082de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082b6:	4b59      	ldr	r3, [pc, #356]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10f      	bne.n	80082e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082c2:	4b56      	ldr	r3, [pc, #344]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082d2:	e006      	b.n	80082e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e004      	b.n	80082e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082da:	bf00      	nop
 80082dc:	e002      	b.n	80082e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082de:	bf00      	nop
 80082e0:	e000      	b.n	80082e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80082e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d108      	bne.n	80082fc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80082ea:	4b4c      	ldr	r3, [pc, #304]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f023 0203 	bic.w	r2, r3, #3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4949      	ldr	r1, [pc, #292]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f040 8086 	bne.w	8008410 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008304:	4b45      	ldr	r3, [pc, #276]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a44      	ldr	r2, [pc, #272]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 800830a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800830e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008310:	f7fb fb6c 	bl	80039ec <HAL_GetTick>
 8008314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008316:	e009      	b.n	800832c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008318:	f7fb fb68 	bl	80039ec <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d902      	bls.n	800832c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	73fb      	strb	r3, [r7, #15]
        break;
 800832a:	e005      	b.n	8008338 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800832c:	4b3b      	ldr	r3, [pc, #236]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1ef      	bne.n	8008318 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d168      	bne.n	8008410 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d113      	bne.n	800836c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008344:	4b35      	ldr	r3, [pc, #212]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	4b35      	ldr	r3, [pc, #212]	@ (8008420 <RCCEx_PLLSAI1_Config+0x1dc>)
 800834a:	4013      	ands	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6892      	ldr	r2, [r2, #8]
 8008350:	0211      	lsls	r1, r2, #8
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68d2      	ldr	r2, [r2, #12]
 8008356:	06d2      	lsls	r2, r2, #27
 8008358:	4311      	orrs	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6852      	ldr	r2, [r2, #4]
 800835e:	3a01      	subs	r2, #1
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	430a      	orrs	r2, r1
 8008364:	492d      	ldr	r1, [pc, #180]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008366:	4313      	orrs	r3, r2
 8008368:	610b      	str	r3, [r1, #16]
 800836a:	e02d      	b.n	80083c8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d115      	bne.n	800839e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008372:	4b2a      	ldr	r3, [pc, #168]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	4b2b      	ldr	r3, [pc, #172]	@ (8008424 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008378:	4013      	ands	r3, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6892      	ldr	r2, [r2, #8]
 800837e:	0211      	lsls	r1, r2, #8
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6912      	ldr	r2, [r2, #16]
 8008384:	0852      	lsrs	r2, r2, #1
 8008386:	3a01      	subs	r2, #1
 8008388:	0552      	lsls	r2, r2, #21
 800838a:	4311      	orrs	r1, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	3a01      	subs	r2, #1
 8008392:	0112      	lsls	r2, r2, #4
 8008394:	430a      	orrs	r2, r1
 8008396:	4921      	ldr	r1, [pc, #132]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008398:	4313      	orrs	r3, r2
 800839a:	610b      	str	r3, [r1, #16]
 800839c:	e014      	b.n	80083c8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800839e:	4b1f      	ldr	r3, [pc, #124]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	4b21      	ldr	r3, [pc, #132]	@ (8008428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083a4:	4013      	ands	r3, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6892      	ldr	r2, [r2, #8]
 80083aa:	0211      	lsls	r1, r2, #8
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6952      	ldr	r2, [r2, #20]
 80083b0:	0852      	lsrs	r2, r2, #1
 80083b2:	3a01      	subs	r2, #1
 80083b4:	0652      	lsls	r2, r2, #25
 80083b6:	4311      	orrs	r1, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6852      	ldr	r2, [r2, #4]
 80083bc:	3a01      	subs	r2, #1
 80083be:	0112      	lsls	r2, r2, #4
 80083c0:	430a      	orrs	r2, r1
 80083c2:	4916      	ldr	r1, [pc, #88]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80083c8:	4b14      	ldr	r3, [pc, #80]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a13      	ldr	r2, [pc, #76]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d4:	f7fb fb0a 	bl	80039ec <HAL_GetTick>
 80083d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083da:	e009      	b.n	80083f0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083dc:	f7fb fb06 	bl	80039ec <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d902      	bls.n	80083f0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	73fb      	strb	r3, [r7, #15]
          break;
 80083ee:	e005      	b.n	80083fc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80083f0:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0ef      	beq.n	80083dc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008402:	4b06      	ldr	r3, [pc, #24]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	4904      	ldr	r1, [pc, #16]	@ (800841c <RCCEx_PLLSAI1_Config+0x1d8>)
 800840c:	4313      	orrs	r3, r2
 800840e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	40021000 	.word	0x40021000
 8008420:	07ff800f 	.word	0x07ff800f
 8008424:	ff9f800f 	.word	0xff9f800f
 8008428:	f9ff800f 	.word	0xf9ff800f

0800842c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800843a:	4b72      	ldr	r3, [pc, #456]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008446:	4b6f      	ldr	r3, [pc, #444]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f003 0203 	and.w	r2, r3, #3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d103      	bne.n	800845e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
       ||
 800845a:	2b00      	cmp	r3, #0
 800845c:	d142      	bne.n	80084e4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	e03f      	b.n	80084e4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d018      	beq.n	800849e <RCCEx_PLLSAI2_Config+0x72>
 800846c:	2b03      	cmp	r3, #3
 800846e:	d825      	bhi.n	80084bc <RCCEx_PLLSAI2_Config+0x90>
 8008470:	2b01      	cmp	r3, #1
 8008472:	d002      	beq.n	800847a <RCCEx_PLLSAI2_Config+0x4e>
 8008474:	2b02      	cmp	r3, #2
 8008476:	d009      	beq.n	800848c <RCCEx_PLLSAI2_Config+0x60>
 8008478:	e020      	b.n	80084bc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800847a:	4b62      	ldr	r3, [pc, #392]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11d      	bne.n	80084c2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800848a:	e01a      	b.n	80084c2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800848c:	4b5d      	ldr	r3, [pc, #372]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800849c:	e013      	b.n	80084c6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800849e:	4b59      	ldr	r3, [pc, #356]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10f      	bne.n	80084ca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084aa:	4b56      	ldr	r3, [pc, #344]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084ba:	e006      	b.n	80084ca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e004      	b.n	80084cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80084ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d108      	bne.n	80084e4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80084d2:	4b4c      	ldr	r3, [pc, #304]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f023 0203 	bic.w	r2, r3, #3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4949      	ldr	r1, [pc, #292]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f040 8086 	bne.w	80085f8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80084ec:	4b45      	ldr	r3, [pc, #276]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a44      	ldr	r2, [pc, #272]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80084f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f8:	f7fb fa78 	bl	80039ec <HAL_GetTick>
 80084fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80084fe:	e009      	b.n	8008514 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008500:	f7fb fa74 	bl	80039ec <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d902      	bls.n	8008514 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	73fb      	strb	r3, [r7, #15]
        break;
 8008512:	e005      	b.n	8008520 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008514:	4b3b      	ldr	r3, [pc, #236]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ef      	bne.n	8008500 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d168      	bne.n	80085f8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d113      	bne.n	8008554 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800852c:	4b35      	ldr	r3, [pc, #212]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	4b35      	ldr	r3, [pc, #212]	@ (8008608 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008532:	4013      	ands	r3, r2
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6892      	ldr	r2, [r2, #8]
 8008538:	0211      	lsls	r1, r2, #8
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	68d2      	ldr	r2, [r2, #12]
 800853e:	06d2      	lsls	r2, r2, #27
 8008540:	4311      	orrs	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6852      	ldr	r2, [r2, #4]
 8008546:	3a01      	subs	r2, #1
 8008548:	0112      	lsls	r2, r2, #4
 800854a:	430a      	orrs	r2, r1
 800854c:	492d      	ldr	r1, [pc, #180]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800854e:	4313      	orrs	r3, r2
 8008550:	614b      	str	r3, [r1, #20]
 8008552:	e02d      	b.n	80085b0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d115      	bne.n	8008586 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800855a:	4b2a      	ldr	r3, [pc, #168]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	4b2b      	ldr	r3, [pc, #172]	@ (800860c <RCCEx_PLLSAI2_Config+0x1e0>)
 8008560:	4013      	ands	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6892      	ldr	r2, [r2, #8]
 8008566:	0211      	lsls	r1, r2, #8
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6912      	ldr	r2, [r2, #16]
 800856c:	0852      	lsrs	r2, r2, #1
 800856e:	3a01      	subs	r2, #1
 8008570:	0552      	lsls	r2, r2, #21
 8008572:	4311      	orrs	r1, r2
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6852      	ldr	r2, [r2, #4]
 8008578:	3a01      	subs	r2, #1
 800857a:	0112      	lsls	r2, r2, #4
 800857c:	430a      	orrs	r2, r1
 800857e:	4921      	ldr	r1, [pc, #132]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008580:	4313      	orrs	r3, r2
 8008582:	614b      	str	r3, [r1, #20]
 8008584:	e014      	b.n	80085b0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008586:	4b1f      	ldr	r3, [pc, #124]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	4b21      	ldr	r3, [pc, #132]	@ (8008610 <RCCEx_PLLSAI2_Config+0x1e4>)
 800858c:	4013      	ands	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6892      	ldr	r2, [r2, #8]
 8008592:	0211      	lsls	r1, r2, #8
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6952      	ldr	r2, [r2, #20]
 8008598:	0852      	lsrs	r2, r2, #1
 800859a:	3a01      	subs	r2, #1
 800859c:	0652      	lsls	r2, r2, #25
 800859e:	4311      	orrs	r1, r2
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6852      	ldr	r2, [r2, #4]
 80085a4:	3a01      	subs	r2, #1
 80085a6:	0112      	lsls	r2, r2, #4
 80085a8:	430a      	orrs	r2, r1
 80085aa:	4916      	ldr	r1, [pc, #88]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80085b0:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a13      	ldr	r2, [pc, #76]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085bc:	f7fb fa16 	bl	80039ec <HAL_GetTick>
 80085c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085c2:	e009      	b.n	80085d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80085c4:	f7fb fa12 	bl	80039ec <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d902      	bls.n	80085d8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	73fb      	strb	r3, [r7, #15]
          break;
 80085d6:	e005      	b.n	80085e4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0ef      	beq.n	80085c4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80085ea:	4b06      	ldr	r3, [pc, #24]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	4904      	ldr	r1, [pc, #16]	@ (8008604 <RCCEx_PLLSAI2_Config+0x1d8>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40021000 	.word	0x40021000
 8008608:	07ff800f 	.word	0x07ff800f
 800860c:	ff9f800f 	.word	0xff9f800f
 8008610:	f9ff800f 	.word	0xf9ff800f

08008614 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008614:	b480      	push	{r7}
 8008616:	b089      	sub	sp, #36	@ 0x24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008630:	d10b      	bne.n	800864a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008632:	4b7e      	ldr	r3, [pc, #504]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008634:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008638:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800863c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b60      	cmp	r3, #96	@ 0x60
 8008642:	d112      	bne.n	800866a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008644:	4b7a      	ldr	r3, [pc, #488]	@ (8008830 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e00f      	b.n	800866a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008650:	d10b      	bne.n	800866a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008652:	4b76      	ldr	r3, [pc, #472]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008654:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008658:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800865c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008664:	d101      	bne.n	800866a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008666:	4b72      	ldr	r3, [pc, #456]	@ (8008830 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008668:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f040 80d6 	bne.w	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b40      	cmp	r3, #64	@ 0x40
 800867a:	d003      	beq.n	8008684 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008682:	d13b      	bne.n	80086fc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008684:	4b69      	ldr	r3, [pc, #420]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008690:	f040 80c4 	bne.w	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008694:	4b65      	ldr	r3, [pc, #404]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80bd 	beq.w	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80086a2:	4b62      	ldr	r3, [pc, #392]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	091b      	lsrs	r3, r3, #4
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	3301      	adds	r3, #1
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80086b6:	4b5d      	ldr	r3, [pc, #372]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80086c2:	4b5a      	ldr	r3, [pc, #360]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	0edb      	lsrs	r3, r3, #27
 80086c8:	f003 031f 	and.w	r3, r3, #31
 80086cc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80086d4:	4b55      	ldr	r3, [pc, #340]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80086e0:	2311      	movs	r3, #17
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e001      	b.n	80086ea <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80086e6:	2307      	movs	r3, #7
 80086e8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	fb03 f202 	mul.w	r2, r3, r2
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80086fa:	e08f      	b.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d13a      	bne.n	8008778 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008702:	4b4a      	ldr	r3, [pc, #296]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800870a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800870e:	f040 8086 	bne.w	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008712:	4b46      	ldr	r3, [pc, #280]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d07f      	beq.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800871e:	4b43      	ldr	r3, [pc, #268]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	091b      	lsrs	r3, r3, #4
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	3301      	adds	r3, #1
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008732:	4b3e      	ldr	r3, [pc, #248]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800873c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800873e:	4b3b      	ldr	r3, [pc, #236]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	0edb      	lsrs	r3, r3, #27
 8008744:	f003 031f 	and.w	r3, r3, #31
 8008748:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008750:	4b36      	ldr	r3, [pc, #216]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800875c:	2311      	movs	r3, #17
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e001      	b.n	8008766 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008762:	2307      	movs	r3, #7
 8008764:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	fb03 f202 	mul.w	r2, r3, r2
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	e052      	b.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b80      	cmp	r3, #128	@ 0x80
 800877c:	d003      	beq.n	8008786 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008784:	d109      	bne.n	800879a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008786:	4b29      	ldr	r3, [pc, #164]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800878e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008792:	d144      	bne.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008794:	4b27      	ldr	r3, [pc, #156]	@ (8008834 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8008796:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008798:	e041      	b.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b20      	cmp	r3, #32
 800879e:	d003      	beq.n	80087a8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a6:	d13a      	bne.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80087a8:	4b20      	ldr	r3, [pc, #128]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b4:	d133      	bne.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80087b6:	4b1d      	ldr	r3, [pc, #116]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d02d      	beq.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80087c2:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	3301      	adds	r3, #1
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80087d6:	4b15      	ldr	r3, [pc, #84]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	0edb      	lsrs	r3, r3, #27
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80087f4:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008800:	2311      	movs	r3, #17
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e001      	b.n	800880a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008806:	2307      	movs	r3, #7
 8008808:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	fb03 f202 	mul.w	r2, r3, r2
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	fbb2 f3f3 	udiv	r3, r2, r3
 8008818:	61fb      	str	r3, [r7, #28]
 800881a:	e000      	b.n	800881e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800881c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800881e:	69fb      	ldr	r3, [r7, #28]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3724      	adds	r7, #36	@ 0x24
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	40021000 	.word	0x40021000
 8008830:	001fff68 	.word	0x001fff68
 8008834:	00f42400 	.word	0x00f42400

08008838 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d904      	bls.n	8008856 <HAL_SAI_InitProtocol+0x1e>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	3b03      	subs	r3, #3
 8008850:	2b01      	cmp	r3, #1
 8008852:	d812      	bhi.n	800887a <HAL_SAI_InitProtocol+0x42>
 8008854:	e008      	b.n	8008868 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f9fb 	bl	8008c58 <SAI_InitI2S>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]
      break;
 8008866:	e00b      	b.n	8008880 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 faa4 	bl	8008dbc <SAI_InitPCM>
 8008874:	4603      	mov	r3, r0
 8008876:	75fb      	strb	r3, [r7, #23]
      break;
 8008878:	e002      	b.n	8008880 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]
      break;
 800887e:	bf00      	nop
  }

  if (status == HAL_OK)
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f808 	bl	800889c <HAL_SAI_Init>
 800888c:	4603      	mov	r3, r0
 800888e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e1c7      	b.n	8008c3e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d10e      	bne.n	80088d6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a81      	ldr	r2, [pc, #516]	@ (8008ac4 <HAL_SAI_Init+0x228>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d107      	bne.n	80088d2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d103      	bne.n	80088d2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e1b3      	b.n	8008c3e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fa fe0c 	bl	8003508 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fae5 	bl	8008ec0 <SAI_Disable>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e19e      	b.n	8008c3e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d00c      	beq.n	800892a <HAL_SAI_Init+0x8e>
 8008910:	2b02      	cmp	r3, #2
 8008912:	d80d      	bhi.n	8008930 <HAL_SAI_Init+0x94>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_SAI_Init+0x82>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d003      	beq.n	8008924 <HAL_SAI_Init+0x88>
 800891c:	e008      	b.n	8008930 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008922:	e008      	b.n	8008936 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008924:	2310      	movs	r3, #16
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008928:	e005      	b.n	8008936 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800892a:	2320      	movs	r3, #32
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800892e:	e002      	b.n	8008936 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008934:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d81d      	bhi.n	800897a <HAL_SAI_Init+0xde>
 800893e:	a201      	add	r2, pc, #4	@ (adr r2, 8008944 <HAL_SAI_Init+0xa8>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	08008955 	.word	0x08008955
 8008948:	0800895b 	.word	0x0800895b
 800894c:	08008963 	.word	0x08008963
 8008950:	0800896b 	.word	0x0800896b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
      break;
 8008958:	e012      	b.n	8008980 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800895a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800895e:	61fb      	str	r3, [r7, #28]
      break;
 8008960:	e00e      	b.n	8008980 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008962:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008966:	61fb      	str	r3, [r7, #28]
      break;
 8008968:	e00a      	b.n	8008980 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800896a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800896e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008978:	e002      	b.n	8008980 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      break;
 800897e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a4f      	ldr	r2, [pc, #316]	@ (8008ac4 <HAL_SAI_Init+0x228>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_SAI_Init+0xf8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a4e      	ldr	r2, [pc, #312]	@ (8008ac8 <HAL_SAI_Init+0x22c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008994:	4a4d      	ldr	r2, [pc, #308]	@ (8008acc <HAL_SAI_Init+0x230>)
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e002      	b.n	80089a2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800899c:	4a4c      	ldr	r2, [pc, #304]	@ (8008ad0 <HAL_SAI_Init+0x234>)
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d073      	beq.n	8008a92 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a45      	ldr	r2, [pc, #276]	@ (8008ac4 <HAL_SAI_Init+0x228>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d004      	beq.n	80089be <HAL_SAI_Init+0x122>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a43      	ldr	r2, [pc, #268]	@ (8008ac8 <HAL_SAI_Init+0x22c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d105      	bne.n	80089ca <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80089be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80089c2:	f7fe fd0d 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80089c6:	61b8      	str	r0, [r7, #24]
 80089c8:	e004      	b.n	80089d4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80089ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80089ce:	f7fe fd07 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80089d2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089dc:	d120      	bne.n	8008a20 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d102      	bne.n	80089ec <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80089e6:	2340      	movs	r3, #64	@ 0x40
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	e00a      	b.n	8008a02 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d103      	bne.n	80089fc <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80089f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089f8:	613b      	str	r3, [r7, #16]
 80089fa:	e002      	b.n	8008a02 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a00:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e017      	b.n	8008a50 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a28:	d101      	bne.n	8008a2e <HAL_SAI_Init+0x192>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e000      	b.n	8008a30 <HAL_SAI_Init+0x194>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a4e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	4a20      	ldr	r2, [pc, #128]	@ (8008ad4 <HAL_SAI_Init+0x238>)
 8008a54:	fba2 2303 	umull	r2, r3, r2, r3
 8008a58:	08da      	lsrs	r2, r3, #3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad4 <HAL_SAI_Init+0x238>)
 8008a62:	fba3 2301 	umull	r2, r3, r3, r1
 8008a66:	08da      	lsrs	r2, r3, #3
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	1aca      	subs	r2, r1, r3
 8008a72:	2a08      	cmp	r2, #8
 8008a74:	d904      	bls.n	8008a80 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d104      	bne.n	8008a92 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	085a      	lsrs	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_SAI_Init+0x206>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d109      	bne.n	8008ab6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <HAL_SAI_Init+0x212>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e001      	b.n	8008ab2 <HAL_SAI_Init+0x216>
 8008aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ab2:	623b      	str	r3, [r7, #32]
 8008ab4:	e012      	b.n	8008adc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d10c      	bne.n	8008ad8 <HAL_SAI_Init+0x23c>
 8008abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ac2:	e00a      	b.n	8008ada <HAL_SAI_Init+0x23e>
 8008ac4:	40015404 	.word	0x40015404
 8008ac8:	40015424 	.word	0x40015424
 8008acc:	40015400 	.word	0x40015400
 8008ad0:	40015800 	.word	0x40015800
 8008ad4:	cccccccd 	.word	0xcccccccd
 8008ad8:	2300      	movs	r3, #0
 8008ada:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b58      	ldr	r3, [pc, #352]	@ (8008c48 <HAL_SAI_Init+0x3ac>)
 8008ae8:	400b      	ands	r3, r1
 8008aea:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6819      	ldr	r1, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b00:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b06:	431a      	orrs	r2, r3
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8008b14:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b20:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	051b      	lsls	r3, r3, #20
 8008b28:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b2e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008b46:	f023 030f 	bic.w	r3, r3, #15
 8008b4a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6899      	ldr	r1, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b35      	ldr	r3, [pc, #212]	@ (8008c4c <HAL_SAI_Init+0x3b0>)
 8008b76:	400b      	ands	r3, r1
 8008b78:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6899      	ldr	r1, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b84:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008b8a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8008b90:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8008b96:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008ba0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68d9      	ldr	r1, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008bb8:	400b      	ands	r3, r1
 8008bba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68d9      	ldr	r1, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008bd2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a19      	ldr	r2, [pc, #100]	@ (8008c50 <HAL_SAI_Init+0x3b4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d119      	bne.n	8008c24 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008bf0:	4b18      	ldr	r3, [pc, #96]	@ (8008c54 <HAL_SAI_Init+0x3b8>)
 8008bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf4:	4a17      	ldr	r2, [pc, #92]	@ (8008c54 <HAL_SAI_Init+0x3b8>)
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d10e      	bne.n	8008c24 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c12:	4910      	ldr	r1, [pc, #64]	@ (8008c54 <HAL_SAI_Init+0x3b8>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <HAL_SAI_Init+0x3b8>)
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8008c54 <HAL_SAI_Init+0x3b8>)
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3728      	adds	r7, #40	@ 0x28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	f805c010 	.word	0xf805c010
 8008c4c:	fff88000 	.word	0xfff88000
 8008c50:	40015404 	.word	0x40015404
 8008c54:	40015400 	.word	0x40015400

08008c58 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <SAI_InitI2S+0x2e>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d103      	bne.n	8008c8e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008c8c:	e002      	b.n	8008c94 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008c9a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ca2:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e077      	b.n	8008dae <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d107      	bne.n	8008cd4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60
 8008cd2:	e006      	b.n	8008ce2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008cda:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d84f      	bhi.n	8008d88 <SAI_InitI2S+0x130>
 8008ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf0 <SAI_InitI2S+0x98>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d23 	.word	0x08008d23
 8008cf8:	08008d45 	.word	0x08008d45
 8008cfc:	08008d67 	.word	0x08008d67
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2280      	movs	r2, #128	@ 0x80
 8008d04:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	011a      	lsls	r2, r3, #4
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2240      	movs	r2, #64	@ 0x40
 8008d1e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d20:	e035      	b.n	8008d8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2280      	movs	r2, #128	@ 0x80
 8008d26:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	085b      	lsrs	r3, r3, #1
 8008d2c:	019a      	lsls	r2, r3, #6
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2280      	movs	r2, #128	@ 0x80
 8008d40:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d42:	e024      	b.n	8008d8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	22c0      	movs	r2, #192	@ 0xc0
 8008d48:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	085b      	lsrs	r3, r3, #1
 8008d4e:	019a      	lsls	r2, r3, #6
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2280      	movs	r2, #128	@ 0x80
 8008d62:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d64:	e013      	b.n	8008d8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	22e0      	movs	r2, #224	@ 0xe0
 8008d6a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	019a      	lsls	r2, r3, #6
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2280      	movs	r2, #128	@ 0x80
 8008d84:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008d86:	e002      	b.n	8008d8e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d10b      	bne.n	8008dac <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d102      	bne.n	8008da0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2210      	movs	r2, #16
 8008d9e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d102      	bne.n	8008dac <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2208      	movs	r2, #8
 8008daa:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop

08008dbc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <SAI_InitPCM+0x2e>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d103      	bne.n	8008df2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008df0:	e002      	b.n	8008df8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008e04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008e0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e20:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d103      	bne.n	8008e30 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e2e:	e002      	b.n	8008e36 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	220d      	movs	r2, #13
 8008e34:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d837      	bhi.n	8008eac <SAI_InitPCM+0xf0>
 8008e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e44 <SAI_InitPCM+0x88>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e6b 	.word	0x08008e6b
 8008e4c:	08008e81 	.word	0x08008e81
 8008e50:	08008e97 	.word	0x08008e97
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2280      	movs	r2, #128	@ 0x80
 8008e58:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	011a      	lsls	r2, r3, #4
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2240      	movs	r2, #64	@ 0x40
 8008e66:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008e68:	e023      	b.n	8008eb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2280      	movs	r2, #128	@ 0x80
 8008e6e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2280      	movs	r2, #128	@ 0x80
 8008e7c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008e7e:	e018      	b.n	8008eb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	22c0      	movs	r2, #192	@ 0xc0
 8008e84:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2280      	movs	r2, #128	@ 0x80
 8008e92:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008e94:	e00d      	b.n	8008eb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	22e0      	movs	r2, #224	@ 0xe0
 8008e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2280      	movs	r2, #128	@ 0x80
 8008ea8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008eaa:	e002      	b.n	8008eb2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb0:	bf00      	nop
  }

  return status;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ec8:	4b18      	ldr	r3, [pc, #96]	@ (8008f2c <SAI_Disable+0x6c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a18      	ldr	r2, [pc, #96]	@ (8008f30 <SAI_Disable+0x70>)
 8008ece:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed2:	0b1b      	lsrs	r3, r3, #12
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008eea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	72fb      	strb	r3, [r7, #11]
      break;
 8008f06:	e009      	b.n	8008f1c <SAI_Disable+0x5c>
    }
    count--;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e7      	bne.n	8008eec <SAI_Disable+0x2c>

  return status;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000068 	.word	0x20000068
 8008f30:	95cbec1b 	.word	0x95cbec1b

08008f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e095      	b.n	8009072 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d108      	bne.n	8008f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f56:	d009      	beq.n	8008f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	61da      	str	r2, [r3, #28]
 8008f5e:	e005      	b.n	8008f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fa f868 	bl	800305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fac:	d902      	bls.n	8008fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e002      	b.n	8008fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008fc2:	d007      	beq.n	8008fd4 <HAL_SPI_Init+0xa0>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009016:	ea42 0103 	orr.w	r1, r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	0c1b      	lsrs	r3, r3, #16
 8009030:	f003 0204 	and.w	r2, r3, #4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009050:	ea42 0103 	orr.w	r1, r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_SPI_Transmit+0x22>
 8009098:	2302      	movs	r3, #2
 800909a:	e15f      	b.n	800935c <HAL_SPI_Transmit+0x2e2>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090a4:	f7fa fca2 	bl	80039ec <HAL_GetTick>
 80090a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d002      	beq.n	80090c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
 80090bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090be:	e148      	b.n	8009352 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_SPI_Transmit+0x52>
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090d0:	e13f      	b.n	8009352 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2203      	movs	r2, #3
 80090d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800911c:	d10f      	bne.n	800913e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800912c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800913c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d007      	beq.n	800915c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800915a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009164:	d94f      	bls.n	8009206 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_SPI_Transmit+0xfa>
 800916e:	8afb      	ldrh	r3, [r7, #22]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d142      	bne.n	80091fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009178:	881a      	ldrh	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009198:	e02f      	b.n	80091fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d112      	bne.n	80091ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091cc:	e015      	b.n	80091fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ce:	f7fa fc0d 	bl	80039ec <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d803      	bhi.n	80091e6 <HAL_SPI_Transmit+0x16c>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d102      	bne.n	80091ec <HAL_SPI_Transmit+0x172>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80091f8:	e0ab      	b.n	8009352 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1ca      	bne.n	800919a <HAL_SPI_Transmit+0x120>
 8009204:	e080      	b.n	8009308 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <HAL_SPI_Transmit+0x19a>
 800920e:	8afb      	ldrh	r3, [r7, #22]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d174      	bne.n	80092fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b01      	cmp	r3, #1
 800921c:	d912      	bls.n	8009244 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	881a      	ldrh	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922e:	1c9a      	adds	r2, r3, #2
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b02      	subs	r3, #2
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009242:	e05c      	b.n	80092fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	7812      	ldrb	r2, [r2, #0]
 8009250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009260:	b29b      	uxth	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800926a:	e048      	b.n	80092fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b02      	cmp	r3, #2
 8009278:	d12b      	bne.n	80092d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	2b01      	cmp	r3, #1
 8009282:	d912      	bls.n	80092aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009294:	1c9a      	adds	r2, r3, #2
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b02      	subs	r3, #2
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092a8:	e029      	b.n	80092fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	7812      	ldrb	r2, [r2, #0]
 80092b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80092d0:	e015      	b.n	80092fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092d2:	f7fa fb8b 	bl	80039ec <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d803      	bhi.n	80092ea <HAL_SPI_Transmit+0x270>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e8:	d102      	bne.n	80092f0 <HAL_SPI_Transmit+0x276>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80092fc:	e029      	b.n	8009352 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1b1      	bne.n	800926c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f947 	bl	80095a0 <SPI_EndRxTxTransaction>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009326:	2300      	movs	r3, #0
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e003      	b.n	8009352 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800935a:	7ffb      	ldrb	r3, [r7, #31]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	603b      	str	r3, [r7, #0]
 8009370:	4613      	mov	r3, r2
 8009372:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009374:	f7fa fb3a 	bl	80039ec <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	4413      	add	r3, r2
 8009382:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009384:	f7fa fb32 	bl	80039ec <HAL_GetTick>
 8009388:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800938a:	4b39      	ldr	r3, [pc, #228]	@ (8009470 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	015b      	lsls	r3, r3, #5
 8009390:	0d1b      	lsrs	r3, r3, #20
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800939a:	e054      	b.n	8009446 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a2:	d050      	beq.n	8009446 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093a4:	f7fa fb22 	bl	80039ec <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d902      	bls.n	80093ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d13d      	bne.n	8009436 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093d2:	d111      	bne.n	80093f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093dc:	d004      	beq.n	80093e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e6:	d107      	bne.n	80093f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009400:	d10f      	bne.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009420:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e017      	b.n	8009466 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	3b01      	subs	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4013      	ands	r3, r2
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	429a      	cmp	r2, r3
 8009454:	bf0c      	ite	eq
 8009456:	2301      	moveq	r3, #1
 8009458:	2300      	movne	r3, #0
 800945a:	b2db      	uxtb	r3, r3
 800945c:	461a      	mov	r2, r3
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	429a      	cmp	r2, r3
 8009462:	d19b      	bne.n	800939c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000068 	.word	0x20000068

08009474 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08a      	sub	sp, #40	@ 0x28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009486:	f7fa fab1 	bl	80039ec <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	4413      	add	r3, r2
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009496:	f7fa faa9 	bl	80039ec <HAL_GetTick>
 800949a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094a4:	4b3d      	ldr	r3, [pc, #244]	@ (800959c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	00da      	lsls	r2, r3, #3
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	0d1b      	lsrs	r3, r3, #20
 80094b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
 80094ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094bc:	e060      	b.n	8009580 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094c4:	d107      	bne.n	80094d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d104      	bne.n	80094d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d050      	beq.n	8009580 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094de:	f7fa fa85 	bl	80039ec <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d902      	bls.n	80094f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d13d      	bne.n	8009570 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009502:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800950c:	d111      	bne.n	8009532 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009516:	d004      	beq.n	8009522 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009520:	d107      	bne.n	8009532 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009530:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953a:	d10f      	bne.n	800955c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800955a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e010      	b.n	8009592 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	3b01      	subs	r3, #1
 800957e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4013      	ands	r3, r2
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	d196      	bne.n	80094be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3728      	adds	r7, #40	@ 0x28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000068 	.word	0x20000068

080095a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff ff5b 	bl	8009474 <SPI_WaitFifoStateUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d007      	beq.n	80095d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c8:	f043 0220 	orr.w	r2, r3, #32
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e027      	b.n	8009624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	2180      	movs	r1, #128	@ 0x80
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fec0 	bl	8009364 <SPI_WaitFlagStateUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d007      	beq.n	80095fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ee:	f043 0220 	orr.w	r2, r3, #32
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e014      	b.n	8009624 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2200      	movs	r2, #0
 8009602:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff ff34 	bl	8009474 <SPI_WaitFifoStateUntilTimeout>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009616:	f043 0220 	orr.w	r2, r3, #32
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e000      	b.n	8009624 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e049      	b.n	80096d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f9 fd76 	bl	8003144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f000 fc06 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d001      	beq.n	80096f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e04f      	b.n	8009794 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a23      	ldr	r2, [pc, #140]	@ (80097a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d01d      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d018      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1f      	ldr	r2, [pc, #124]	@ (80097a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1e      	ldr	r2, [pc, #120]	@ (80097a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00e      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1c      	ldr	r2, [pc, #112]	@ (80097ac <HAL_TIM_Base_Start_IT+0xd0>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d009      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1b      	ldr	r2, [pc, #108]	@ (80097b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d004      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0x76>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a19      	ldr	r2, [pc, #100]	@ (80097b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d115      	bne.n	800977e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	4b17      	ldr	r3, [pc, #92]	@ (80097b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800975a:	4013      	ands	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b06      	cmp	r3, #6
 8009762:	d015      	beq.n	8009790 <HAL_TIM_Base_Start_IT+0xb4>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800976a:	d011      	beq.n	8009790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977c:	e008      	b.n	8009790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0201 	orr.w	r2, r2, #1
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e000      	b.n	8009792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	40012c00 	.word	0x40012c00
 80097a4:	40000400 	.word	0x40000400
 80097a8:	40000800 	.word	0x40000800
 80097ac:	40000c00 	.word	0x40000c00
 80097b0:	40013400 	.word	0x40013400
 80097b4:	40014000 	.word	0x40014000
 80097b8:	00010007 	.word	0x00010007

080097bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e049      	b.n	8009862 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7f9 fd0a 	bl	80031fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f000 fb3e 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d020      	beq.n	80098ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d01b      	beq.n	80098ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0202 	mvn.w	r2, #2
 800989e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fac2 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 80098ba:	e005      	b.n	80098c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fab4 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fac5 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d020      	beq.n	800991a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d01b      	beq.n	800991a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f06f 0204 	mvn.w	r2, #4
 80098ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fa9c 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 8009906:	e005      	b.n	8009914 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fa8e 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa9f 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d020      	beq.n	8009966 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01b      	beq.n	8009966 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f06f 0208 	mvn.w	r2, #8
 8009936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2204      	movs	r2, #4
 800993c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f003 0303 	and.w	r3, r3, #3
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa76 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 8009952:	e005      	b.n	8009960 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fa68 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa79 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2b00      	cmp	r3, #0
 800996e:	d020      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f003 0310 	and.w	r3, r3, #16
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01b      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f06f 0210 	mvn.w	r2, #16
 8009982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2208      	movs	r2, #8
 8009988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa50 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 800999e:	e005      	b.n	80099ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa42 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa53 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00c      	beq.n	80099d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d007      	beq.n	80099d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f06f 0201 	mvn.w	r2, #1
 80099ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7f7 ff75 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 f821 	bl	800aa3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00c      	beq.n	8009a1e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f819 	bl	800aa50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00c      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa12 	bl	8009e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f06f 0220 	mvn.w	r2, #32
 8009a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 ffe1 	bl	800aa28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d101      	bne.n	8009a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e0ff      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b14      	cmp	r3, #20
 8009a9a:	f200 80f0 	bhi.w	8009c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009c7f 	.word	0x08009c7f
 8009aac:	08009c7f 	.word	0x08009c7f
 8009ab0:	08009c7f 	.word	0x08009c7f
 8009ab4:	08009b39 	.word	0x08009b39
 8009ab8:	08009c7f 	.word	0x08009c7f
 8009abc:	08009c7f 	.word	0x08009c7f
 8009ac0:	08009c7f 	.word	0x08009c7f
 8009ac4:	08009b7b 	.word	0x08009b7b
 8009ac8:	08009c7f 	.word	0x08009c7f
 8009acc:	08009c7f 	.word	0x08009c7f
 8009ad0:	08009c7f 	.word	0x08009c7f
 8009ad4:	08009bbb 	.word	0x08009bbb
 8009ad8:	08009c7f 	.word	0x08009c7f
 8009adc:	08009c7f 	.word	0x08009c7f
 8009ae0:	08009c7f 	.word	0x08009c7f
 8009ae4:	08009bfd 	.word	0x08009bfd
 8009ae8:	08009c7f 	.word	0x08009c7f
 8009aec:	08009c7f 	.word	0x08009c7f
 8009af0:	08009c7f 	.word	0x08009c7f
 8009af4:	08009c3d 	.word	0x08009c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 fa56 	bl	8009fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f042 0208 	orr.w	r2, r2, #8
 8009b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0204 	bic.w	r2, r2, #4
 8009b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6999      	ldr	r1, [r3, #24]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	619a      	str	r2, [r3, #24]
      break;
 8009b36:	e0a5      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fac6 	bl	800a0d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699a      	ldr	r2, [r3, #24]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6999      	ldr	r1, [r3, #24]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	021a      	lsls	r2, r3, #8
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	619a      	str	r2, [r3, #24]
      break;
 8009b78:	e084      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fb2f 	bl	800a1e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69da      	ldr	r2, [r3, #28]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 0208 	orr.w	r2, r2, #8
 8009b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0204 	bic.w	r2, r2, #4
 8009ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69d9      	ldr	r1, [r3, #28]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	61da      	str	r2, [r3, #28]
      break;
 8009bb8:	e064      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fb97 	bl	800a2f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69da      	ldr	r2, [r3, #28]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69d9      	ldr	r1, [r3, #28]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	021a      	lsls	r2, r3, #8
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	61da      	str	r2, [r3, #28]
      break;
 8009bfa:	e043      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fbe0 	bl	800a3c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0208 	orr.w	r2, r2, #8
 8009c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0204 	bic.w	r2, r2, #4
 8009c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	691a      	ldr	r2, [r3, #16]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009c3a:	e023      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fc24 	bl	800a490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	021a      	lsls	r2, r3, #8
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009c7c:	e002      	b.n	8009c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]
      break;
 8009c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop

08009c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d101      	bne.n	8009cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	e0b6      	b.n	8009e22 <HAL_TIM_ConfigClockSource+0x18a>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf0:	d03e      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0xd8>
 8009cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf6:	f200 8087 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfe:	f000 8086 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x176>
 8009d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d06:	d87f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d08:	2b70      	cmp	r3, #112	@ 0x70
 8009d0a:	d01a      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0xaa>
 8009d0c:	2b70      	cmp	r3, #112	@ 0x70
 8009d0e:	d87b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d050      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x11e>
 8009d14:	2b60      	cmp	r3, #96	@ 0x60
 8009d16:	d877      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d18:	2b50      	cmp	r3, #80	@ 0x50
 8009d1a:	d03c      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xfe>
 8009d1c:	2b50      	cmp	r3, #80	@ 0x50
 8009d1e:	d873      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d058      	beq.n	8009dd6 <HAL_TIM_ConfigClockSource+0x13e>
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	d86f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d28:	2b30      	cmp	r3, #48	@ 0x30
 8009d2a:	d064      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15e>
 8009d2c:	2b30      	cmp	r3, #48	@ 0x30
 8009d2e:	d86b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d060      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15e>
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d867      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d05c      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15e>
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d05a      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15e>
 8009d40:	e062      	b.n	8009e08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d52:	f000 fc7d 	bl	800a650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	609a      	str	r2, [r3, #8]
      break;
 8009d6e:	e04f      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d80:	f000 fc66 	bl	800a650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d92:	609a      	str	r2, [r3, #8]
      break;
 8009d94:	e03c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009da2:	461a      	mov	r2, r3
 8009da4:	f000 fbda 	bl	800a55c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2150      	movs	r1, #80	@ 0x50
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fc33 	bl	800a61a <TIM_ITRx_SetConfig>
      break;
 8009db4:	e02c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f000 fbf9 	bl	800a5ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2160      	movs	r1, #96	@ 0x60
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fc23 	bl	800a61a <TIM_ITRx_SetConfig>
      break;
 8009dd4:	e01c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de2:	461a      	mov	r2, r3
 8009de4:	f000 fbba 	bl	800a55c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2140      	movs	r1, #64	@ 0x40
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fc13 	bl	800a61a <TIM_ITRx_SetConfig>
      break;
 8009df4:	e00c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f000 fc0a 	bl	800a61a <TIM_ITRx_SetConfig>
      break;
 8009e06:	e003      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e000      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a40      	ldr	r2, [pc, #256]	@ (8009f90 <TIM_Base_SetConfig+0x114>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d013      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9a:	d00f      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8009f94 <TIM_Base_SetConfig+0x118>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8009f98 <TIM_Base_SetConfig+0x11c>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a3b      	ldr	r2, [pc, #236]	@ (8009f9c <TIM_Base_SetConfig+0x120>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d108      	bne.n	8009ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8009f90 <TIM_Base_SetConfig+0x114>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d01f      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009edc:	d01b      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8009f94 <TIM_Base_SetConfig+0x118>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d017      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8009f98 <TIM_Base_SetConfig+0x11c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d013      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8009f9c <TIM_Base_SetConfig+0x120>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00f      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a29      	ldr	r2, [pc, #164]	@ (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00b      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a28      	ldr	r2, [pc, #160]	@ (8009fa4 <TIM_Base_SetConfig+0x128>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d007      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a27      	ldr	r2, [pc, #156]	@ (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_Base_SetConfig+0x9a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a26      	ldr	r2, [pc, #152]	@ (8009fac <TIM_Base_SetConfig+0x130>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d108      	bne.n	8009f28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a10      	ldr	r2, [pc, #64]	@ (8009f90 <TIM_Base_SetConfig+0x114>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d00f      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a12      	ldr	r2, [pc, #72]	@ (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00b      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <TIM_Base_SetConfig+0x128>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d007      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a10      	ldr	r2, [pc, #64]	@ (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d003      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8009fac <TIM_Base_SetConfig+0x130>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d103      	bne.n	8009f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	615a      	str	r2, [r3, #20]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40012c00 	.word	0x40012c00
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	40013400 	.word	0x40013400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	40014800 	.word	0x40014800

08009fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	f023 0201 	bic.w	r2, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0303 	bic.w	r3, r3, #3
 8009fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f023 0302 	bic.w	r3, r3, #2
 8009ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	4313      	orrs	r3, r2
 800a006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a2c      	ldr	r2, [pc, #176]	@ (800a0bc <TIM_OC1_SetConfig+0x10c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00f      	beq.n	800a030 <TIM_OC1_SetConfig+0x80>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a2b      	ldr	r2, [pc, #172]	@ (800a0c0 <TIM_OC1_SetConfig+0x110>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d00b      	beq.n	800a030 <TIM_OC1_SetConfig+0x80>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a2a      	ldr	r2, [pc, #168]	@ (800a0c4 <TIM_OC1_SetConfig+0x114>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d007      	beq.n	800a030 <TIM_OC1_SetConfig+0x80>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a29      	ldr	r2, [pc, #164]	@ (800a0c8 <TIM_OC1_SetConfig+0x118>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d003      	beq.n	800a030 <TIM_OC1_SetConfig+0x80>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a28      	ldr	r2, [pc, #160]	@ (800a0cc <TIM_OC1_SetConfig+0x11c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10c      	bne.n	800a04a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f023 0308 	bic.w	r3, r3, #8
 800a036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f023 0304 	bic.w	r3, r3, #4
 800a048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a1b      	ldr	r2, [pc, #108]	@ (800a0bc <TIM_OC1_SetConfig+0x10c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00f      	beq.n	800a072 <TIM_OC1_SetConfig+0xc2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a1a      	ldr	r2, [pc, #104]	@ (800a0c0 <TIM_OC1_SetConfig+0x110>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d00b      	beq.n	800a072 <TIM_OC1_SetConfig+0xc2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a19      	ldr	r2, [pc, #100]	@ (800a0c4 <TIM_OC1_SetConfig+0x114>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d007      	beq.n	800a072 <TIM_OC1_SetConfig+0xc2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a18      	ldr	r2, [pc, #96]	@ (800a0c8 <TIM_OC1_SetConfig+0x118>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d003      	beq.n	800a072 <TIM_OC1_SetConfig+0xc2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a17      	ldr	r2, [pc, #92]	@ (800a0cc <TIM_OC1_SetConfig+0x11c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d111      	bne.n	800a096 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	621a      	str	r2, [r3, #32]
}
 800a0b0:	bf00      	nop
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40013400 	.word	0x40013400
 800a0c4:	40014000 	.word	0x40014000
 800a0c8:	40014400 	.word	0x40014400
 800a0cc:	40014800 	.word	0x40014800

0800a0d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	f023 0210 	bic.w	r2, r3, #16
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f023 0320 	bic.w	r3, r3, #32
 800a11e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	4313      	orrs	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a28      	ldr	r2, [pc, #160]	@ (800a1d0 <TIM_OC2_SetConfig+0x100>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d003      	beq.n	800a13c <TIM_OC2_SetConfig+0x6c>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a27      	ldr	r2, [pc, #156]	@ (800a1d4 <TIM_OC2_SetConfig+0x104>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d10d      	bne.n	800a158 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	011b      	lsls	r3, r3, #4
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d0 <TIM_OC2_SetConfig+0x100>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00f      	beq.n	800a180 <TIM_OC2_SetConfig+0xb0>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d4 <TIM_OC2_SetConfig+0x104>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00b      	beq.n	800a180 <TIM_OC2_SetConfig+0xb0>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1d8 <TIM_OC2_SetConfig+0x108>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d007      	beq.n	800a180 <TIM_OC2_SetConfig+0xb0>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a1a      	ldr	r2, [pc, #104]	@ (800a1dc <TIM_OC2_SetConfig+0x10c>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC2_SetConfig+0xb0>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a19      	ldr	r2, [pc, #100]	@ (800a1e0 <TIM_OC2_SetConfig+0x110>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d113      	bne.n	800a1a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a18e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40012c00 	.word	0x40012c00
 800a1d4:	40013400 	.word	0x40013400
 800a1d8:	40014000 	.word	0x40014000
 800a1dc:	40014400 	.word	0x40014400
 800a1e0:	40014800 	.word	0x40014800

0800a1e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0303 	bic.w	r3, r3, #3
 800a21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	021b      	lsls	r3, r3, #8
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a27      	ldr	r2, [pc, #156]	@ (800a2e0 <TIM_OC3_SetConfig+0xfc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_OC3_SetConfig+0x6a>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a26      	ldr	r2, [pc, #152]	@ (800a2e4 <TIM_OC3_SetConfig+0x100>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d10d      	bne.n	800a26a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2e0 <TIM_OC3_SetConfig+0xfc>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00f      	beq.n	800a292 <TIM_OC3_SetConfig+0xae>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a1b      	ldr	r2, [pc, #108]	@ (800a2e4 <TIM_OC3_SetConfig+0x100>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d00b      	beq.n	800a292 <TIM_OC3_SetConfig+0xae>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a1a      	ldr	r2, [pc, #104]	@ (800a2e8 <TIM_OC3_SetConfig+0x104>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d007      	beq.n	800a292 <TIM_OC3_SetConfig+0xae>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a19      	ldr	r2, [pc, #100]	@ (800a2ec <TIM_OC3_SetConfig+0x108>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_OC3_SetConfig+0xae>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a18      	ldr	r2, [pc, #96]	@ (800a2f0 <TIM_OC3_SetConfig+0x10c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d113      	bne.n	800a2ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	621a      	str	r2, [r3, #32]
}
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	40013400 	.word	0x40013400
 800a2e8:	40014000 	.word	0x40014000
 800a2ec:	40014400 	.word	0x40014400
 800a2f0:	40014800 	.word	0x40014800

0800a2f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	031b      	lsls	r3, r3, #12
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a18      	ldr	r2, [pc, #96]	@ (800a3b4 <TIM_OC4_SetConfig+0xc0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00f      	beq.n	800a378 <TIM_OC4_SetConfig+0x84>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a17      	ldr	r2, [pc, #92]	@ (800a3b8 <TIM_OC4_SetConfig+0xc4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d00b      	beq.n	800a378 <TIM_OC4_SetConfig+0x84>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a16      	ldr	r2, [pc, #88]	@ (800a3bc <TIM_OC4_SetConfig+0xc8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d007      	beq.n	800a378 <TIM_OC4_SetConfig+0x84>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a15      	ldr	r2, [pc, #84]	@ (800a3c0 <TIM_OC4_SetConfig+0xcc>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d003      	beq.n	800a378 <TIM_OC4_SetConfig+0x84>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a14      	ldr	r2, [pc, #80]	@ (800a3c4 <TIM_OC4_SetConfig+0xd0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d109      	bne.n	800a38c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a37e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	019b      	lsls	r3, r3, #6
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4313      	orrs	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	621a      	str	r2, [r3, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	40012c00 	.word	0x40012c00
 800a3b8:	40013400 	.word	0x40013400
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40014400 	.word	0x40014400
 800a3c4:	40014800 	.word	0x40014800

0800a3c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a40c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a17      	ldr	r2, [pc, #92]	@ (800a47c <TIM_OC5_SetConfig+0xb4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00f      	beq.n	800a442 <TIM_OC5_SetConfig+0x7a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a16      	ldr	r2, [pc, #88]	@ (800a480 <TIM_OC5_SetConfig+0xb8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00b      	beq.n	800a442 <TIM_OC5_SetConfig+0x7a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <TIM_OC5_SetConfig+0xbc>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d007      	beq.n	800a442 <TIM_OC5_SetConfig+0x7a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a14      	ldr	r2, [pc, #80]	@ (800a488 <TIM_OC5_SetConfig+0xc0>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d003      	beq.n	800a442 <TIM_OC5_SetConfig+0x7a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a13      	ldr	r2, [pc, #76]	@ (800a48c <TIM_OC5_SetConfig+0xc4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d109      	bne.n	800a456 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	621a      	str	r2, [r3, #32]
}
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	40012c00 	.word	0x40012c00
 800a480:	40013400 	.word	0x40013400
 800a484:	40014000 	.word	0x40014000
 800a488:	40014400 	.word	0x40014400
 800a48c:	40014800 	.word	0x40014800

0800a490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	051b      	lsls	r3, r3, #20
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	@ (800a548 <TIM_OC6_SetConfig+0xb8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00f      	beq.n	800a50c <TIM_OC6_SetConfig+0x7c>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a17      	ldr	r2, [pc, #92]	@ (800a54c <TIM_OC6_SetConfig+0xbc>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <TIM_OC6_SetConfig+0x7c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a16      	ldr	r2, [pc, #88]	@ (800a550 <TIM_OC6_SetConfig+0xc0>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <TIM_OC6_SetConfig+0x7c>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a15      	ldr	r2, [pc, #84]	@ (800a554 <TIM_OC6_SetConfig+0xc4>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d003      	beq.n	800a50c <TIM_OC6_SetConfig+0x7c>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a14      	ldr	r2, [pc, #80]	@ (800a558 <TIM_OC6_SetConfig+0xc8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d109      	bne.n	800a520 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	029b      	lsls	r3, r3, #10
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	621a      	str	r2, [r3, #32]
}
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	40012c00 	.word	0x40012c00
 800a54c:	40013400 	.word	0x40013400
 800a550:	40014000 	.word	0x40014000
 800a554:	40014400 	.word	0x40014400
 800a558:	40014800 	.word	0x40014800

0800a55c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f023 0201 	bic.w	r2, r3, #1
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f023 030a 	bic.w	r3, r3, #10
 800a598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	621a      	str	r2, [r3, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	371c      	adds	r7, #28
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b087      	sub	sp, #28
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	f023 0210 	bic.w	r2, r3, #16
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	031b      	lsls	r3, r3, #12
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	011b      	lsls	r3, r3, #4
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b085      	sub	sp, #20
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4313      	orrs	r3, r2
 800a638:	f043 0307 	orr.w	r3, r3, #7
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	609a      	str	r2, [r3, #8]
}
 800a644:	bf00      	nop
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a66a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	021a      	lsls	r2, r3, #8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	431a      	orrs	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4313      	orrs	r3, r2
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	609a      	str	r2, [r3, #8]
}
 800a684:	bf00      	nop
 800a686:	371c      	adds	r7, #28
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d101      	bne.n	800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	e068      	b.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a2e      	ldr	r2, [pc, #184]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a2d      	ldr	r2, [pc, #180]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d108      	bne.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a1e      	ldr	r2, [pc, #120]	@ (800a788 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d01d      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71a:	d018      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a1b      	ldr	r2, [pc, #108]	@ (800a790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d013      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a1a      	ldr	r2, [pc, #104]	@ (800a794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00e      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a18      	ldr	r2, [pc, #96]	@ (800a798 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d009      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a13      	ldr	r2, [pc, #76]	@ (800a78c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d004      	beq.n	800a74e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a14      	ldr	r2, [pc, #80]	@ (800a79c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d10c      	bne.n	800a768 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40012c00 	.word	0x40012c00
 800a78c:	40013400 	.word	0x40013400
 800a790:	40000400 	.word	0x40000400
 800a794:	40000800 	.word	0x40000800
 800a798:	40000c00 	.word	0x40000c00
 800a79c:	40014000 	.word	0x40014000

0800a7a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d101      	bne.n	800a7bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e065      	b.n	800a888 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	041b      	lsls	r3, r3, #16
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a16      	ldr	r2, [pc, #88]	@ (800a894 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d004      	beq.n	800a84a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a14      	ldr	r2, [pc, #80]	@ (800a898 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d115      	bne.n	800a876 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a854:	051b      	lsls	r3, r3, #20
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	40012c00 	.word	0x40012c00
 800a898:	40013400 	.word	0x40013400

0800a89c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800a89c:	b480      	push	{r7}
 800a89e:	b08b      	sub	sp, #44	@ 0x2c
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d101      	bne.n	800a8bc <HAL_TIMEx_ConfigBreakInput+0x20>
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e0af      	b.n	800aa1c <HAL_TIMEx_ConfigBreakInput+0x180>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	2b07      	cmp	r3, #7
 800a8cc:	d83a      	bhi.n	800a944 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800a8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8f5 	.word	0x0800a8f5
 800a8d8:	0800a909 	.word	0x0800a909
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a91d 	.word	0x0800a91d
 800a8e4:	0800a945 	.word	0x0800a945
 800a8e8:	0800a945 	.word	0x0800a945
 800a8ec:	0800a945 	.word	0x0800a945
 800a8f0:	0800a931 	.word	0x0800a931
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800a8fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a900:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800a902:	2309      	movs	r3, #9
 800a904:	613b      	str	r3, [r7, #16]
      break;
 800a906:	e026      	b.n	800a956 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800a908:	2302      	movs	r3, #2
 800a90a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800a910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a914:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800a916:	230a      	movs	r3, #10
 800a918:	613b      	str	r3, [r7, #16]
      break;
 800a91a:	e01c      	b.n	800a956 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800a91c:	2304      	movs	r3, #4
 800a91e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800a920:	2302      	movs	r3, #2
 800a922:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800a924:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a928:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800a92a:	230b      	movs	r3, #11
 800a92c:	613b      	str	r3, [r7, #16]
      break;
 800a92e:	e012      	b.n	800a956 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800a930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a934:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800a936:	2308      	movs	r3, #8
 800a938:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
      break;
 800a942:	e008      	b.n	800a956 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
      break;
 800a954:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d003      	beq.n	800a964 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d029      	beq.n	800a9b6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800a962:	e051      	b.n	800aa08 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a96a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	43db      	mvns	r3, r3
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	4013      	ands	r3, r2
 800a974:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	409a      	lsls	r2, r3
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4013      	ands	r3, r2
 800a982:	6a3a      	ldr	r2, [r7, #32]
 800a984:	4313      	orrs	r3, r2
 800a986:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d00d      	beq.n	800a9ac <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	43db      	mvns	r3, r3
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	4013      	ands	r3, r2
 800a998:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	689a      	ldr	r2, [r3, #8]
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	6a3a      	ldr	r2, [r7, #32]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a3a      	ldr	r2, [r7, #32]
 800a9b2:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800a9b4:	e02c      	b.n	800aa10 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	43db      	mvns	r3, r3
 800a9c2:	6a3a      	ldr	r2, [r7, #32]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	409a      	lsls	r2, r3
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	6a3a      	ldr	r2, [r7, #32]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b08      	cmp	r3, #8
 800a9e0:	d00d      	beq.n	800a9fe <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	6a3a      	ldr	r2, [r7, #32]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	409a      	lsls	r2, r3
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	6a3a      	ldr	r2, [r7, #32]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800aa06:	e003      	b.n	800aa10 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800aa0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	372c      	adds	r7, #44	@ 0x2c
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e042      	b.n	800aafc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7f8 f9f5 	bl	8002e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2224      	movs	r2, #36	@ 0x24
 800aa92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f022 0201 	bic.w	r2, r2, #1
 800aaa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 ff42 	bl	800b938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fc43 	bl	800b340 <UART_SetConfig>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e01b      	b.n	800aafc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689a      	ldr	r2, [r3, #8]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 ffc1 	bl	800ba7c <UART_CheckIdleState>
 800aafa:	4603      	mov	r3, r0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	@ 0x28
 800ab08:	af02      	add	r7, sp, #8
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	4613      	mov	r3, r2
 800ab12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab1a:	2b20      	cmp	r3, #32
 800ab1c:	d17b      	bne.n	800ac16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <HAL_UART_Transmit+0x26>
 800ab24:	88fb      	ldrh	r3, [r7, #6]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e074      	b.n	800ac18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2221      	movs	r2, #33	@ 0x21
 800ab3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab3e:	f7f8 ff55 	bl	80039ec <HAL_GetTick>
 800ab42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	88fa      	ldrh	r2, [r7, #6]
 800ab48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab5c:	d108      	bne.n	800ab70 <HAL_UART_Transmit+0x6c>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	e003      	b.n	800ab78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab78:	e030      	b.n	800abdc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2200      	movs	r2, #0
 800ab82:	2180      	movs	r1, #128	@ 0x80
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f001 f823 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e03d      	b.n	800ac18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10b      	bne.n	800abba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	881a      	ldrh	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abae:	b292      	uxth	r2, r2
 800abb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	3302      	adds	r3, #2
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	e007      	b.n	800abca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	3301      	adds	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	3b01      	subs	r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1c8      	bne.n	800ab7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2200      	movs	r2, #0
 800abf0:	2140      	movs	r1, #64	@ 0x40
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 ffec 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d005      	beq.n	800ac0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e006      	b.n	800ac18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e000      	b.n	800ac18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ac16:	2302      	movs	r3, #2
  }
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3720      	adds	r7, #32
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08a      	sub	sp, #40	@ 0x28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d137      	bne.n	800aca8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <HAL_UART_Receive_IT+0x24>
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e030      	b.n	800acaa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <HAL_UART_Receive_IT+0x94>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d01f      	beq.n	800ac98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d018      	beq.n	800ac98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	613b      	str	r3, [r7, #16]
   return(result);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	623b      	str	r3, [r7, #32]
 800ac86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	69f9      	ldr	r1, [r7, #28]
 800ac8a:	6a3a      	ldr	r2, [r7, #32]
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e6      	bne.n	800ac66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac98:	88fb      	ldrh	r3, [r7, #6]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 fffe 	bl	800bca0 <UART_Start_Receive_IT>
 800aca4:	4603      	mov	r3, r0
 800aca6:	e000      	b.n	800acaa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aca8:	2302      	movs	r3, #2
  }
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3728      	adds	r7, #40	@ 0x28
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40008000 	.word	0x40008000

0800acb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b0ba      	sub	sp, #232	@ 0xe8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800acde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ace2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ace6:	4013      	ands	r3, r2
 800ace8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800acec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11b      	bne.n	800ad2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800acf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acf8:	f003 0320 	and.w	r3, r3, #32
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d015      	beq.n	800ad2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad04:	f003 0320 	and.w	r3, r3, #32
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d105      	bne.n	800ad18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d009      	beq.n	800ad2c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 82e3 	beq.w	800b2e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	4798      	blx	r3
      }
      return;
 800ad2a:	e2dd      	b.n	800b2e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800ad2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 8123 	beq.w	800af7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ad3a:	4b8d      	ldr	r3, [pc, #564]	@ (800af70 <HAL_UART_IRQHandler+0x2b8>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ad46:	4b8b      	ldr	r3, [pc, #556]	@ (800af74 <HAL_UART_IRQHandler+0x2bc>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8116 	beq.w	800af7c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad54:	f003 0301 	and.w	r3, r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d011      	beq.n	800ad80 <HAL_UART_IRQHandler+0xc8>
 800ad5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00b      	beq.n	800ad80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad76:	f043 0201 	orr.w	r2, r3, #1
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d011      	beq.n	800adb0 <HAL_UART_IRQHandler+0xf8>
 800ad8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada6:	f043 0204 	orr.w	r2, r3, #4
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d011      	beq.n	800ade0 <HAL_UART_IRQHandler+0x128>
 800adbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2204      	movs	r2, #4
 800adce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add6:	f043 0202 	orr.w	r2, r3, #2
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ade0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ade4:	f003 0308 	and.w	r3, r3, #8
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d017      	beq.n	800ae1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800adec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adf0:	f003 0320 	and.w	r3, r3, #32
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d105      	bne.n	800ae04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800adf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800adfc:	4b5c      	ldr	r3, [pc, #368]	@ (800af70 <HAL_UART_IRQHandler+0x2b8>)
 800adfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2208      	movs	r2, #8
 800ae0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae12:	f043 0208 	orr.w	r2, r3, #8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d012      	beq.n	800ae4e <HAL_UART_IRQHandler+0x196>
 800ae28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00c      	beq.n	800ae4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae44:	f043 0220 	orr.w	r2, r3, #32
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8249 	beq.w	800b2ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d013      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae6a:	f003 0320 	and.w	r3, r3, #32
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d105      	bne.n	800ae7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea2:	2b40      	cmp	r3, #64	@ 0x40
 800aea4:	d005      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aeaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d054      	beq.n	800af5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f816 	bl	800bee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec2:	2b40      	cmp	r3, #64	@ 0x40
 800aec4:	d146      	bne.n	800af54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aef2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aefe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1d9      	bne.n	800aec6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d017      	beq.n	800af4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af22:	4a15      	ldr	r2, [pc, #84]	@ (800af78 <HAL_UART_IRQHandler+0x2c0>)
 800af24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f9 ff76 	bl	8004e1e <HAL_DMA_Abort_IT>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d019      	beq.n	800af6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800af46:	4610      	mov	r0, r2
 800af48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af4a:	e00f      	b.n	800af6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9e1 	bl	800b314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af52:	e00b      	b.n	800af6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f9dd 	bl	800b314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af5a:	e007      	b.n	800af6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f9d9 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800af6a:	e1bf      	b.n	800b2ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	bf00      	nop
    return;
 800af6e:	e1bd      	b.n	800b2ec <HAL_UART_IRQHandler+0x634>
 800af70:	10000001 	.word	0x10000001
 800af74:	04000120 	.word	0x04000120
 800af78:	0800bfb1 	.word	0x0800bfb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af80:	2b01      	cmp	r3, #1
 800af82:	f040 8153 	bne.w	800b22c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af8a:	f003 0310 	and.w	r3, r3, #16
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 814c 	beq.w	800b22c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8145 	beq.w	800b22c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2210      	movs	r2, #16
 800afa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb4:	2b40      	cmp	r3, #64	@ 0x40
 800afb6:	f040 80bb 	bne.w	800b130 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 818f 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800afdc:	429a      	cmp	r2, r3
 800afde:	f080 8187 	bcs.w	800b2f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800afe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	f040 8087 	bne.w	800b10e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b01c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b02a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b02e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1da      	bne.n	800b000 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3308      	adds	r3, #8
 800b050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b05a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3308      	adds	r3, #8
 800b06a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b06e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e1      	bne.n	800b04a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b09c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b0aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e3      	bne.n	800b086 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d4:	e853 3f00 	ldrex	r3, [r3]
 800b0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0dc:	f023 0310 	bic.w	r3, r3, #16
 800b0e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e4      	bne.n	800b0cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f9 fe2c 	bl	8004d66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2202      	movs	r2, #2
 800b112:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b120:	b29b      	uxth	r3, r3
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	b29b      	uxth	r3, r3
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f8fd 	bl	800b328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b12e:	e0df      	b.n	800b2f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 80d1 	beq.w	800b2f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80cc 	beq.w	800b2f4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b17e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b180:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e4      	bne.n	800b15c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3308      	adds	r3, #8
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1a8:	f023 0301 	bic.w	r3, r3, #1
 800b1ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b1ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e1      	bne.n	800b192 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2220      	movs	r2, #32
 800b1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 0310 	bic.w	r3, r3, #16
 800b1f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b204:	61fb      	str	r3, [r7, #28]
 800b206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	69b9      	ldr	r1, [r7, #24]
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	617b      	str	r3, [r7, #20]
   return(result);
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e4      	bne.n	800b1e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b21e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f87f 	bl	800b328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b22a:	e063      	b.n	800b2f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00e      	beq.n	800b256 <HAL_UART_IRQHandler+0x59e>
 800b238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b23c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d008      	beq.n	800b256 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b24c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fc14 	bl	800ca7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b254:	e051      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d014      	beq.n	800b28c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d105      	bne.n	800b27a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d03a      	beq.n	800b2f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	4798      	blx	r3
    }
    return;
 800b28a:	e035      	b.n	800b2f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <HAL_UART_IRQHandler+0x5f4>
 800b298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fe99 	bl	800bfdc <UART_EndTransmit_IT>
    return;
 800b2aa:	e026      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d009      	beq.n	800b2cc <HAL_UART_IRQHandler+0x614>
 800b2b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 fbed 	bl	800caa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2ca:	e016      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d010      	beq.n	800b2fa <HAL_UART_IRQHandler+0x642>
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da0c      	bge.n	800b2fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 fbd5 	bl	800ca90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2e6:	e008      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
      return;
 800b2e8:	bf00      	nop
 800b2ea:	e006      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
    return;
 800b2ec:	bf00      	nop
 800b2ee:	e004      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
      return;
 800b2f0:	bf00      	nop
 800b2f2:	e002      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
      return;
 800b2f4:	bf00      	nop
 800b2f6:	e000      	b.n	800b2fa <HAL_UART_IRQHandler+0x642>
    return;
 800b2f8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800b2fa:	37e8      	adds	r7, #232	@ 0xe8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b344:	b08c      	sub	sp, #48	@ 0x30
 800b346:	af00      	add	r7, sp, #0
 800b348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	689a      	ldr	r2, [r3, #8]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	431a      	orrs	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	431a      	orrs	r2, r3
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	4313      	orrs	r3, r2
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4baa      	ldr	r3, [pc, #680]	@ (800b618 <UART_SetConfig+0x2d8>)
 800b370:	4013      	ands	r3, r2
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	6812      	ldr	r2, [r2, #0]
 800b376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b378:	430b      	orrs	r3, r1
 800b37a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a9f      	ldr	r2, [pc, #636]	@ (800b61c <UART_SetConfig+0x2dc>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d004      	beq.n	800b3ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b3b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	6812      	ldr	r2, [r2, #0]
 800b3be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ca:	f023 010f 	bic.w	r1, r3, #15
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a90      	ldr	r2, [pc, #576]	@ (800b620 <UART_SetConfig+0x2e0>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d125      	bne.n	800b430 <UART_SetConfig+0xf0>
 800b3e4:	4b8f      	ldr	r3, [pc, #572]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ea:	f003 0303 	and.w	r3, r3, #3
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d81a      	bhi.n	800b428 <UART_SetConfig+0xe8>
 800b3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <UART_SetConfig+0xb8>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b409 	.word	0x0800b409
 800b3fc:	0800b419 	.word	0x0800b419
 800b400:	0800b411 	.word	0x0800b411
 800b404:	0800b421 	.word	0x0800b421
 800b408:	2301      	movs	r3, #1
 800b40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b40e:	e116      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b410:	2302      	movs	r3, #2
 800b412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b416:	e112      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b418:	2304      	movs	r3, #4
 800b41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b41e:	e10e      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b420:	2308      	movs	r3, #8
 800b422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b426:	e10a      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b428:	2310      	movs	r3, #16
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42e:	e106      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a7c      	ldr	r2, [pc, #496]	@ (800b628 <UART_SetConfig+0x2e8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d138      	bne.n	800b4ac <UART_SetConfig+0x16c>
 800b43a:	4b7a      	ldr	r3, [pc, #488]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b440:	f003 030c 	and.w	r3, r3, #12
 800b444:	2b0c      	cmp	r3, #12
 800b446:	d82d      	bhi.n	800b4a4 <UART_SetConfig+0x164>
 800b448:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <UART_SetConfig+0x110>)
 800b44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44e:	bf00      	nop
 800b450:	0800b485 	.word	0x0800b485
 800b454:	0800b4a5 	.word	0x0800b4a5
 800b458:	0800b4a5 	.word	0x0800b4a5
 800b45c:	0800b4a5 	.word	0x0800b4a5
 800b460:	0800b495 	.word	0x0800b495
 800b464:	0800b4a5 	.word	0x0800b4a5
 800b468:	0800b4a5 	.word	0x0800b4a5
 800b46c:	0800b4a5 	.word	0x0800b4a5
 800b470:	0800b48d 	.word	0x0800b48d
 800b474:	0800b4a5 	.word	0x0800b4a5
 800b478:	0800b4a5 	.word	0x0800b4a5
 800b47c:	0800b4a5 	.word	0x0800b4a5
 800b480:	0800b49d 	.word	0x0800b49d
 800b484:	2300      	movs	r3, #0
 800b486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48a:	e0d8      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b48c:	2302      	movs	r3, #2
 800b48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b492:	e0d4      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b494:	2304      	movs	r3, #4
 800b496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b49a:	e0d0      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b49c:	2308      	movs	r3, #8
 800b49e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4a2:	e0cc      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4aa:	e0c8      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a5e      	ldr	r2, [pc, #376]	@ (800b62c <UART_SetConfig+0x2ec>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d125      	bne.n	800b502 <UART_SetConfig+0x1c2>
 800b4b6:	4b5b      	ldr	r3, [pc, #364]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b4c0:	2b30      	cmp	r3, #48	@ 0x30
 800b4c2:	d016      	beq.n	800b4f2 <UART_SetConfig+0x1b2>
 800b4c4:	2b30      	cmp	r3, #48	@ 0x30
 800b4c6:	d818      	bhi.n	800b4fa <UART_SetConfig+0x1ba>
 800b4c8:	2b20      	cmp	r3, #32
 800b4ca:	d00a      	beq.n	800b4e2 <UART_SetConfig+0x1a2>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d814      	bhi.n	800b4fa <UART_SetConfig+0x1ba>
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <UART_SetConfig+0x19a>
 800b4d4:	2b10      	cmp	r3, #16
 800b4d6:	d008      	beq.n	800b4ea <UART_SetConfig+0x1aa>
 800b4d8:	e00f      	b.n	800b4fa <UART_SetConfig+0x1ba>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e0:	e0ad      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e8:	e0a9      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4ea:	2304      	movs	r3, #4
 800b4ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4f0:	e0a5      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4f8:	e0a1      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b500:	e09d      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a4a      	ldr	r2, [pc, #296]	@ (800b630 <UART_SetConfig+0x2f0>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d125      	bne.n	800b558 <UART_SetConfig+0x218>
 800b50c:	4b45      	ldr	r3, [pc, #276]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b512:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b516:	2bc0      	cmp	r3, #192	@ 0xc0
 800b518:	d016      	beq.n	800b548 <UART_SetConfig+0x208>
 800b51a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b51c:	d818      	bhi.n	800b550 <UART_SetConfig+0x210>
 800b51e:	2b80      	cmp	r3, #128	@ 0x80
 800b520:	d00a      	beq.n	800b538 <UART_SetConfig+0x1f8>
 800b522:	2b80      	cmp	r3, #128	@ 0x80
 800b524:	d814      	bhi.n	800b550 <UART_SetConfig+0x210>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <UART_SetConfig+0x1f0>
 800b52a:	2b40      	cmp	r3, #64	@ 0x40
 800b52c:	d008      	beq.n	800b540 <UART_SetConfig+0x200>
 800b52e:	e00f      	b.n	800b550 <UART_SetConfig+0x210>
 800b530:	2300      	movs	r3, #0
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b536:	e082      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b538:	2302      	movs	r3, #2
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53e:	e07e      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b546:	e07a      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b54e:	e076      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b556:	e072      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a35      	ldr	r2, [pc, #212]	@ (800b634 <UART_SetConfig+0x2f4>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d12a      	bne.n	800b5b8 <UART_SetConfig+0x278>
 800b562:	4b30      	ldr	r3, [pc, #192]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b56c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b570:	d01a      	beq.n	800b5a8 <UART_SetConfig+0x268>
 800b572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b576:	d81b      	bhi.n	800b5b0 <UART_SetConfig+0x270>
 800b578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b57c:	d00c      	beq.n	800b598 <UART_SetConfig+0x258>
 800b57e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b582:	d815      	bhi.n	800b5b0 <UART_SetConfig+0x270>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <UART_SetConfig+0x250>
 800b588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58c:	d008      	beq.n	800b5a0 <UART_SetConfig+0x260>
 800b58e:	e00f      	b.n	800b5b0 <UART_SetConfig+0x270>
 800b590:	2300      	movs	r3, #0
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b596:	e052      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b598:	2302      	movs	r3, #2
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59e:	e04e      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5a6:	e04a      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ae:	e046      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5b6:	e042      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a17      	ldr	r2, [pc, #92]	@ (800b61c <UART_SetConfig+0x2dc>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d13a      	bne.n	800b638 <UART_SetConfig+0x2f8>
 800b5c2:	4b18      	ldr	r3, [pc, #96]	@ (800b624 <UART_SetConfig+0x2e4>)
 800b5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b5cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5d0:	d01a      	beq.n	800b608 <UART_SetConfig+0x2c8>
 800b5d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5d6:	d81b      	bhi.n	800b610 <UART_SetConfig+0x2d0>
 800b5d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5dc:	d00c      	beq.n	800b5f8 <UART_SetConfig+0x2b8>
 800b5de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5e2:	d815      	bhi.n	800b610 <UART_SetConfig+0x2d0>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <UART_SetConfig+0x2b0>
 800b5e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ec:	d008      	beq.n	800b600 <UART_SetConfig+0x2c0>
 800b5ee:	e00f      	b.n	800b610 <UART_SetConfig+0x2d0>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f6:	e022      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5fe:	e01e      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b600:	2304      	movs	r3, #4
 800b602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b606:	e01a      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b608:	2308      	movs	r3, #8
 800b60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b60e:	e016      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b610:	2310      	movs	r3, #16
 800b612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b616:	e012      	b.n	800b63e <UART_SetConfig+0x2fe>
 800b618:	cfff69f3 	.word	0xcfff69f3
 800b61c:	40008000 	.word	0x40008000
 800b620:	40013800 	.word	0x40013800
 800b624:	40021000 	.word	0x40021000
 800b628:	40004400 	.word	0x40004400
 800b62c:	40004800 	.word	0x40004800
 800b630:	40004c00 	.word	0x40004c00
 800b634:	40005000 	.word	0x40005000
 800b638:	2310      	movs	r3, #16
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4aae      	ldr	r2, [pc, #696]	@ (800b8fc <UART_SetConfig+0x5bc>)
 800b644:	4293      	cmp	r3, r2
 800b646:	f040 8097 	bne.w	800b778 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b64a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b64e:	2b08      	cmp	r3, #8
 800b650:	d823      	bhi.n	800b69a <UART_SetConfig+0x35a>
 800b652:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <UART_SetConfig+0x318>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b67d 	.word	0x0800b67d
 800b65c:	0800b69b 	.word	0x0800b69b
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b69b 	.word	0x0800b69b
 800b668:	0800b68b 	.word	0x0800b68b
 800b66c:	0800b69b 	.word	0x0800b69b
 800b670:	0800b69b 	.word	0x0800b69b
 800b674:	0800b69b 	.word	0x0800b69b
 800b678:	0800b693 	.word	0x0800b693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b67c:	f7fb fa94 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 800b680:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b682:	e010      	b.n	800b6a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b684:	4b9e      	ldr	r3, [pc, #632]	@ (800b900 <UART_SetConfig+0x5c0>)
 800b686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b688:	e00d      	b.n	800b6a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b68a:	f7fb f9f5 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 800b68e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b690:	e009      	b.n	800b6a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b698:	e005      	b.n	800b6a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b6a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 8130 	beq.w	800b90e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b2:	4a94      	ldr	r2, [pc, #592]	@ (800b904 <UART_SetConfig+0x5c4>)
 800b6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	4413      	add	r3, r2
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d305      	bcc.n	800b6de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d903      	bls.n	800b6e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b6e4:	e113      	b.n	800b90e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	60bb      	str	r3, [r7, #8]
 800b6ec:	60fa      	str	r2, [r7, #12]
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f2:	4a84      	ldr	r2, [pc, #528]	@ (800b904 <UART_SetConfig+0x5c4>)
 800b6f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	603b      	str	r3, [r7, #0]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b704:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b708:	f7f5 fa66 	bl	8000bd8 <__aeabi_uldivmod>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4610      	mov	r0, r2
 800b712:	4619      	mov	r1, r3
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	020b      	lsls	r3, r1, #8
 800b71e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b722:	0202      	lsls	r2, r0, #8
 800b724:	6979      	ldr	r1, [r7, #20]
 800b726:	6849      	ldr	r1, [r1, #4]
 800b728:	0849      	lsrs	r1, r1, #1
 800b72a:	2000      	movs	r0, #0
 800b72c:	460c      	mov	r4, r1
 800b72e:	4605      	mov	r5, r0
 800b730:	eb12 0804 	adds.w	r8, r2, r4
 800b734:	eb43 0905 	adc.w	r9, r3, r5
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	469a      	mov	sl, r3
 800b740:	4693      	mov	fp, r2
 800b742:	4652      	mov	r2, sl
 800b744:	465b      	mov	r3, fp
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f5 fa45 	bl	8000bd8 <__aeabi_uldivmod>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4613      	mov	r3, r2
 800b754:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b75c:	d308      	bcc.n	800b770 <UART_SetConfig+0x430>
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b764:	d204      	bcs.n	800b770 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6a3a      	ldr	r2, [r7, #32]
 800b76c:	60da      	str	r2, [r3, #12]
 800b76e:	e0ce      	b.n	800b90e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b776:	e0ca      	b.n	800b90e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b780:	d166      	bne.n	800b850 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b782:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b786:	2b08      	cmp	r3, #8
 800b788:	d827      	bhi.n	800b7da <UART_SetConfig+0x49a>
 800b78a:	a201      	add	r2, pc, #4	@ (adr r2, 800b790 <UART_SetConfig+0x450>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7bd 	.word	0x0800b7bd
 800b798:	0800b7c5 	.word	0x0800b7c5
 800b79c:	0800b7db 	.word	0x0800b7db
 800b7a0:	0800b7cb 	.word	0x0800b7cb
 800b7a4:	0800b7db 	.word	0x0800b7db
 800b7a8:	0800b7db 	.word	0x0800b7db
 800b7ac:	0800b7db 	.word	0x0800b7db
 800b7b0:	0800b7d3 	.word	0x0800b7d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b4:	f7fb f9f8 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 800b7b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7ba:	e014      	b.n	800b7e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7bc:	f7fb fa0a 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 800b7c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7c2:	e010      	b.n	800b7e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7c4:	4b4e      	ldr	r3, [pc, #312]	@ (800b900 <UART_SetConfig+0x5c0>)
 800b7c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7c8:	e00d      	b.n	800b7e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ca:	f7fb f955 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 800b7ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7d0:	e009      	b.n	800b7e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7d8:	e005      	b.n	800b7e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b7e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 8090 	beq.w	800b90e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f2:	4a44      	ldr	r2, [pc, #272]	@ (800b904 <UART_SetConfig+0x5c4>)
 800b7f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b800:	005a      	lsls	r2, r3, #1
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	085b      	lsrs	r3, r3, #1
 800b808:	441a      	add	r2, r3
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b812:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	2b0f      	cmp	r3, #15
 800b818:	d916      	bls.n	800b848 <UART_SetConfig+0x508>
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b820:	d212      	bcs.n	800b848 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	b29b      	uxth	r3, r3
 800b826:	f023 030f 	bic.w	r3, r3, #15
 800b82a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	b29b      	uxth	r3, r3
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	b29a      	uxth	r2, r3
 800b838:	8bfb      	ldrh	r3, [r7, #30]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	8bfa      	ldrh	r2, [r7, #30]
 800b844:	60da      	str	r2, [r3, #12]
 800b846:	e062      	b.n	800b90e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b84e:	e05e      	b.n	800b90e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b850:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b854:	2b08      	cmp	r3, #8
 800b856:	d828      	bhi.n	800b8aa <UART_SetConfig+0x56a>
 800b858:	a201      	add	r2, pc, #4	@ (adr r2, 800b860 <UART_SetConfig+0x520>)
 800b85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85e:	bf00      	nop
 800b860:	0800b885 	.word	0x0800b885
 800b864:	0800b88d 	.word	0x0800b88d
 800b868:	0800b895 	.word	0x0800b895
 800b86c:	0800b8ab 	.word	0x0800b8ab
 800b870:	0800b89b 	.word	0x0800b89b
 800b874:	0800b8ab 	.word	0x0800b8ab
 800b878:	0800b8ab 	.word	0x0800b8ab
 800b87c:	0800b8ab 	.word	0x0800b8ab
 800b880:	0800b8a3 	.word	0x0800b8a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b884:	f7fb f990 	bl	8006ba8 <HAL_RCC_GetPCLK1Freq>
 800b888:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b88a:	e014      	b.n	800b8b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b88c:	f7fb f9a2 	bl	8006bd4 <HAL_RCC_GetPCLK2Freq>
 800b890:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b892:	e010      	b.n	800b8b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b894:	4b1a      	ldr	r3, [pc, #104]	@ (800b900 <UART_SetConfig+0x5c0>)
 800b896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b898:	e00d      	b.n	800b8b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b89a:	f7fb f8ed 	bl	8006a78 <HAL_RCC_GetSysClockFreq>
 800b89e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8a0:	e009      	b.n	800b8b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8a8:	e005      	b.n	800b8b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b8b4:	bf00      	nop
    }

    if (pclk != 0U)
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d028      	beq.n	800b90e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c0:	4a10      	ldr	r2, [pc, #64]	@ (800b904 <UART_SetConfig+0x5c4>)
 800b8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	085b      	lsrs	r3, r3, #1
 800b8d4:	441a      	add	r2, r3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	2b0f      	cmp	r3, #15
 800b8e4:	d910      	bls.n	800b908 <UART_SetConfig+0x5c8>
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8ec:	d20c      	bcs.n	800b908 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60da      	str	r2, [r3, #12]
 800b8f8:	e009      	b.n	800b90e <UART_SetConfig+0x5ce>
 800b8fa:	bf00      	nop
 800b8fc:	40008000 	.word	0x40008000
 800b900:	00f42400 	.word	0x00f42400
 800b904:	0800ff90 	.word	0x0800ff90
      }
      else
      {
        ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2201      	movs	r2, #1
 800b912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2201      	movs	r2, #1
 800b91a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2200      	movs	r2, #0
 800b922:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2200      	movs	r2, #0
 800b928:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b92a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3730      	adds	r7, #48	@ 0x30
 800b932:	46bd      	mov	sp, r7
 800b934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b944:	f003 0308 	and.w	r3, r3, #8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	430a      	orrs	r2, r1
 800b960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b988:	f003 0302 	and.w	r3, r3, #2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9cc:	f003 0310 	and.w	r3, r3, #16
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00a      	beq.n	800b9ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d01a      	beq.n	800ba4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba36:	d10a      	bne.n	800ba4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00a      	beq.n	800ba70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	605a      	str	r2, [r3, #4]
  }
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b098      	sub	sp, #96	@ 0x60
 800ba80:	af02      	add	r7, sp, #8
 800ba82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba8c:	f7f7 ffae 	bl	80039ec <HAL_GetTick>
 800ba90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b08      	cmp	r3, #8
 800ba9e:	d12f      	bne.n	800bb00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baa8:	2200      	movs	r2, #0
 800baaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f88e 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d022      	beq.n	800bb00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bace:	653b      	str	r3, [r7, #80]	@ 0x50
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bad8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bada:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e6      	bne.n	800baba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e063      	b.n	800bbc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0304 	and.w	r3, r3, #4
 800bb0a:	2b04      	cmp	r3, #4
 800bb0c:	d149      	bne.n	800bba2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb16:	2200      	movs	r2, #0
 800bb18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f857 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d03c      	beq.n	800bba2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	623b      	str	r3, [r7, #32]
   return(result);
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb46:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e6      	bne.n	800bb28 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3308      	adds	r3, #8
 800bb78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb7a:	61fa      	str	r2, [r7, #28]
 800bb7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7e:	69b9      	ldr	r1, [r7, #24]
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	e841 2300 	strex	r3, r2, [r1]
 800bb86:	617b      	str	r3, [r7, #20]
   return(result);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e5      	bne.n	800bb5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e012      	b.n	800bbc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2220      	movs	r2, #32
 800bbae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3758      	adds	r7, #88	@ 0x58
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbe0:	e049      	b.n	800bc76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe8:	d045      	beq.n	800bc76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbea:	f7f7 feff 	bl	80039ec <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	69ba      	ldr	r2, [r7, #24]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e048      	b.n	800bc96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0304 	and.w	r3, r3, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d031      	beq.n	800bc76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	f003 0308 	and.w	r3, r3, #8
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d110      	bne.n	800bc42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2208      	movs	r2, #8
 800bc26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f95b 	bl	800bee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2208      	movs	r2, #8
 800bc32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e029      	b.n	800bc96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc50:	d111      	bne.n	800bc76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f941 	bl	800bee4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2220      	movs	r2, #32
 800bc66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e00f      	b.n	800bc96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69da      	ldr	r2, [r3, #28]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	4013      	ands	r3, r2
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	bf0c      	ite	eq
 800bc86:	2301      	moveq	r3, #1
 800bc88:	2300      	movne	r3, #0
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d0a6      	beq.n	800bbe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b0a3      	sub	sp, #140	@ 0x8c
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	88fa      	ldrh	r2, [r7, #6]
 800bcb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcd2:	d10e      	bne.n	800bcf2 <UART_Start_Receive_IT+0x52>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <UART_Start_Receive_IT+0x48>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bce2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bce6:	e02d      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	22ff      	movs	r2, #255	@ 0xff
 800bcec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bcf0:	e028      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10d      	bne.n	800bd16 <UART_Start_Receive_IT+0x76>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d104      	bne.n	800bd0c <UART_Start_Receive_IT+0x6c>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	22ff      	movs	r2, #255	@ 0xff
 800bd06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd0a:	e01b      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	227f      	movs	r2, #127	@ 0x7f
 800bd10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd14:	e016      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd1e:	d10d      	bne.n	800bd3c <UART_Start_Receive_IT+0x9c>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <UART_Start_Receive_IT+0x92>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	227f      	movs	r2, #127	@ 0x7f
 800bd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd30:	e008      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	223f      	movs	r2, #63	@ 0x3f
 800bd36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd3a:	e003      	b.n	800bd44 <UART_Start_Receive_IT+0xa4>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2222      	movs	r2, #34	@ 0x22
 800bd50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bd64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bd78:	673a      	str	r2, [r7, #112]	@ 0x70
 800bd7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd7e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bd80:	e841 2300 	strex	r3, r2, [r1]
 800bd84:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bd86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1e3      	bne.n	800bd54 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd94:	d14f      	bne.n	800be36 <UART_Start_Receive_IT+0x196>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bd9c:	88fa      	ldrh	r2, [r7, #6]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d349      	bcc.n	800be36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdaa:	d107      	bne.n	800bdbc <UART_Start_Receive_IT+0x11c>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d103      	bne.n	800bdbc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	4a47      	ldr	r2, [pc, #284]	@ (800bed4 <UART_Start_Receive_IT+0x234>)
 800bdb8:	675a      	str	r2, [r3, #116]	@ 0x74
 800bdba:	e002      	b.n	800bdc2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a46      	ldr	r2, [pc, #280]	@ (800bed8 <UART_Start_Receive_IT+0x238>)
 800bdc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01a      	beq.n	800be00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd2:	e853 3f00 	ldrex	r3, [r3]
 800bdd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bdd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bdec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bdf2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bdf4:	e841 2300 	strex	r3, r2, [r1]
 800bdf8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bdfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e4      	bne.n	800bdca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3308      	adds	r3, #8
 800be06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be0a:	e853 3f00 	ldrex	r3, [r3]
 800be0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3308      	adds	r3, #8
 800be1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800be20:	64ba      	str	r2, [r7, #72]	@ 0x48
 800be22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e5      	bne.n	800be00 <UART_Start_Receive_IT+0x160>
 800be34:	e046      	b.n	800bec4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be3e:	d107      	bne.n	800be50 <UART_Start_Receive_IT+0x1b0>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4a24      	ldr	r2, [pc, #144]	@ (800bedc <UART_Start_Receive_IT+0x23c>)
 800be4c:	675a      	str	r2, [r3, #116]	@ 0x74
 800be4e:	e002      	b.n	800be56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a23      	ldr	r2, [pc, #140]	@ (800bee0 <UART_Start_Receive_IT+0x240>)
 800be54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d019      	beq.n	800be92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	e853 3f00 	ldrex	r3, [r3]
 800be6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800be72:	677b      	str	r3, [r7, #116]	@ 0x74
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	461a      	mov	r2, r3
 800be7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be84:	e841 2300 	strex	r3, r2, [r1]
 800be88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e6      	bne.n	800be5e <UART_Start_Receive_IT+0x1be>
 800be90:	e018      	b.n	800bec4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	e853 3f00 	ldrex	r3, [r3]
 800be9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f043 0320 	orr.w	r3, r3, #32
 800bea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	461a      	mov	r2, r3
 800beae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800beb0:	623b      	str	r3, [r7, #32]
 800beb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	69f9      	ldr	r1, [r7, #28]
 800beb6:	6a3a      	ldr	r2, [r7, #32]
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e6      	bne.n	800be92 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	378c      	adds	r7, #140	@ 0x8c
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	0800c711 	.word	0x0800c711
 800bed8:	0800c3ad 	.word	0x0800c3ad
 800bedc:	0800c1f1 	.word	0x0800c1f1
 800bee0:	0800c035 	.word	0x0800c035

0800bee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b095      	sub	sp, #84	@ 0x54
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e6      	bne.n	800beec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e3      	bne.n	800bf1e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d118      	bne.n	800bf90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f023 0310 	bic.w	r3, r3, #16
 800bf72:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf7c:	61bb      	str	r3, [r7, #24]
 800bf7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf80:	6979      	ldr	r1, [r7, #20]
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	e841 2300 	strex	r3, r2, [r1]
 800bf88:	613b      	str	r3, [r7, #16]
   return(result);
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1e6      	bne.n	800bf5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bfa4:	bf00      	nop
 800bfa6:	3754      	adds	r7, #84	@ 0x54
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7ff f9a0 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	e853 3f00 	ldrex	r3, [r3]
 800bff0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bff8:	61fb      	str	r3, [r7, #28]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	61bb      	str	r3, [r7, #24]
 800c004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	6979      	ldr	r1, [r7, #20]
 800c008:	69ba      	ldr	r2, [r7, #24]
 800c00a:	e841 2300 	strex	r3, r2, [r1]
 800c00e:	613b      	str	r3, [r7, #16]
   return(result);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1e6      	bne.n	800bfe4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2220      	movs	r2, #32
 800c01a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff f96b 	bl	800b300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c02a:	bf00      	nop
 800c02c:	3720      	adds	r7, #32
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b09c      	sub	sp, #112	@ 0x70
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c042:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c04c:	2b22      	cmp	r3, #34	@ 0x22
 800c04e:	f040 80be 	bne.w	800c1ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c058:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c05c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c060:	b2d9      	uxtb	r1, r3
 800c062:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c066:	b2da      	uxtb	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c06c:	400a      	ands	r2, r1
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c082:	b29b      	uxth	r3, r3
 800c084:	3b01      	subs	r3, #1
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	f040 80a3 	bne.w	800c1e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e6      	bne.n	800c09c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3308      	adds	r3, #8
 800c0d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e0:	f023 0301 	bic.w	r3, r3, #1
 800c0e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e5      	bne.n	800c0ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a34      	ldr	r2, [pc, #208]	@ (800c1ec <UART_RxISR_8BIT+0x1b8>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d01f      	beq.n	800c160 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d018      	beq.n	800c160 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	e853 3f00 	ldrex	r3, [r3]
 800c13a:	623b      	str	r3, [r7, #32]
   return(result);
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c142:	663b      	str	r3, [r7, #96]	@ 0x60
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c14c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c14e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c150:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c154:	e841 2300 	strex	r3, r2, [r1]
 800c158:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1e6      	bne.n	800c12e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c164:	2b01      	cmp	r3, #1
 800c166:	d12e      	bne.n	800c1c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	e853 3f00 	ldrex	r3, [r3]
 800c17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f023 0310 	bic.w	r3, r3, #16
 800c182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	461a      	mov	r2, r3
 800c18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c18c:	61fb      	str	r3, [r7, #28]
 800c18e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	e841 2300 	strex	r3, r2, [r1]
 800c198:	617b      	str	r3, [r7, #20]
   return(result);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e6      	bne.n	800c16e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	f003 0310 	and.w	r3, r3, #16
 800c1aa:	2b10      	cmp	r3, #16
 800c1ac:	d103      	bne.n	800c1b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff f8b2 	bl	800b328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1c4:	e00d      	b.n	800c1e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7f5 fba0 	bl	800190c <HAL_UART_RxCpltCallback>
}
 800c1cc:	e009      	b.n	800c1e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	8b1b      	ldrh	r3, [r3, #24]
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0208 	orr.w	r2, r2, #8
 800c1de:	b292      	uxth	r2, r2
 800c1e0:	831a      	strh	r2, [r3, #24]
}
 800c1e2:	bf00      	nop
 800c1e4:	3770      	adds	r7, #112	@ 0x70
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	40008000 	.word	0x40008000

0800c1f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b09c      	sub	sp, #112	@ 0x70
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c1fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c208:	2b22      	cmp	r3, #34	@ 0x22
 800c20a:	f040 80be 	bne.w	800c38a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c21c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c21e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c226:	4013      	ands	r3, r2
 800c228:	b29a      	uxth	r2, r3
 800c22a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c22c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c232:	1c9a      	adds	r2, r3, #2
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c23e:	b29b      	uxth	r3, r3
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c250:	b29b      	uxth	r3, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	f040 80a3 	bne.w	800c39e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c26c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c276:	657b      	str	r3, [r7, #84]	@ 0x54
 800c278:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c27c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e6      	bne.n	800c258 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	f023 0301 	bic.w	r3, r3, #1
 800c2a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800c2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2b2:	e841 2300 	strex	r3, r2, [r1]
 800c2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1e5      	bne.n	800c28a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a34      	ldr	r2, [pc, #208]	@ (800c3a8 <UART_RxISR_16BIT+0x1b8>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d01f      	beq.n	800c31c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d018      	beq.n	800c31c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	e853 3f00 	ldrex	r3, [r3]
 800c2f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c30a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1e6      	bne.n	800c2ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c320:	2b01      	cmp	r3, #1
 800c322:	d12e      	bne.n	800c382 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	60bb      	str	r3, [r7, #8]
   return(result);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f023 0310 	bic.w	r3, r3, #16
 800c33e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c348:	61bb      	str	r3, [r7, #24]
 800c34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34c:	6979      	ldr	r1, [r7, #20]
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	613b      	str	r3, [r7, #16]
   return(result);
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e6      	bne.n	800c32a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	f003 0310 	and.w	r3, r3, #16
 800c366:	2b10      	cmp	r3, #16
 800c368:	d103      	bne.n	800c372 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2210      	movs	r2, #16
 800c370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7fe ffd4 	bl	800b328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c380:	e00d      	b.n	800c39e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7f5 fac2 	bl	800190c <HAL_UART_RxCpltCallback>
}
 800c388:	e009      	b.n	800c39e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	8b1b      	ldrh	r3, [r3, #24]
 800c390:	b29a      	uxth	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f042 0208 	orr.w	r2, r2, #8
 800c39a:	b292      	uxth	r2, r2
 800c39c:	831a      	strh	r2, [r3, #24]
}
 800c39e:	bf00      	nop
 800c3a0:	3770      	adds	r7, #112	@ 0x70
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	40008000 	.word	0x40008000

0800c3ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b0ac      	sub	sp, #176	@ 0xb0
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c3ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3e2:	2b22      	cmp	r3, #34	@ 0x22
 800c3e4:	f040 8182 	bne.w	800c6ec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c3ee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3f2:	e125      	b.n	800c640 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c3fa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c402:	b2d9      	uxtb	r1, r3
 800c404:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c40e:	400a      	ands	r2, r1
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c418:	1c5a      	adds	r2, r3, #1
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c424:	b29b      	uxth	r3, r3
 800c426:	3b01      	subs	r3, #1
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	69db      	ldr	r3, [r3, #28]
 800c436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c43a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c43e:	f003 0307 	and.w	r3, r3, #7
 800c442:	2b00      	cmp	r3, #0
 800c444:	d053      	beq.n	800c4ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d011      	beq.n	800c476 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00b      	beq.n	800c476 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2201      	movs	r2, #1
 800c464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c46c:	f043 0201 	orr.w	r2, r3, #1
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d011      	beq.n	800c4a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00b      	beq.n	800c4a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2202      	movs	r2, #2
 800c494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49c:	f043 0204 	orr.w	r2, r3, #4
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d011      	beq.n	800c4d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c4b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00b      	beq.n	800c4d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2204      	movs	r2, #4
 800c4c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4cc:	f043 0202 	orr.w	r2, r3, #2
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7fe ff17 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f040 80a2 	bne.w	800c640 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c50a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c50c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c51e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c520:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c524:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c52c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e4      	bne.n	800c4fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c548:	f023 0301 	bic.w	r3, r3, #1
 800c54c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c55a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c55c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c560:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e1      	bne.n	800c532 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2220      	movs	r2, #32
 800c572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a60      	ldr	r2, [pc, #384]	@ (800c708 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d021      	beq.n	800c5d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01a      	beq.n	800c5d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c5bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5be:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c5c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c5ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e4      	bne.n	800c59a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d130      	bne.n	800c63a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ee:	f023 0310 	bic.w	r3, r3, #16
 800c5f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c600:	643b      	str	r3, [r7, #64]	@ 0x40
 800c602:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e4      	bne.n	800c5de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	f003 0310 	and.w	r3, r3, #16
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d103      	bne.n	800c62a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2210      	movs	r2, #16
 800c628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fe fe78 	bl	800b328 <HAL_UARTEx_RxEventCallback>
 800c638:	e002      	b.n	800c640 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7f5 f966 	bl	800190c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c640:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b00      	cmp	r3, #0
 800c652:	f47f aecf 	bne.w	800c3f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c65c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c664:	2b00      	cmp	r3, #0
 800c666:	d04b      	beq.n	800c700 <UART_RxISR_8BIT_FIFOEN+0x354>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c66e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c672:	429a      	cmp	r2, r3
 800c674:	d244      	bcs.n	800c700 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	61fb      	str	r3, [r7, #28]
   return(result);
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c68c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c69a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c69c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e3      	bne.n	800c676 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a16      	ldr	r2, [pc, #88]	@ (800c70c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c6b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f043 0320 	orr.w	r3, r3, #32
 800c6c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6da:	6979      	ldr	r1, [r7, #20]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e4      	bne.n	800c6b4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6ea:	e009      	b.n	800c700 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	8b1b      	ldrh	r3, [r3, #24]
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0208 	orr.w	r2, r2, #8
 800c6fc:	b292      	uxth	r2, r2
 800c6fe:	831a      	strh	r2, [r3, #24]
}
 800c700:	bf00      	nop
 800c702:	37b0      	adds	r7, #176	@ 0xb0
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	40008000 	.word	0x40008000
 800c70c:	0800c035 	.word	0x0800c035

0800c710 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b0ae      	sub	sp, #184	@ 0xb8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c71e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c746:	2b22      	cmp	r3, #34	@ 0x22
 800c748:	f040 8186 	bne.w	800ca58 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c752:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c756:	e129      	b.n	800c9ac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c75e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c76a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c76e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c772:	4013      	ands	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c77a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c780:	1c9a      	adds	r2, r3, #2
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d053      	beq.n	800c856 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d011      	beq.n	800c7de <UART_RxISR_16BIT_FIFOEN+0xce>
 800c7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7d4:	f043 0201 	orr.w	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d011      	beq.n	800c80e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c7ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00b      	beq.n	800c80e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c804:	f043 0204 	orr.w	r2, r3, #4
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c812:	f003 0304 	and.w	r3, r3, #4
 800c816:	2b00      	cmp	r3, #0
 800c818:	d011      	beq.n	800c83e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c81a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00b      	beq.n	800c83e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2204      	movs	r2, #4
 800c82c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c834:	f043 0202 	orr.w	r2, r3, #2
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c844:	2b00      	cmp	r3, #0
 800c846:	d006      	beq.n	800c856 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fe fd63 	bl	800b314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 80a4 	bne.w	800c9ac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c88a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c88e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c898:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e2      	bne.n	800c864 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8b4:	f023 0301 	bic.w	r3, r3, #1
 800c8b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c8c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8ce:	e841 2300 	strex	r3, r2, [r1]
 800c8d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1e1      	bne.n	800c89e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a60      	ldr	r2, [pc, #384]	@ (800ca74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d021      	beq.n	800c93c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d01a      	beq.n	800c93c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c91a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c928:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c92a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c92e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c930:	e841 2300 	strex	r3, r2, [r1]
 800c934:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1e4      	bne.n	800c906 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c940:	2b01      	cmp	r3, #1
 800c942:	d130      	bne.n	800c9a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	e853 3f00 	ldrex	r3, [r3]
 800c956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c95a:	f023 0310 	bic.w	r3, r3, #16
 800c95e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c96c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c96e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c970:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c974:	e841 2300 	strex	r3, r2, [r1]
 800c978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e4      	bne.n	800c94a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	69db      	ldr	r3, [r3, #28]
 800c986:	f003 0310 	and.w	r3, r3, #16
 800c98a:	2b10      	cmp	r3, #16
 800c98c:	d103      	bne.n	800c996 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2210      	movs	r2, #16
 800c994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7fe fcc2 	bl	800b328 <HAL_UARTEx_RxEventCallback>
 800c9a4:	e002      	b.n	800c9ac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7f4 ffb0 	bl	800190c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d006      	beq.n	800c9c2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c9b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9b8:	f003 0320 	and.w	r3, r3, #32
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f47f aecb 	bne.w	800c758 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9c8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d04b      	beq.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x35c>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9da:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d244      	bcs.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3308      	adds	r3, #8
 800ca02:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ca06:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca0e:	e841 2300 	strex	r3, r2, [r1]
 800ca12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1e3      	bne.n	800c9e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a16      	ldr	r2, [pc, #88]	@ (800ca78 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ca1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	e853 3f00 	ldrex	r3, [r3]
 800ca2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f043 0320 	orr.w	r3, r3, #32
 800ca34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca46:	69b9      	ldr	r1, [r7, #24]
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	e841 2300 	strex	r3, r2, [r1]
 800ca4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1e4      	bne.n	800ca20 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca56:	e009      	b.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	8b1b      	ldrh	r3, [r3, #24]
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f042 0208 	orr.w	r2, r2, #8
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	831a      	strh	r2, [r3, #24]
}
 800ca6c:	bf00      	nop
 800ca6e:	37b8      	adds	r7, #184	@ 0xb8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	40008000 	.word	0x40008000
 800ca78:	0800c1f1 	.word	0x0800c1f1

0800ca7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d101      	bne.n	800cace <HAL_UARTEx_DisableFifoMode+0x16>
 800caca:	2302      	movs	r3, #2
 800cacc:	e027      	b.n	800cb1e <HAL_UARTEx_DisableFifoMode+0x66>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2224      	movs	r2, #36	@ 0x24
 800cada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f022 0201 	bic.w	r2, r2, #1
 800caf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cafc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2220      	movs	r2, #32
 800cb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d101      	bne.n	800cb42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e02d      	b.n	800cb9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2224      	movs	r2, #36	@ 0x24
 800cb4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 0201 	bic.w	r2, r2, #1
 800cb68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f850 	bl	800cc24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d101      	bne.n	800cbbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbba:	2302      	movs	r3, #2
 800cbbc:	e02d      	b.n	800cc1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2224      	movs	r2, #36	@ 0x24
 800cbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f022 0201 	bic.w	r2, r2, #1
 800cbe4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f812 	bl	800cc24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2220      	movs	r2, #32
 800cc0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d108      	bne.n	800cc46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc44:	e031      	b.n	800ccaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc46:	2308      	movs	r3, #8
 800cc48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	0e5b      	lsrs	r3, r3, #25
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 0307 	and.w	r3, r3, #7
 800cc5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	0f5b      	lsrs	r3, r3, #29
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0307 	and.w	r3, r3, #7
 800cc6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	7b3a      	ldrb	r2, [r7, #12]
 800cc72:	4911      	ldr	r1, [pc, #68]	@ (800ccb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cc74:	5c8a      	ldrb	r2, [r1, r2]
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc7a:	7b3a      	ldrb	r2, [r7, #12]
 800cc7c:	490f      	ldr	r1, [pc, #60]	@ (800ccbc <UARTEx_SetNbDataToProcess+0x98>)
 800cc7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc80:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	7b7a      	ldrb	r2, [r7, #13]
 800cc90:	4909      	ldr	r1, [pc, #36]	@ (800ccb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cc92:	5c8a      	ldrb	r2, [r1, r2]
 800cc94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc98:	7b7a      	ldrb	r2, [r7, #13]
 800cc9a:	4908      	ldr	r1, [pc, #32]	@ (800ccbc <UARTEx_SetNbDataToProcess+0x98>)
 800cc9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	0800ffa8 	.word	0x0800ffa8
 800ccbc:	0800ffb0 	.word	0x0800ffb0

0800ccc0 <atoi>:
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	f000 b87a 	b.w	800cdbc <strtol>

0800ccc8 <_strtol_l.constprop.0>:
 800ccc8:	2b24      	cmp	r3, #36	@ 0x24
 800ccca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccce:	4686      	mov	lr, r0
 800ccd0:	4690      	mov	r8, r2
 800ccd2:	d801      	bhi.n	800ccd8 <_strtol_l.constprop.0+0x10>
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d106      	bne.n	800cce6 <_strtol_l.constprop.0+0x1e>
 800ccd8:	f000 ff36 	bl	800db48 <__errno>
 800ccdc:	2316      	movs	r3, #22
 800ccde:	6003      	str	r3, [r0, #0]
 800cce0:	2000      	movs	r0, #0
 800cce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce6:	4834      	ldr	r0, [pc, #208]	@ (800cdb8 <_strtol_l.constprop.0+0xf0>)
 800cce8:	460d      	mov	r5, r1
 800ccea:	462a      	mov	r2, r5
 800ccec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccf0:	5d06      	ldrb	r6, [r0, r4]
 800ccf2:	f016 0608 	ands.w	r6, r6, #8
 800ccf6:	d1f8      	bne.n	800ccea <_strtol_l.constprop.0+0x22>
 800ccf8:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccfa:	d12d      	bne.n	800cd58 <_strtol_l.constprop.0+0x90>
 800ccfc:	782c      	ldrb	r4, [r5, #0]
 800ccfe:	2601      	movs	r6, #1
 800cd00:	1c95      	adds	r5, r2, #2
 800cd02:	f033 0210 	bics.w	r2, r3, #16
 800cd06:	d109      	bne.n	800cd1c <_strtol_l.constprop.0+0x54>
 800cd08:	2c30      	cmp	r4, #48	@ 0x30
 800cd0a:	d12a      	bne.n	800cd62 <_strtol_l.constprop.0+0x9a>
 800cd0c:	782a      	ldrb	r2, [r5, #0]
 800cd0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd12:	2a58      	cmp	r2, #88	@ 0x58
 800cd14:	d125      	bne.n	800cd62 <_strtol_l.constprop.0+0x9a>
 800cd16:	786c      	ldrb	r4, [r5, #1]
 800cd18:	2310      	movs	r3, #16
 800cd1a:	3502      	adds	r5, #2
 800cd1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd20:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd24:	2200      	movs	r2, #0
 800cd26:	fbbc f9f3 	udiv	r9, ip, r3
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd34:	2f09      	cmp	r7, #9
 800cd36:	d81b      	bhi.n	800cd70 <_strtol_l.constprop.0+0xa8>
 800cd38:	463c      	mov	r4, r7
 800cd3a:	42a3      	cmp	r3, r4
 800cd3c:	dd27      	ble.n	800cd8e <_strtol_l.constprop.0+0xc6>
 800cd3e:	1c57      	adds	r7, r2, #1
 800cd40:	d007      	beq.n	800cd52 <_strtol_l.constprop.0+0x8a>
 800cd42:	4581      	cmp	r9, r0
 800cd44:	d320      	bcc.n	800cd88 <_strtol_l.constprop.0+0xc0>
 800cd46:	d101      	bne.n	800cd4c <_strtol_l.constprop.0+0x84>
 800cd48:	45a2      	cmp	sl, r4
 800cd4a:	db1d      	blt.n	800cd88 <_strtol_l.constprop.0+0xc0>
 800cd4c:	fb00 4003 	mla	r0, r0, r3, r4
 800cd50:	2201      	movs	r2, #1
 800cd52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd56:	e7eb      	b.n	800cd30 <_strtol_l.constprop.0+0x68>
 800cd58:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd5a:	bf04      	itt	eq
 800cd5c:	782c      	ldrbeq	r4, [r5, #0]
 800cd5e:	1c95      	addeq	r5, r2, #2
 800cd60:	e7cf      	b.n	800cd02 <_strtol_l.constprop.0+0x3a>
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1da      	bne.n	800cd1c <_strtol_l.constprop.0+0x54>
 800cd66:	2c30      	cmp	r4, #48	@ 0x30
 800cd68:	bf0c      	ite	eq
 800cd6a:	2308      	moveq	r3, #8
 800cd6c:	230a      	movne	r3, #10
 800cd6e:	e7d5      	b.n	800cd1c <_strtol_l.constprop.0+0x54>
 800cd70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd74:	2f19      	cmp	r7, #25
 800cd76:	d801      	bhi.n	800cd7c <_strtol_l.constprop.0+0xb4>
 800cd78:	3c37      	subs	r4, #55	@ 0x37
 800cd7a:	e7de      	b.n	800cd3a <_strtol_l.constprop.0+0x72>
 800cd7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd80:	2f19      	cmp	r7, #25
 800cd82:	d804      	bhi.n	800cd8e <_strtol_l.constprop.0+0xc6>
 800cd84:	3c57      	subs	r4, #87	@ 0x57
 800cd86:	e7d8      	b.n	800cd3a <_strtol_l.constprop.0+0x72>
 800cd88:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8c:	e7e1      	b.n	800cd52 <_strtol_l.constprop.0+0x8a>
 800cd8e:	1c53      	adds	r3, r2, #1
 800cd90:	d108      	bne.n	800cda4 <_strtol_l.constprop.0+0xdc>
 800cd92:	2322      	movs	r3, #34	@ 0x22
 800cd94:	f8ce 3000 	str.w	r3, [lr]
 800cd98:	4660      	mov	r0, ip
 800cd9a:	f1b8 0f00 	cmp.w	r8, #0
 800cd9e:	d0a0      	beq.n	800cce2 <_strtol_l.constprop.0+0x1a>
 800cda0:	1e69      	subs	r1, r5, #1
 800cda2:	e006      	b.n	800cdb2 <_strtol_l.constprop.0+0xea>
 800cda4:	b106      	cbz	r6, 800cda8 <_strtol_l.constprop.0+0xe0>
 800cda6:	4240      	negs	r0, r0
 800cda8:	f1b8 0f00 	cmp.w	r8, #0
 800cdac:	d099      	beq.n	800cce2 <_strtol_l.constprop.0+0x1a>
 800cdae:	2a00      	cmp	r2, #0
 800cdb0:	d1f6      	bne.n	800cda0 <_strtol_l.constprop.0+0xd8>
 800cdb2:	f8c8 1000 	str.w	r1, [r8]
 800cdb6:	e794      	b.n	800cce2 <_strtol_l.constprop.0+0x1a>
 800cdb8:	0800ffb9 	.word	0x0800ffb9

0800cdbc <strtol>:
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	4802      	ldr	r0, [pc, #8]	@ (800cdcc <strtol+0x10>)
 800cdc4:	6800      	ldr	r0, [r0, #0]
 800cdc6:	f7ff bf7f 	b.w	800ccc8 <_strtol_l.constprop.0>
 800cdca:	bf00      	nop
 800cdcc:	20000080 	.word	0x20000080

0800cdd0 <__cvt>:
 800cdd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd4:	ec57 6b10 	vmov	r6, r7, d0
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	460c      	mov	r4, r1
 800cddc:	4619      	mov	r1, r3
 800cdde:	463b      	mov	r3, r7
 800cde0:	bfbb      	ittet	lt
 800cde2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cde6:	461f      	movlt	r7, r3
 800cde8:	2300      	movge	r3, #0
 800cdea:	232d      	movlt	r3, #45	@ 0x2d
 800cdec:	700b      	strb	r3, [r1, #0]
 800cdee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdf0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cdf4:	4691      	mov	r9, r2
 800cdf6:	f023 0820 	bic.w	r8, r3, #32
 800cdfa:	bfbc      	itt	lt
 800cdfc:	4632      	movlt	r2, r6
 800cdfe:	4616      	movlt	r6, r2
 800ce00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce04:	d005      	beq.n	800ce12 <__cvt+0x42>
 800ce06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ce0a:	d100      	bne.n	800ce0e <__cvt+0x3e>
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	2102      	movs	r1, #2
 800ce10:	e000      	b.n	800ce14 <__cvt+0x44>
 800ce12:	2103      	movs	r1, #3
 800ce14:	ab03      	add	r3, sp, #12
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	ab02      	add	r3, sp, #8
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	ec47 6b10 	vmov	d0, r6, r7
 800ce20:	4653      	mov	r3, sl
 800ce22:	4622      	mov	r2, r4
 800ce24:	f000 ff50 	bl	800dcc8 <_dtoa_r>
 800ce28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	d119      	bne.n	800ce64 <__cvt+0x94>
 800ce30:	f019 0f01 	tst.w	r9, #1
 800ce34:	d00e      	beq.n	800ce54 <__cvt+0x84>
 800ce36:	eb00 0904 	add.w	r9, r0, r4
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4630      	mov	r0, r6
 800ce40:	4639      	mov	r1, r7
 800ce42:	f7f3 fe59 	bl	8000af8 <__aeabi_dcmpeq>
 800ce46:	b108      	cbz	r0, 800ce4c <__cvt+0x7c>
 800ce48:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce4c:	2230      	movs	r2, #48	@ 0x30
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	454b      	cmp	r3, r9
 800ce52:	d31e      	bcc.n	800ce92 <__cvt+0xc2>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce58:	1b5b      	subs	r3, r3, r5
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	b004      	add	sp, #16
 800ce60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce68:	eb00 0904 	add.w	r9, r0, r4
 800ce6c:	d1e5      	bne.n	800ce3a <__cvt+0x6a>
 800ce6e:	7803      	ldrb	r3, [r0, #0]
 800ce70:	2b30      	cmp	r3, #48	@ 0x30
 800ce72:	d10a      	bne.n	800ce8a <__cvt+0xba>
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	4630      	mov	r0, r6
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	f7f3 fe3c 	bl	8000af8 <__aeabi_dcmpeq>
 800ce80:	b918      	cbnz	r0, 800ce8a <__cvt+0xba>
 800ce82:	f1c4 0401 	rsb	r4, r4, #1
 800ce86:	f8ca 4000 	str.w	r4, [sl]
 800ce8a:	f8da 3000 	ldr.w	r3, [sl]
 800ce8e:	4499      	add	r9, r3
 800ce90:	e7d3      	b.n	800ce3a <__cvt+0x6a>
 800ce92:	1c59      	adds	r1, r3, #1
 800ce94:	9103      	str	r1, [sp, #12]
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	e7d9      	b.n	800ce4e <__cvt+0x7e>

0800ce9a <__exponent>:
 800ce9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	bfba      	itte	lt
 800cea0:	4249      	neglt	r1, r1
 800cea2:	232d      	movlt	r3, #45	@ 0x2d
 800cea4:	232b      	movge	r3, #43	@ 0x2b
 800cea6:	2909      	cmp	r1, #9
 800cea8:	7002      	strb	r2, [r0, #0]
 800ceaa:	7043      	strb	r3, [r0, #1]
 800ceac:	dd29      	ble.n	800cf02 <__exponent+0x68>
 800ceae:	f10d 0307 	add.w	r3, sp, #7
 800ceb2:	461d      	mov	r5, r3
 800ceb4:	270a      	movs	r7, #10
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	fbb1 f6f7 	udiv	r6, r1, r7
 800cebc:	fb07 1416 	mls	r4, r7, r6, r1
 800cec0:	3430      	adds	r4, #48	@ 0x30
 800cec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cec6:	460c      	mov	r4, r1
 800cec8:	2c63      	cmp	r4, #99	@ 0x63
 800ceca:	f103 33ff 	add.w	r3, r3, #4294967295
 800cece:	4631      	mov	r1, r6
 800ced0:	dcf1      	bgt.n	800ceb6 <__exponent+0x1c>
 800ced2:	3130      	adds	r1, #48	@ 0x30
 800ced4:	1e94      	subs	r4, r2, #2
 800ced6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ceda:	1c41      	adds	r1, r0, #1
 800cedc:	4623      	mov	r3, r4
 800cede:	42ab      	cmp	r3, r5
 800cee0:	d30a      	bcc.n	800cef8 <__exponent+0x5e>
 800cee2:	f10d 0309 	add.w	r3, sp, #9
 800cee6:	1a9b      	subs	r3, r3, r2
 800cee8:	42ac      	cmp	r4, r5
 800ceea:	bf88      	it	hi
 800ceec:	2300      	movhi	r3, #0
 800ceee:	3302      	adds	r3, #2
 800cef0:	4403      	add	r3, r0
 800cef2:	1a18      	subs	r0, r3, r0
 800cef4:	b003      	add	sp, #12
 800cef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cefc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cf00:	e7ed      	b.n	800cede <__exponent+0x44>
 800cf02:	2330      	movs	r3, #48	@ 0x30
 800cf04:	3130      	adds	r1, #48	@ 0x30
 800cf06:	7083      	strb	r3, [r0, #2]
 800cf08:	70c1      	strb	r1, [r0, #3]
 800cf0a:	1d03      	adds	r3, r0, #4
 800cf0c:	e7f1      	b.n	800cef2 <__exponent+0x58>
	...

0800cf10 <_printf_float>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	b08d      	sub	sp, #52	@ 0x34
 800cf16:	460c      	mov	r4, r1
 800cf18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cf1c:	4616      	mov	r6, r2
 800cf1e:	461f      	mov	r7, r3
 800cf20:	4605      	mov	r5, r0
 800cf22:	f000 fdc7 	bl	800dab4 <_localeconv_r>
 800cf26:	6803      	ldr	r3, [r0, #0]
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7f3 f9b8 	bl	80002a0 <strlen>
 800cf30:	2300      	movs	r3, #0
 800cf32:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf34:	f8d8 3000 	ldr.w	r3, [r8]
 800cf38:	9005      	str	r0, [sp, #20]
 800cf3a:	3307      	adds	r3, #7
 800cf3c:	f023 0307 	bic.w	r3, r3, #7
 800cf40:	f103 0208 	add.w	r2, r3, #8
 800cf44:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cf48:	f8d4 b000 	ldr.w	fp, [r4]
 800cf4c:	f8c8 2000 	str.w	r2, [r8]
 800cf50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cf62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf66:	4b9c      	ldr	r3, [pc, #624]	@ (800d1d8 <_printf_float+0x2c8>)
 800cf68:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6c:	f7f3 fdf6 	bl	8000b5c <__aeabi_dcmpun>
 800cf70:	bb70      	cbnz	r0, 800cfd0 <_printf_float+0xc0>
 800cf72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf76:	4b98      	ldr	r3, [pc, #608]	@ (800d1d8 <_printf_float+0x2c8>)
 800cf78:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7c:	f7f3 fdd0 	bl	8000b20 <__aeabi_dcmple>
 800cf80:	bb30      	cbnz	r0, 800cfd0 <_printf_float+0xc0>
 800cf82:	2200      	movs	r2, #0
 800cf84:	2300      	movs	r3, #0
 800cf86:	4640      	mov	r0, r8
 800cf88:	4649      	mov	r1, r9
 800cf8a:	f7f3 fdbf 	bl	8000b0c <__aeabi_dcmplt>
 800cf8e:	b110      	cbz	r0, 800cf96 <_printf_float+0x86>
 800cf90:	232d      	movs	r3, #45	@ 0x2d
 800cf92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf96:	4a91      	ldr	r2, [pc, #580]	@ (800d1dc <_printf_float+0x2cc>)
 800cf98:	4b91      	ldr	r3, [pc, #580]	@ (800d1e0 <_printf_float+0x2d0>)
 800cf9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cf9e:	bf94      	ite	ls
 800cfa0:	4690      	movls	r8, r2
 800cfa2:	4698      	movhi	r8, r3
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	f02b 0304 	bic.w	r3, fp, #4
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	f04f 0900 	mov.w	r9, #0
 800cfb2:	9700      	str	r7, [sp, #0]
 800cfb4:	4633      	mov	r3, r6
 800cfb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f000 f9d2 	bl	800d364 <_printf_common>
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f040 808d 	bne.w	800d0e0 <_printf_float+0x1d0>
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfca:	b00d      	add	sp, #52	@ 0x34
 800cfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	464b      	mov	r3, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	f7f3 fdc0 	bl	8000b5c <__aeabi_dcmpun>
 800cfdc:	b140      	cbz	r0, 800cff0 <_printf_float+0xe0>
 800cfde:	464b      	mov	r3, r9
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bfbc      	itt	lt
 800cfe4:	232d      	movlt	r3, #45	@ 0x2d
 800cfe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cfea:	4a7e      	ldr	r2, [pc, #504]	@ (800d1e4 <_printf_float+0x2d4>)
 800cfec:	4b7e      	ldr	r3, [pc, #504]	@ (800d1e8 <_printf_float+0x2d8>)
 800cfee:	e7d4      	b.n	800cf9a <_printf_float+0x8a>
 800cff0:	6863      	ldr	r3, [r4, #4]
 800cff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cff6:	9206      	str	r2, [sp, #24]
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	d13b      	bne.n	800d074 <_printf_float+0x164>
 800cffc:	2306      	movs	r3, #6
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d004:	2300      	movs	r3, #0
 800d006:	6022      	str	r2, [r4, #0]
 800d008:	9303      	str	r3, [sp, #12]
 800d00a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d00c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d010:	ab09      	add	r3, sp, #36	@ 0x24
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	6861      	ldr	r1, [r4, #4]
 800d016:	ec49 8b10 	vmov	d0, r8, r9
 800d01a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d01e:	4628      	mov	r0, r5
 800d020:	f7ff fed6 	bl	800cdd0 <__cvt>
 800d024:	9b06      	ldr	r3, [sp, #24]
 800d026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d028:	2b47      	cmp	r3, #71	@ 0x47
 800d02a:	4680      	mov	r8, r0
 800d02c:	d129      	bne.n	800d082 <_printf_float+0x172>
 800d02e:	1cc8      	adds	r0, r1, #3
 800d030:	db02      	blt.n	800d038 <_printf_float+0x128>
 800d032:	6863      	ldr	r3, [r4, #4]
 800d034:	4299      	cmp	r1, r3
 800d036:	dd41      	ble.n	800d0bc <_printf_float+0x1ac>
 800d038:	f1aa 0a02 	sub.w	sl, sl, #2
 800d03c:	fa5f fa8a 	uxtb.w	sl, sl
 800d040:	3901      	subs	r1, #1
 800d042:	4652      	mov	r2, sl
 800d044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d048:	9109      	str	r1, [sp, #36]	@ 0x24
 800d04a:	f7ff ff26 	bl	800ce9a <__exponent>
 800d04e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d050:	1813      	adds	r3, r2, r0
 800d052:	2a01      	cmp	r2, #1
 800d054:	4681      	mov	r9, r0
 800d056:	6123      	str	r3, [r4, #16]
 800d058:	dc02      	bgt.n	800d060 <_printf_float+0x150>
 800d05a:	6822      	ldr	r2, [r4, #0]
 800d05c:	07d2      	lsls	r2, r2, #31
 800d05e:	d501      	bpl.n	800d064 <_printf_float+0x154>
 800d060:	3301      	adds	r3, #1
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0a2      	beq.n	800cfb2 <_printf_float+0xa2>
 800d06c:	232d      	movs	r3, #45	@ 0x2d
 800d06e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d072:	e79e      	b.n	800cfb2 <_printf_float+0xa2>
 800d074:	9a06      	ldr	r2, [sp, #24]
 800d076:	2a47      	cmp	r2, #71	@ 0x47
 800d078:	d1c2      	bne.n	800d000 <_printf_float+0xf0>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1c0      	bne.n	800d000 <_printf_float+0xf0>
 800d07e:	2301      	movs	r3, #1
 800d080:	e7bd      	b.n	800cffe <_printf_float+0xee>
 800d082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d086:	d9db      	bls.n	800d040 <_printf_float+0x130>
 800d088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d08c:	d118      	bne.n	800d0c0 <_printf_float+0x1b0>
 800d08e:	2900      	cmp	r1, #0
 800d090:	6863      	ldr	r3, [r4, #4]
 800d092:	dd0b      	ble.n	800d0ac <_printf_float+0x19c>
 800d094:	6121      	str	r1, [r4, #16]
 800d096:	b913      	cbnz	r3, 800d09e <_printf_float+0x18e>
 800d098:	6822      	ldr	r2, [r4, #0]
 800d09a:	07d0      	lsls	r0, r2, #31
 800d09c:	d502      	bpl.n	800d0a4 <_printf_float+0x194>
 800d09e:	3301      	adds	r3, #1
 800d0a0:	440b      	add	r3, r1
 800d0a2:	6123      	str	r3, [r4, #16]
 800d0a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d0a6:	f04f 0900 	mov.w	r9, #0
 800d0aa:	e7db      	b.n	800d064 <_printf_float+0x154>
 800d0ac:	b913      	cbnz	r3, 800d0b4 <_printf_float+0x1a4>
 800d0ae:	6822      	ldr	r2, [r4, #0]
 800d0b0:	07d2      	lsls	r2, r2, #31
 800d0b2:	d501      	bpl.n	800d0b8 <_printf_float+0x1a8>
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	e7f4      	b.n	800d0a2 <_printf_float+0x192>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e7f2      	b.n	800d0a2 <_printf_float+0x192>
 800d0bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c2:	4299      	cmp	r1, r3
 800d0c4:	db05      	blt.n	800d0d2 <_printf_float+0x1c2>
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	6121      	str	r1, [r4, #16]
 800d0ca:	07d8      	lsls	r0, r3, #31
 800d0cc:	d5ea      	bpl.n	800d0a4 <_printf_float+0x194>
 800d0ce:	1c4b      	adds	r3, r1, #1
 800d0d0:	e7e7      	b.n	800d0a2 <_printf_float+0x192>
 800d0d2:	2900      	cmp	r1, #0
 800d0d4:	bfd4      	ite	le
 800d0d6:	f1c1 0202 	rsble	r2, r1, #2
 800d0da:	2201      	movgt	r2, #1
 800d0dc:	4413      	add	r3, r2
 800d0de:	e7e0      	b.n	800d0a2 <_printf_float+0x192>
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	055a      	lsls	r2, r3, #21
 800d0e4:	d407      	bmi.n	800d0f6 <_printf_float+0x1e6>
 800d0e6:	6923      	ldr	r3, [r4, #16]
 800d0e8:	4642      	mov	r2, r8
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	47b8      	blx	r7
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	d12b      	bne.n	800d14c <_printf_float+0x23c>
 800d0f4:	e767      	b.n	800cfc6 <_printf_float+0xb6>
 800d0f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d0fa:	f240 80dd 	bls.w	800d2b8 <_printf_float+0x3a8>
 800d0fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d102:	2200      	movs	r2, #0
 800d104:	2300      	movs	r3, #0
 800d106:	f7f3 fcf7 	bl	8000af8 <__aeabi_dcmpeq>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d033      	beq.n	800d176 <_printf_float+0x266>
 800d10e:	4a37      	ldr	r2, [pc, #220]	@ (800d1ec <_printf_float+0x2dc>)
 800d110:	2301      	movs	r3, #1
 800d112:	4631      	mov	r1, r6
 800d114:	4628      	mov	r0, r5
 800d116:	47b8      	blx	r7
 800d118:	3001      	adds	r0, #1
 800d11a:	f43f af54 	beq.w	800cfc6 <_printf_float+0xb6>
 800d11e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d122:	4543      	cmp	r3, r8
 800d124:	db02      	blt.n	800d12c <_printf_float+0x21c>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	07d8      	lsls	r0, r3, #31
 800d12a:	d50f      	bpl.n	800d14c <_printf_float+0x23c>
 800d12c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d130:	4631      	mov	r1, r6
 800d132:	4628      	mov	r0, r5
 800d134:	47b8      	blx	r7
 800d136:	3001      	adds	r0, #1
 800d138:	f43f af45 	beq.w	800cfc6 <_printf_float+0xb6>
 800d13c:	f04f 0900 	mov.w	r9, #0
 800d140:	f108 38ff 	add.w	r8, r8, #4294967295
 800d144:	f104 0a1a 	add.w	sl, r4, #26
 800d148:	45c8      	cmp	r8, r9
 800d14a:	dc09      	bgt.n	800d160 <_printf_float+0x250>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	079b      	lsls	r3, r3, #30
 800d150:	f100 8103 	bmi.w	800d35a <_printf_float+0x44a>
 800d154:	68e0      	ldr	r0, [r4, #12]
 800d156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d158:	4298      	cmp	r0, r3
 800d15a:	bfb8      	it	lt
 800d15c:	4618      	movlt	r0, r3
 800d15e:	e734      	b.n	800cfca <_printf_float+0xba>
 800d160:	2301      	movs	r3, #1
 800d162:	4652      	mov	r2, sl
 800d164:	4631      	mov	r1, r6
 800d166:	4628      	mov	r0, r5
 800d168:	47b8      	blx	r7
 800d16a:	3001      	adds	r0, #1
 800d16c:	f43f af2b 	beq.w	800cfc6 <_printf_float+0xb6>
 800d170:	f109 0901 	add.w	r9, r9, #1
 800d174:	e7e8      	b.n	800d148 <_printf_float+0x238>
 800d176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dc39      	bgt.n	800d1f0 <_printf_float+0x2e0>
 800d17c:	4a1b      	ldr	r2, [pc, #108]	@ (800d1ec <_printf_float+0x2dc>)
 800d17e:	2301      	movs	r3, #1
 800d180:	4631      	mov	r1, r6
 800d182:	4628      	mov	r0, r5
 800d184:	47b8      	blx	r7
 800d186:	3001      	adds	r0, #1
 800d188:	f43f af1d 	beq.w	800cfc6 <_printf_float+0xb6>
 800d18c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d190:	ea59 0303 	orrs.w	r3, r9, r3
 800d194:	d102      	bne.n	800d19c <_printf_float+0x28c>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	07d9      	lsls	r1, r3, #31
 800d19a:	d5d7      	bpl.n	800d14c <_printf_float+0x23c>
 800d19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1a0:	4631      	mov	r1, r6
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	47b8      	blx	r7
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	f43f af0d 	beq.w	800cfc6 <_printf_float+0xb6>
 800d1ac:	f04f 0a00 	mov.w	sl, #0
 800d1b0:	f104 0b1a 	add.w	fp, r4, #26
 800d1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b6:	425b      	negs	r3, r3
 800d1b8:	4553      	cmp	r3, sl
 800d1ba:	dc01      	bgt.n	800d1c0 <_printf_float+0x2b0>
 800d1bc:	464b      	mov	r3, r9
 800d1be:	e793      	b.n	800d0e8 <_printf_float+0x1d8>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	465a      	mov	r2, fp
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f43f aefb 	beq.w	800cfc6 <_printf_float+0xb6>
 800d1d0:	f10a 0a01 	add.w	sl, sl, #1
 800d1d4:	e7ee      	b.n	800d1b4 <_printf_float+0x2a4>
 800d1d6:	bf00      	nop
 800d1d8:	7fefffff 	.word	0x7fefffff
 800d1dc:	080100b9 	.word	0x080100b9
 800d1e0:	080100bd 	.word	0x080100bd
 800d1e4:	080100c1 	.word	0x080100c1
 800d1e8:	080100c5 	.word	0x080100c5
 800d1ec:	080100c9 	.word	0x080100c9
 800d1f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d1f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1f6:	4553      	cmp	r3, sl
 800d1f8:	bfa8      	it	ge
 800d1fa:	4653      	movge	r3, sl
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	4699      	mov	r9, r3
 800d200:	dc36      	bgt.n	800d270 <_printf_float+0x360>
 800d202:	f04f 0b00 	mov.w	fp, #0
 800d206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d20a:	f104 021a 	add.w	r2, r4, #26
 800d20e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d210:	9306      	str	r3, [sp, #24]
 800d212:	eba3 0309 	sub.w	r3, r3, r9
 800d216:	455b      	cmp	r3, fp
 800d218:	dc31      	bgt.n	800d27e <_printf_float+0x36e>
 800d21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d21c:	459a      	cmp	sl, r3
 800d21e:	dc3a      	bgt.n	800d296 <_printf_float+0x386>
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	07da      	lsls	r2, r3, #31
 800d224:	d437      	bmi.n	800d296 <_printf_float+0x386>
 800d226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d228:	ebaa 0903 	sub.w	r9, sl, r3
 800d22c:	9b06      	ldr	r3, [sp, #24]
 800d22e:	ebaa 0303 	sub.w	r3, sl, r3
 800d232:	4599      	cmp	r9, r3
 800d234:	bfa8      	it	ge
 800d236:	4699      	movge	r9, r3
 800d238:	f1b9 0f00 	cmp.w	r9, #0
 800d23c:	dc33      	bgt.n	800d2a6 <_printf_float+0x396>
 800d23e:	f04f 0800 	mov.w	r8, #0
 800d242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d246:	f104 0b1a 	add.w	fp, r4, #26
 800d24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d24c:	ebaa 0303 	sub.w	r3, sl, r3
 800d250:	eba3 0309 	sub.w	r3, r3, r9
 800d254:	4543      	cmp	r3, r8
 800d256:	f77f af79 	ble.w	800d14c <_printf_float+0x23c>
 800d25a:	2301      	movs	r3, #1
 800d25c:	465a      	mov	r2, fp
 800d25e:	4631      	mov	r1, r6
 800d260:	4628      	mov	r0, r5
 800d262:	47b8      	blx	r7
 800d264:	3001      	adds	r0, #1
 800d266:	f43f aeae 	beq.w	800cfc6 <_printf_float+0xb6>
 800d26a:	f108 0801 	add.w	r8, r8, #1
 800d26e:	e7ec      	b.n	800d24a <_printf_float+0x33a>
 800d270:	4642      	mov	r2, r8
 800d272:	4631      	mov	r1, r6
 800d274:	4628      	mov	r0, r5
 800d276:	47b8      	blx	r7
 800d278:	3001      	adds	r0, #1
 800d27a:	d1c2      	bne.n	800d202 <_printf_float+0x2f2>
 800d27c:	e6a3      	b.n	800cfc6 <_printf_float+0xb6>
 800d27e:	2301      	movs	r3, #1
 800d280:	4631      	mov	r1, r6
 800d282:	4628      	mov	r0, r5
 800d284:	9206      	str	r2, [sp, #24]
 800d286:	47b8      	blx	r7
 800d288:	3001      	adds	r0, #1
 800d28a:	f43f ae9c 	beq.w	800cfc6 <_printf_float+0xb6>
 800d28e:	9a06      	ldr	r2, [sp, #24]
 800d290:	f10b 0b01 	add.w	fp, fp, #1
 800d294:	e7bb      	b.n	800d20e <_printf_float+0x2fe>
 800d296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d29a:	4631      	mov	r1, r6
 800d29c:	4628      	mov	r0, r5
 800d29e:	47b8      	blx	r7
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d1c0      	bne.n	800d226 <_printf_float+0x316>
 800d2a4:	e68f      	b.n	800cfc6 <_printf_float+0xb6>
 800d2a6:	9a06      	ldr	r2, [sp, #24]
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	4442      	add	r2, r8
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b8      	blx	r7
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d1c3      	bne.n	800d23e <_printf_float+0x32e>
 800d2b6:	e686      	b.n	800cfc6 <_printf_float+0xb6>
 800d2b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2bc:	f1ba 0f01 	cmp.w	sl, #1
 800d2c0:	dc01      	bgt.n	800d2c6 <_printf_float+0x3b6>
 800d2c2:	07db      	lsls	r3, r3, #31
 800d2c4:	d536      	bpl.n	800d334 <_printf_float+0x424>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	47b8      	blx	r7
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	f43f ae78 	beq.w	800cfc6 <_printf_float+0xb6>
 800d2d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2da:	4631      	mov	r1, r6
 800d2dc:	4628      	mov	r0, r5
 800d2de:	47b8      	blx	r7
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	f43f ae70 	beq.w	800cfc6 <_printf_float+0xb6>
 800d2e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2f2:	f7f3 fc01 	bl	8000af8 <__aeabi_dcmpeq>
 800d2f6:	b9c0      	cbnz	r0, 800d32a <_printf_float+0x41a>
 800d2f8:	4653      	mov	r3, sl
 800d2fa:	f108 0201 	add.w	r2, r8, #1
 800d2fe:	4631      	mov	r1, r6
 800d300:	4628      	mov	r0, r5
 800d302:	47b8      	blx	r7
 800d304:	3001      	adds	r0, #1
 800d306:	d10c      	bne.n	800d322 <_printf_float+0x412>
 800d308:	e65d      	b.n	800cfc6 <_printf_float+0xb6>
 800d30a:	2301      	movs	r3, #1
 800d30c:	465a      	mov	r2, fp
 800d30e:	4631      	mov	r1, r6
 800d310:	4628      	mov	r0, r5
 800d312:	47b8      	blx	r7
 800d314:	3001      	adds	r0, #1
 800d316:	f43f ae56 	beq.w	800cfc6 <_printf_float+0xb6>
 800d31a:	f108 0801 	add.w	r8, r8, #1
 800d31e:	45d0      	cmp	r8, sl
 800d320:	dbf3      	blt.n	800d30a <_printf_float+0x3fa>
 800d322:	464b      	mov	r3, r9
 800d324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d328:	e6df      	b.n	800d0ea <_printf_float+0x1da>
 800d32a:	f04f 0800 	mov.w	r8, #0
 800d32e:	f104 0b1a 	add.w	fp, r4, #26
 800d332:	e7f4      	b.n	800d31e <_printf_float+0x40e>
 800d334:	2301      	movs	r3, #1
 800d336:	4642      	mov	r2, r8
 800d338:	e7e1      	b.n	800d2fe <_printf_float+0x3ee>
 800d33a:	2301      	movs	r3, #1
 800d33c:	464a      	mov	r2, r9
 800d33e:	4631      	mov	r1, r6
 800d340:	4628      	mov	r0, r5
 800d342:	47b8      	blx	r7
 800d344:	3001      	adds	r0, #1
 800d346:	f43f ae3e 	beq.w	800cfc6 <_printf_float+0xb6>
 800d34a:	f108 0801 	add.w	r8, r8, #1
 800d34e:	68e3      	ldr	r3, [r4, #12]
 800d350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d352:	1a5b      	subs	r3, r3, r1
 800d354:	4543      	cmp	r3, r8
 800d356:	dcf0      	bgt.n	800d33a <_printf_float+0x42a>
 800d358:	e6fc      	b.n	800d154 <_printf_float+0x244>
 800d35a:	f04f 0800 	mov.w	r8, #0
 800d35e:	f104 0919 	add.w	r9, r4, #25
 800d362:	e7f4      	b.n	800d34e <_printf_float+0x43e>

0800d364 <_printf_common>:
 800d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d368:	4616      	mov	r6, r2
 800d36a:	4698      	mov	r8, r3
 800d36c:	688a      	ldr	r2, [r1, #8]
 800d36e:	690b      	ldr	r3, [r1, #16]
 800d370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d374:	4293      	cmp	r3, r2
 800d376:	bfb8      	it	lt
 800d378:	4613      	movlt	r3, r2
 800d37a:	6033      	str	r3, [r6, #0]
 800d37c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d380:	4607      	mov	r7, r0
 800d382:	460c      	mov	r4, r1
 800d384:	b10a      	cbz	r2, 800d38a <_printf_common+0x26>
 800d386:	3301      	adds	r3, #1
 800d388:	6033      	str	r3, [r6, #0]
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	0699      	lsls	r1, r3, #26
 800d38e:	bf42      	ittt	mi
 800d390:	6833      	ldrmi	r3, [r6, #0]
 800d392:	3302      	addmi	r3, #2
 800d394:	6033      	strmi	r3, [r6, #0]
 800d396:	6825      	ldr	r5, [r4, #0]
 800d398:	f015 0506 	ands.w	r5, r5, #6
 800d39c:	d106      	bne.n	800d3ac <_printf_common+0x48>
 800d39e:	f104 0a19 	add.w	sl, r4, #25
 800d3a2:	68e3      	ldr	r3, [r4, #12]
 800d3a4:	6832      	ldr	r2, [r6, #0]
 800d3a6:	1a9b      	subs	r3, r3, r2
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	dc26      	bgt.n	800d3fa <_printf_common+0x96>
 800d3ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3b0:	6822      	ldr	r2, [r4, #0]
 800d3b2:	3b00      	subs	r3, #0
 800d3b4:	bf18      	it	ne
 800d3b6:	2301      	movne	r3, #1
 800d3b8:	0692      	lsls	r2, r2, #26
 800d3ba:	d42b      	bmi.n	800d414 <_printf_common+0xb0>
 800d3bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3c0:	4641      	mov	r1, r8
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	47c8      	blx	r9
 800d3c6:	3001      	adds	r0, #1
 800d3c8:	d01e      	beq.n	800d408 <_printf_common+0xa4>
 800d3ca:	6823      	ldr	r3, [r4, #0]
 800d3cc:	6922      	ldr	r2, [r4, #16]
 800d3ce:	f003 0306 	and.w	r3, r3, #6
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	bf02      	ittt	eq
 800d3d6:	68e5      	ldreq	r5, [r4, #12]
 800d3d8:	6833      	ldreq	r3, [r6, #0]
 800d3da:	1aed      	subeq	r5, r5, r3
 800d3dc:	68a3      	ldr	r3, [r4, #8]
 800d3de:	bf0c      	ite	eq
 800d3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3e4:	2500      	movne	r5, #0
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	bfc4      	itt	gt
 800d3ea:	1a9b      	subgt	r3, r3, r2
 800d3ec:	18ed      	addgt	r5, r5, r3
 800d3ee:	2600      	movs	r6, #0
 800d3f0:	341a      	adds	r4, #26
 800d3f2:	42b5      	cmp	r5, r6
 800d3f4:	d11a      	bne.n	800d42c <_printf_common+0xc8>
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	e008      	b.n	800d40c <_printf_common+0xa8>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	4652      	mov	r2, sl
 800d3fe:	4641      	mov	r1, r8
 800d400:	4638      	mov	r0, r7
 800d402:	47c8      	blx	r9
 800d404:	3001      	adds	r0, #1
 800d406:	d103      	bne.n	800d410 <_printf_common+0xac>
 800d408:	f04f 30ff 	mov.w	r0, #4294967295
 800d40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d410:	3501      	adds	r5, #1
 800d412:	e7c6      	b.n	800d3a2 <_printf_common+0x3e>
 800d414:	18e1      	adds	r1, r4, r3
 800d416:	1c5a      	adds	r2, r3, #1
 800d418:	2030      	movs	r0, #48	@ 0x30
 800d41a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d41e:	4422      	add	r2, r4
 800d420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d428:	3302      	adds	r3, #2
 800d42a:	e7c7      	b.n	800d3bc <_printf_common+0x58>
 800d42c:	2301      	movs	r3, #1
 800d42e:	4622      	mov	r2, r4
 800d430:	4641      	mov	r1, r8
 800d432:	4638      	mov	r0, r7
 800d434:	47c8      	blx	r9
 800d436:	3001      	adds	r0, #1
 800d438:	d0e6      	beq.n	800d408 <_printf_common+0xa4>
 800d43a:	3601      	adds	r6, #1
 800d43c:	e7d9      	b.n	800d3f2 <_printf_common+0x8e>
	...

0800d440 <_printf_i>:
 800d440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d444:	7e0f      	ldrb	r7, [r1, #24]
 800d446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d448:	2f78      	cmp	r7, #120	@ 0x78
 800d44a:	4691      	mov	r9, r2
 800d44c:	4680      	mov	r8, r0
 800d44e:	460c      	mov	r4, r1
 800d450:	469a      	mov	sl, r3
 800d452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d456:	d807      	bhi.n	800d468 <_printf_i+0x28>
 800d458:	2f62      	cmp	r7, #98	@ 0x62
 800d45a:	d80a      	bhi.n	800d472 <_printf_i+0x32>
 800d45c:	2f00      	cmp	r7, #0
 800d45e:	f000 80d2 	beq.w	800d606 <_printf_i+0x1c6>
 800d462:	2f58      	cmp	r7, #88	@ 0x58
 800d464:	f000 80b9 	beq.w	800d5da <_printf_i+0x19a>
 800d468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d46c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d470:	e03a      	b.n	800d4e8 <_printf_i+0xa8>
 800d472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d476:	2b15      	cmp	r3, #21
 800d478:	d8f6      	bhi.n	800d468 <_printf_i+0x28>
 800d47a:	a101      	add	r1, pc, #4	@ (adr r1, 800d480 <_printf_i+0x40>)
 800d47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d480:	0800d4d9 	.word	0x0800d4d9
 800d484:	0800d4ed 	.word	0x0800d4ed
 800d488:	0800d469 	.word	0x0800d469
 800d48c:	0800d469 	.word	0x0800d469
 800d490:	0800d469 	.word	0x0800d469
 800d494:	0800d469 	.word	0x0800d469
 800d498:	0800d4ed 	.word	0x0800d4ed
 800d49c:	0800d469 	.word	0x0800d469
 800d4a0:	0800d469 	.word	0x0800d469
 800d4a4:	0800d469 	.word	0x0800d469
 800d4a8:	0800d469 	.word	0x0800d469
 800d4ac:	0800d5ed 	.word	0x0800d5ed
 800d4b0:	0800d517 	.word	0x0800d517
 800d4b4:	0800d5a7 	.word	0x0800d5a7
 800d4b8:	0800d469 	.word	0x0800d469
 800d4bc:	0800d469 	.word	0x0800d469
 800d4c0:	0800d60f 	.word	0x0800d60f
 800d4c4:	0800d469 	.word	0x0800d469
 800d4c8:	0800d517 	.word	0x0800d517
 800d4cc:	0800d469 	.word	0x0800d469
 800d4d0:	0800d469 	.word	0x0800d469
 800d4d4:	0800d5af 	.word	0x0800d5af
 800d4d8:	6833      	ldr	r3, [r6, #0]
 800d4da:	1d1a      	adds	r2, r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6032      	str	r2, [r6, #0]
 800d4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e09d      	b.n	800d628 <_printf_i+0x1e8>
 800d4ec:	6833      	ldr	r3, [r6, #0]
 800d4ee:	6820      	ldr	r0, [r4, #0]
 800d4f0:	1d19      	adds	r1, r3, #4
 800d4f2:	6031      	str	r1, [r6, #0]
 800d4f4:	0606      	lsls	r6, r0, #24
 800d4f6:	d501      	bpl.n	800d4fc <_printf_i+0xbc>
 800d4f8:	681d      	ldr	r5, [r3, #0]
 800d4fa:	e003      	b.n	800d504 <_printf_i+0xc4>
 800d4fc:	0645      	lsls	r5, r0, #25
 800d4fe:	d5fb      	bpl.n	800d4f8 <_printf_i+0xb8>
 800d500:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d504:	2d00      	cmp	r5, #0
 800d506:	da03      	bge.n	800d510 <_printf_i+0xd0>
 800d508:	232d      	movs	r3, #45	@ 0x2d
 800d50a:	426d      	negs	r5, r5
 800d50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d510:	4859      	ldr	r0, [pc, #356]	@ (800d678 <_printf_i+0x238>)
 800d512:	230a      	movs	r3, #10
 800d514:	e011      	b.n	800d53a <_printf_i+0xfa>
 800d516:	6821      	ldr	r1, [r4, #0]
 800d518:	6833      	ldr	r3, [r6, #0]
 800d51a:	0608      	lsls	r0, r1, #24
 800d51c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d520:	d402      	bmi.n	800d528 <_printf_i+0xe8>
 800d522:	0649      	lsls	r1, r1, #25
 800d524:	bf48      	it	mi
 800d526:	b2ad      	uxthmi	r5, r5
 800d528:	2f6f      	cmp	r7, #111	@ 0x6f
 800d52a:	4853      	ldr	r0, [pc, #332]	@ (800d678 <_printf_i+0x238>)
 800d52c:	6033      	str	r3, [r6, #0]
 800d52e:	bf14      	ite	ne
 800d530:	230a      	movne	r3, #10
 800d532:	2308      	moveq	r3, #8
 800d534:	2100      	movs	r1, #0
 800d536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d53a:	6866      	ldr	r6, [r4, #4]
 800d53c:	60a6      	str	r6, [r4, #8]
 800d53e:	2e00      	cmp	r6, #0
 800d540:	bfa2      	ittt	ge
 800d542:	6821      	ldrge	r1, [r4, #0]
 800d544:	f021 0104 	bicge.w	r1, r1, #4
 800d548:	6021      	strge	r1, [r4, #0]
 800d54a:	b90d      	cbnz	r5, 800d550 <_printf_i+0x110>
 800d54c:	2e00      	cmp	r6, #0
 800d54e:	d04b      	beq.n	800d5e8 <_printf_i+0x1a8>
 800d550:	4616      	mov	r6, r2
 800d552:	fbb5 f1f3 	udiv	r1, r5, r3
 800d556:	fb03 5711 	mls	r7, r3, r1, r5
 800d55a:	5dc7      	ldrb	r7, [r0, r7]
 800d55c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d560:	462f      	mov	r7, r5
 800d562:	42bb      	cmp	r3, r7
 800d564:	460d      	mov	r5, r1
 800d566:	d9f4      	bls.n	800d552 <_printf_i+0x112>
 800d568:	2b08      	cmp	r3, #8
 800d56a:	d10b      	bne.n	800d584 <_printf_i+0x144>
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	07df      	lsls	r7, r3, #31
 800d570:	d508      	bpl.n	800d584 <_printf_i+0x144>
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	6861      	ldr	r1, [r4, #4]
 800d576:	4299      	cmp	r1, r3
 800d578:	bfde      	ittt	le
 800d57a:	2330      	movle	r3, #48	@ 0x30
 800d57c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d580:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d584:	1b92      	subs	r2, r2, r6
 800d586:	6122      	str	r2, [r4, #16]
 800d588:	f8cd a000 	str.w	sl, [sp]
 800d58c:	464b      	mov	r3, r9
 800d58e:	aa03      	add	r2, sp, #12
 800d590:	4621      	mov	r1, r4
 800d592:	4640      	mov	r0, r8
 800d594:	f7ff fee6 	bl	800d364 <_printf_common>
 800d598:	3001      	adds	r0, #1
 800d59a:	d14a      	bne.n	800d632 <_printf_i+0x1f2>
 800d59c:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a0:	b004      	add	sp, #16
 800d5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	f043 0320 	orr.w	r3, r3, #32
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	4833      	ldr	r0, [pc, #204]	@ (800d67c <_printf_i+0x23c>)
 800d5b0:	2778      	movs	r7, #120	@ 0x78
 800d5b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	6831      	ldr	r1, [r6, #0]
 800d5ba:	061f      	lsls	r7, r3, #24
 800d5bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5c0:	d402      	bmi.n	800d5c8 <_printf_i+0x188>
 800d5c2:	065f      	lsls	r7, r3, #25
 800d5c4:	bf48      	it	mi
 800d5c6:	b2ad      	uxthmi	r5, r5
 800d5c8:	6031      	str	r1, [r6, #0]
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	bf44      	itt	mi
 800d5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d5d2:	6023      	strmi	r3, [r4, #0]
 800d5d4:	b11d      	cbz	r5, 800d5de <_printf_i+0x19e>
 800d5d6:	2310      	movs	r3, #16
 800d5d8:	e7ac      	b.n	800d534 <_printf_i+0xf4>
 800d5da:	4827      	ldr	r0, [pc, #156]	@ (800d678 <_printf_i+0x238>)
 800d5dc:	e7e9      	b.n	800d5b2 <_printf_i+0x172>
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	f023 0320 	bic.w	r3, r3, #32
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	e7f6      	b.n	800d5d6 <_printf_i+0x196>
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	e7bd      	b.n	800d568 <_printf_i+0x128>
 800d5ec:	6833      	ldr	r3, [r6, #0]
 800d5ee:	6825      	ldr	r5, [r4, #0]
 800d5f0:	6961      	ldr	r1, [r4, #20]
 800d5f2:	1d18      	adds	r0, r3, #4
 800d5f4:	6030      	str	r0, [r6, #0]
 800d5f6:	062e      	lsls	r6, r5, #24
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	d501      	bpl.n	800d600 <_printf_i+0x1c0>
 800d5fc:	6019      	str	r1, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <_printf_i+0x1c6>
 800d600:	0668      	lsls	r0, r5, #25
 800d602:	d5fb      	bpl.n	800d5fc <_printf_i+0x1bc>
 800d604:	8019      	strh	r1, [r3, #0]
 800d606:	2300      	movs	r3, #0
 800d608:	6123      	str	r3, [r4, #16]
 800d60a:	4616      	mov	r6, r2
 800d60c:	e7bc      	b.n	800d588 <_printf_i+0x148>
 800d60e:	6833      	ldr	r3, [r6, #0]
 800d610:	1d1a      	adds	r2, r3, #4
 800d612:	6032      	str	r2, [r6, #0]
 800d614:	681e      	ldr	r6, [r3, #0]
 800d616:	6862      	ldr	r2, [r4, #4]
 800d618:	2100      	movs	r1, #0
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7f2 fdf0 	bl	8000200 <memchr>
 800d620:	b108      	cbz	r0, 800d626 <_printf_i+0x1e6>
 800d622:	1b80      	subs	r0, r0, r6
 800d624:	6060      	str	r0, [r4, #4]
 800d626:	6863      	ldr	r3, [r4, #4]
 800d628:	6123      	str	r3, [r4, #16]
 800d62a:	2300      	movs	r3, #0
 800d62c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d630:	e7aa      	b.n	800d588 <_printf_i+0x148>
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	4632      	mov	r2, r6
 800d636:	4649      	mov	r1, r9
 800d638:	4640      	mov	r0, r8
 800d63a:	47d0      	blx	sl
 800d63c:	3001      	adds	r0, #1
 800d63e:	d0ad      	beq.n	800d59c <_printf_i+0x15c>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	079b      	lsls	r3, r3, #30
 800d644:	d413      	bmi.n	800d66e <_printf_i+0x22e>
 800d646:	68e0      	ldr	r0, [r4, #12]
 800d648:	9b03      	ldr	r3, [sp, #12]
 800d64a:	4298      	cmp	r0, r3
 800d64c:	bfb8      	it	lt
 800d64e:	4618      	movlt	r0, r3
 800d650:	e7a6      	b.n	800d5a0 <_printf_i+0x160>
 800d652:	2301      	movs	r3, #1
 800d654:	4632      	mov	r2, r6
 800d656:	4649      	mov	r1, r9
 800d658:	4640      	mov	r0, r8
 800d65a:	47d0      	blx	sl
 800d65c:	3001      	adds	r0, #1
 800d65e:	d09d      	beq.n	800d59c <_printf_i+0x15c>
 800d660:	3501      	adds	r5, #1
 800d662:	68e3      	ldr	r3, [r4, #12]
 800d664:	9903      	ldr	r1, [sp, #12]
 800d666:	1a5b      	subs	r3, r3, r1
 800d668:	42ab      	cmp	r3, r5
 800d66a:	dcf2      	bgt.n	800d652 <_printf_i+0x212>
 800d66c:	e7eb      	b.n	800d646 <_printf_i+0x206>
 800d66e:	2500      	movs	r5, #0
 800d670:	f104 0619 	add.w	r6, r4, #25
 800d674:	e7f5      	b.n	800d662 <_printf_i+0x222>
 800d676:	bf00      	nop
 800d678:	080100cb 	.word	0x080100cb
 800d67c:	080100dc 	.word	0x080100dc

0800d680 <std>:
 800d680:	2300      	movs	r3, #0
 800d682:	b510      	push	{r4, lr}
 800d684:	4604      	mov	r4, r0
 800d686:	e9c0 3300 	strd	r3, r3, [r0]
 800d68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d68e:	6083      	str	r3, [r0, #8]
 800d690:	8181      	strh	r1, [r0, #12]
 800d692:	6643      	str	r3, [r0, #100]	@ 0x64
 800d694:	81c2      	strh	r2, [r0, #14]
 800d696:	6183      	str	r3, [r0, #24]
 800d698:	4619      	mov	r1, r3
 800d69a:	2208      	movs	r2, #8
 800d69c:	305c      	adds	r0, #92	@ 0x5c
 800d69e:	f000 fa01 	bl	800daa4 <memset>
 800d6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d8 <std+0x58>)
 800d6a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <std+0x5c>)
 800d6a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e0 <std+0x60>)
 800d6ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e4 <std+0x64>)
 800d6b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e8 <std+0x68>)
 800d6b4:	6224      	str	r4, [r4, #32]
 800d6b6:	429c      	cmp	r4, r3
 800d6b8:	d006      	beq.n	800d6c8 <std+0x48>
 800d6ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6be:	4294      	cmp	r4, r2
 800d6c0:	d002      	beq.n	800d6c8 <std+0x48>
 800d6c2:	33d0      	adds	r3, #208	@ 0xd0
 800d6c4:	429c      	cmp	r4, r3
 800d6c6:	d105      	bne.n	800d6d4 <std+0x54>
 800d6c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d0:	f000 ba64 	b.w	800db9c <__retarget_lock_init_recursive>
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	bf00      	nop
 800d6d8:	0800d8f5 	.word	0x0800d8f5
 800d6dc:	0800d917 	.word	0x0800d917
 800d6e0:	0800d94f 	.word	0x0800d94f
 800d6e4:	0800d973 	.word	0x0800d973
 800d6e8:	20000b20 	.word	0x20000b20

0800d6ec <stdio_exit_handler>:
 800d6ec:	4a02      	ldr	r2, [pc, #8]	@ (800d6f8 <stdio_exit_handler+0xc>)
 800d6ee:	4903      	ldr	r1, [pc, #12]	@ (800d6fc <stdio_exit_handler+0x10>)
 800d6f0:	4803      	ldr	r0, [pc, #12]	@ (800d700 <stdio_exit_handler+0x14>)
 800d6f2:	f000 b869 	b.w	800d7c8 <_fwalk_sglue>
 800d6f6:	bf00      	nop
 800d6f8:	20000074 	.word	0x20000074
 800d6fc:	0800f4e1 	.word	0x0800f4e1
 800d700:	20000084 	.word	0x20000084

0800d704 <cleanup_stdio>:
 800d704:	6841      	ldr	r1, [r0, #4]
 800d706:	4b0c      	ldr	r3, [pc, #48]	@ (800d738 <cleanup_stdio+0x34>)
 800d708:	4299      	cmp	r1, r3
 800d70a:	b510      	push	{r4, lr}
 800d70c:	4604      	mov	r4, r0
 800d70e:	d001      	beq.n	800d714 <cleanup_stdio+0x10>
 800d710:	f001 fee6 	bl	800f4e0 <_fflush_r>
 800d714:	68a1      	ldr	r1, [r4, #8]
 800d716:	4b09      	ldr	r3, [pc, #36]	@ (800d73c <cleanup_stdio+0x38>)
 800d718:	4299      	cmp	r1, r3
 800d71a:	d002      	beq.n	800d722 <cleanup_stdio+0x1e>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f001 fedf 	bl	800f4e0 <_fflush_r>
 800d722:	68e1      	ldr	r1, [r4, #12]
 800d724:	4b06      	ldr	r3, [pc, #24]	@ (800d740 <cleanup_stdio+0x3c>)
 800d726:	4299      	cmp	r1, r3
 800d728:	d004      	beq.n	800d734 <cleanup_stdio+0x30>
 800d72a:	4620      	mov	r0, r4
 800d72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d730:	f001 bed6 	b.w	800f4e0 <_fflush_r>
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop
 800d738:	20000b20 	.word	0x20000b20
 800d73c:	20000b88 	.word	0x20000b88
 800d740:	20000bf0 	.word	0x20000bf0

0800d744 <global_stdio_init.part.0>:
 800d744:	b510      	push	{r4, lr}
 800d746:	4b0b      	ldr	r3, [pc, #44]	@ (800d774 <global_stdio_init.part.0+0x30>)
 800d748:	4c0b      	ldr	r4, [pc, #44]	@ (800d778 <global_stdio_init.part.0+0x34>)
 800d74a:	4a0c      	ldr	r2, [pc, #48]	@ (800d77c <global_stdio_init.part.0+0x38>)
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	4620      	mov	r0, r4
 800d750:	2200      	movs	r2, #0
 800d752:	2104      	movs	r1, #4
 800d754:	f7ff ff94 	bl	800d680 <std>
 800d758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d75c:	2201      	movs	r2, #1
 800d75e:	2109      	movs	r1, #9
 800d760:	f7ff ff8e 	bl	800d680 <std>
 800d764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d768:	2202      	movs	r2, #2
 800d76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d76e:	2112      	movs	r1, #18
 800d770:	f7ff bf86 	b.w	800d680 <std>
 800d774:	20000c58 	.word	0x20000c58
 800d778:	20000b20 	.word	0x20000b20
 800d77c:	0800d6ed 	.word	0x0800d6ed

0800d780 <__sfp_lock_acquire>:
 800d780:	4801      	ldr	r0, [pc, #4]	@ (800d788 <__sfp_lock_acquire+0x8>)
 800d782:	f000 ba0c 	b.w	800db9e <__retarget_lock_acquire_recursive>
 800d786:	bf00      	nop
 800d788:	20000c61 	.word	0x20000c61

0800d78c <__sfp_lock_release>:
 800d78c:	4801      	ldr	r0, [pc, #4]	@ (800d794 <__sfp_lock_release+0x8>)
 800d78e:	f000 ba07 	b.w	800dba0 <__retarget_lock_release_recursive>
 800d792:	bf00      	nop
 800d794:	20000c61 	.word	0x20000c61

0800d798 <__sinit>:
 800d798:	b510      	push	{r4, lr}
 800d79a:	4604      	mov	r4, r0
 800d79c:	f7ff fff0 	bl	800d780 <__sfp_lock_acquire>
 800d7a0:	6a23      	ldr	r3, [r4, #32]
 800d7a2:	b11b      	cbz	r3, 800d7ac <__sinit+0x14>
 800d7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7a8:	f7ff bff0 	b.w	800d78c <__sfp_lock_release>
 800d7ac:	4b04      	ldr	r3, [pc, #16]	@ (800d7c0 <__sinit+0x28>)
 800d7ae:	6223      	str	r3, [r4, #32]
 800d7b0:	4b04      	ldr	r3, [pc, #16]	@ (800d7c4 <__sinit+0x2c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1f5      	bne.n	800d7a4 <__sinit+0xc>
 800d7b8:	f7ff ffc4 	bl	800d744 <global_stdio_init.part.0>
 800d7bc:	e7f2      	b.n	800d7a4 <__sinit+0xc>
 800d7be:	bf00      	nop
 800d7c0:	0800d705 	.word	0x0800d705
 800d7c4:	20000c58 	.word	0x20000c58

0800d7c8 <_fwalk_sglue>:
 800d7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	4688      	mov	r8, r1
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	2600      	movs	r6, #0
 800d7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800d7dc:	d505      	bpl.n	800d7ea <_fwalk_sglue+0x22>
 800d7de:	6824      	ldr	r4, [r4, #0]
 800d7e0:	2c00      	cmp	r4, #0
 800d7e2:	d1f7      	bne.n	800d7d4 <_fwalk_sglue+0xc>
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ea:	89ab      	ldrh	r3, [r5, #12]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d907      	bls.n	800d800 <_fwalk_sglue+0x38>
 800d7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	d003      	beq.n	800d800 <_fwalk_sglue+0x38>
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	47c0      	blx	r8
 800d7fe:	4306      	orrs	r6, r0
 800d800:	3568      	adds	r5, #104	@ 0x68
 800d802:	e7e9      	b.n	800d7d8 <_fwalk_sglue+0x10>

0800d804 <iprintf>:
 800d804:	b40f      	push	{r0, r1, r2, r3}
 800d806:	b507      	push	{r0, r1, r2, lr}
 800d808:	4906      	ldr	r1, [pc, #24]	@ (800d824 <iprintf+0x20>)
 800d80a:	ab04      	add	r3, sp, #16
 800d80c:	6808      	ldr	r0, [r1, #0]
 800d80e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d812:	6881      	ldr	r1, [r0, #8]
 800d814:	9301      	str	r3, [sp, #4]
 800d816:	f001 fcc7 	bl	800f1a8 <_vfiprintf_r>
 800d81a:	b003      	add	sp, #12
 800d81c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d820:	b004      	add	sp, #16
 800d822:	4770      	bx	lr
 800d824:	20000080 	.word	0x20000080

0800d828 <putchar>:
 800d828:	4b02      	ldr	r3, [pc, #8]	@ (800d834 <putchar+0xc>)
 800d82a:	4601      	mov	r1, r0
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	6882      	ldr	r2, [r0, #8]
 800d830:	f001 bee0 	b.w	800f5f4 <_putc_r>
 800d834:	20000080 	.word	0x20000080

0800d838 <_puts_r>:
 800d838:	6a03      	ldr	r3, [r0, #32]
 800d83a:	b570      	push	{r4, r5, r6, lr}
 800d83c:	6884      	ldr	r4, [r0, #8]
 800d83e:	4605      	mov	r5, r0
 800d840:	460e      	mov	r6, r1
 800d842:	b90b      	cbnz	r3, 800d848 <_puts_r+0x10>
 800d844:	f7ff ffa8 	bl	800d798 <__sinit>
 800d848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d84a:	07db      	lsls	r3, r3, #31
 800d84c:	d405      	bmi.n	800d85a <_puts_r+0x22>
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	0598      	lsls	r0, r3, #22
 800d852:	d402      	bmi.n	800d85a <_puts_r+0x22>
 800d854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d856:	f000 f9a2 	bl	800db9e <__retarget_lock_acquire_recursive>
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	0719      	lsls	r1, r3, #28
 800d85e:	d502      	bpl.n	800d866 <_puts_r+0x2e>
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d135      	bne.n	800d8d2 <_puts_r+0x9a>
 800d866:	4621      	mov	r1, r4
 800d868:	4628      	mov	r0, r5
 800d86a:	f000 f8c5 	bl	800d9f8 <__swsetup_r>
 800d86e:	b380      	cbz	r0, 800d8d2 <_puts_r+0x9a>
 800d870:	f04f 35ff 	mov.w	r5, #4294967295
 800d874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d405      	bmi.n	800d886 <_puts_r+0x4e>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	059b      	lsls	r3, r3, #22
 800d87e:	d402      	bmi.n	800d886 <_puts_r+0x4e>
 800d880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d882:	f000 f98d 	bl	800dba0 <__retarget_lock_release_recursive>
 800d886:	4628      	mov	r0, r5
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	da04      	bge.n	800d898 <_puts_r+0x60>
 800d88e:	69a2      	ldr	r2, [r4, #24]
 800d890:	429a      	cmp	r2, r3
 800d892:	dc17      	bgt.n	800d8c4 <_puts_r+0x8c>
 800d894:	290a      	cmp	r1, #10
 800d896:	d015      	beq.n	800d8c4 <_puts_r+0x8c>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	6022      	str	r2, [r4, #0]
 800d89e:	7019      	strb	r1, [r3, #0]
 800d8a0:	68a3      	ldr	r3, [r4, #8]
 800d8a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	60a3      	str	r3, [r4, #8]
 800d8aa:	2900      	cmp	r1, #0
 800d8ac:	d1ed      	bne.n	800d88a <_puts_r+0x52>
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	da11      	bge.n	800d8d6 <_puts_r+0x9e>
 800d8b2:	4622      	mov	r2, r4
 800d8b4:	210a      	movs	r1, #10
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f000 f85f 	bl	800d97a <__swbuf_r>
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d0d7      	beq.n	800d870 <_puts_r+0x38>
 800d8c0:	250a      	movs	r5, #10
 800d8c2:	e7d7      	b.n	800d874 <_puts_r+0x3c>
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f000 f857 	bl	800d97a <__swbuf_r>
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d1e7      	bne.n	800d8a0 <_puts_r+0x68>
 800d8d0:	e7ce      	b.n	800d870 <_puts_r+0x38>
 800d8d2:	3e01      	subs	r6, #1
 800d8d4:	e7e4      	b.n	800d8a0 <_puts_r+0x68>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	1c5a      	adds	r2, r3, #1
 800d8da:	6022      	str	r2, [r4, #0]
 800d8dc:	220a      	movs	r2, #10
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	e7ee      	b.n	800d8c0 <_puts_r+0x88>
	...

0800d8e4 <puts>:
 800d8e4:	4b02      	ldr	r3, [pc, #8]	@ (800d8f0 <puts+0xc>)
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	f7ff bfa5 	b.w	800d838 <_puts_r>
 800d8ee:	bf00      	nop
 800d8f0:	20000080 	.word	0x20000080

0800d8f4 <__sread>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fc:	f000 f900 	bl	800db00 <_read_r>
 800d900:	2800      	cmp	r0, #0
 800d902:	bfab      	itete	ge
 800d904:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d906:	89a3      	ldrhlt	r3, [r4, #12]
 800d908:	181b      	addge	r3, r3, r0
 800d90a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d90e:	bfac      	ite	ge
 800d910:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d912:	81a3      	strhlt	r3, [r4, #12]
 800d914:	bd10      	pop	{r4, pc}

0800d916 <__swrite>:
 800d916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91a:	461f      	mov	r7, r3
 800d91c:	898b      	ldrh	r3, [r1, #12]
 800d91e:	05db      	lsls	r3, r3, #23
 800d920:	4605      	mov	r5, r0
 800d922:	460c      	mov	r4, r1
 800d924:	4616      	mov	r6, r2
 800d926:	d505      	bpl.n	800d934 <__swrite+0x1e>
 800d928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d92c:	2302      	movs	r3, #2
 800d92e:	2200      	movs	r2, #0
 800d930:	f000 f8d4 	bl	800dadc <_lseek_r>
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d93a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	4632      	mov	r2, r6
 800d942:	463b      	mov	r3, r7
 800d944:	4628      	mov	r0, r5
 800d946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d94a:	f000 b8eb 	b.w	800db24 <_write_r>

0800d94e <__sseek>:
 800d94e:	b510      	push	{r4, lr}
 800d950:	460c      	mov	r4, r1
 800d952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d956:	f000 f8c1 	bl	800dadc <_lseek_r>
 800d95a:	1c43      	adds	r3, r0, #1
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	bf15      	itete	ne
 800d960:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d962:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d966:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d96a:	81a3      	strheq	r3, [r4, #12]
 800d96c:	bf18      	it	ne
 800d96e:	81a3      	strhne	r3, [r4, #12]
 800d970:	bd10      	pop	{r4, pc}

0800d972 <__sclose>:
 800d972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d976:	f000 b8a1 	b.w	800dabc <_close_r>

0800d97a <__swbuf_r>:
 800d97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97c:	460e      	mov	r6, r1
 800d97e:	4614      	mov	r4, r2
 800d980:	4605      	mov	r5, r0
 800d982:	b118      	cbz	r0, 800d98c <__swbuf_r+0x12>
 800d984:	6a03      	ldr	r3, [r0, #32]
 800d986:	b90b      	cbnz	r3, 800d98c <__swbuf_r+0x12>
 800d988:	f7ff ff06 	bl	800d798 <__sinit>
 800d98c:	69a3      	ldr	r3, [r4, #24]
 800d98e:	60a3      	str	r3, [r4, #8]
 800d990:	89a3      	ldrh	r3, [r4, #12]
 800d992:	071a      	lsls	r2, r3, #28
 800d994:	d501      	bpl.n	800d99a <__swbuf_r+0x20>
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	b943      	cbnz	r3, 800d9ac <__swbuf_r+0x32>
 800d99a:	4621      	mov	r1, r4
 800d99c:	4628      	mov	r0, r5
 800d99e:	f000 f82b 	bl	800d9f8 <__swsetup_r>
 800d9a2:	b118      	cbz	r0, 800d9ac <__swbuf_r+0x32>
 800d9a4:	f04f 37ff 	mov.w	r7, #4294967295
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	6922      	ldr	r2, [r4, #16]
 800d9b0:	1a98      	subs	r0, r3, r2
 800d9b2:	6963      	ldr	r3, [r4, #20]
 800d9b4:	b2f6      	uxtb	r6, r6
 800d9b6:	4283      	cmp	r3, r0
 800d9b8:	4637      	mov	r7, r6
 800d9ba:	dc05      	bgt.n	800d9c8 <__swbuf_r+0x4e>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f001 fd8e 	bl	800f4e0 <_fflush_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d1ed      	bne.n	800d9a4 <__swbuf_r+0x2a>
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	60a3      	str	r3, [r4, #8]
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	6022      	str	r2, [r4, #0]
 800d9d4:	701e      	strb	r6, [r3, #0]
 800d9d6:	6962      	ldr	r2, [r4, #20]
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d004      	beq.n	800d9e8 <__swbuf_r+0x6e>
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	07db      	lsls	r3, r3, #31
 800d9e2:	d5e1      	bpl.n	800d9a8 <__swbuf_r+0x2e>
 800d9e4:	2e0a      	cmp	r6, #10
 800d9e6:	d1df      	bne.n	800d9a8 <__swbuf_r+0x2e>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f001 fd78 	bl	800f4e0 <_fflush_r>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d0d9      	beq.n	800d9a8 <__swbuf_r+0x2e>
 800d9f4:	e7d6      	b.n	800d9a4 <__swbuf_r+0x2a>
	...

0800d9f8 <__swsetup_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4b29      	ldr	r3, [pc, #164]	@ (800daa0 <__swsetup_r+0xa8>)
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	6818      	ldr	r0, [r3, #0]
 800da00:	460c      	mov	r4, r1
 800da02:	b118      	cbz	r0, 800da0c <__swsetup_r+0x14>
 800da04:	6a03      	ldr	r3, [r0, #32]
 800da06:	b90b      	cbnz	r3, 800da0c <__swsetup_r+0x14>
 800da08:	f7ff fec6 	bl	800d798 <__sinit>
 800da0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da10:	0719      	lsls	r1, r3, #28
 800da12:	d422      	bmi.n	800da5a <__swsetup_r+0x62>
 800da14:	06da      	lsls	r2, r3, #27
 800da16:	d407      	bmi.n	800da28 <__swsetup_r+0x30>
 800da18:	2209      	movs	r2, #9
 800da1a:	602a      	str	r2, [r5, #0]
 800da1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	f04f 30ff 	mov.w	r0, #4294967295
 800da26:	e033      	b.n	800da90 <__swsetup_r+0x98>
 800da28:	0758      	lsls	r0, r3, #29
 800da2a:	d512      	bpl.n	800da52 <__swsetup_r+0x5a>
 800da2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da2e:	b141      	cbz	r1, 800da42 <__swsetup_r+0x4a>
 800da30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da34:	4299      	cmp	r1, r3
 800da36:	d002      	beq.n	800da3e <__swsetup_r+0x46>
 800da38:	4628      	mov	r0, r5
 800da3a:	f000 ff09 	bl	800e850 <_free_r>
 800da3e:	2300      	movs	r3, #0
 800da40:	6363      	str	r3, [r4, #52]	@ 0x34
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	2300      	movs	r3, #0
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	f043 0308 	orr.w	r3, r3, #8
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	b94b      	cbnz	r3, 800da72 <__swsetup_r+0x7a>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da68:	d003      	beq.n	800da72 <__swsetup_r+0x7a>
 800da6a:	4621      	mov	r1, r4
 800da6c:	4628      	mov	r0, r5
 800da6e:	f001 fd85 	bl	800f57c <__smakebuf_r>
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	f013 0201 	ands.w	r2, r3, #1
 800da7a:	d00a      	beq.n	800da92 <__swsetup_r+0x9a>
 800da7c:	2200      	movs	r2, #0
 800da7e:	60a2      	str	r2, [r4, #8]
 800da80:	6962      	ldr	r2, [r4, #20]
 800da82:	4252      	negs	r2, r2
 800da84:	61a2      	str	r2, [r4, #24]
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	b942      	cbnz	r2, 800da9c <__swsetup_r+0xa4>
 800da8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da8e:	d1c5      	bne.n	800da1c <__swsetup_r+0x24>
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	0799      	lsls	r1, r3, #30
 800da94:	bf58      	it	pl
 800da96:	6962      	ldrpl	r2, [r4, #20]
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	e7f4      	b.n	800da86 <__swsetup_r+0x8e>
 800da9c:	2000      	movs	r0, #0
 800da9e:	e7f7      	b.n	800da90 <__swsetup_r+0x98>
 800daa0:	20000080 	.word	0x20000080

0800daa4 <memset>:
 800daa4:	4402      	add	r2, r0
 800daa6:	4603      	mov	r3, r0
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d100      	bne.n	800daae <memset+0xa>
 800daac:	4770      	bx	lr
 800daae:	f803 1b01 	strb.w	r1, [r3], #1
 800dab2:	e7f9      	b.n	800daa8 <memset+0x4>

0800dab4 <_localeconv_r>:
 800dab4:	4800      	ldr	r0, [pc, #0]	@ (800dab8 <_localeconv_r+0x4>)
 800dab6:	4770      	bx	lr
 800dab8:	200001c0 	.word	0x200001c0

0800dabc <_close_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d06      	ldr	r5, [pc, #24]	@ (800dad8 <_close_r+0x1c>)
 800dac0:	2300      	movs	r3, #0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f5 fe82 	bl	80037d0 <_close>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_close_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_close_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	20000c5c 	.word	0x20000c5c

0800dadc <_lseek_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d07      	ldr	r5, [pc, #28]	@ (800dafc <_lseek_r+0x20>)
 800dae0:	4604      	mov	r4, r0
 800dae2:	4608      	mov	r0, r1
 800dae4:	4611      	mov	r1, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	602a      	str	r2, [r5, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	f7f5 fe97 	bl	800381e <_lseek>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_lseek_r+0x1e>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_lseek_r+0x1e>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20000c5c 	.word	0x20000c5c

0800db00 <_read_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d07      	ldr	r5, [pc, #28]	@ (800db20 <_read_r+0x20>)
 800db04:	4604      	mov	r4, r0
 800db06:	4608      	mov	r0, r1
 800db08:	4611      	mov	r1, r2
 800db0a:	2200      	movs	r2, #0
 800db0c:	602a      	str	r2, [r5, #0]
 800db0e:	461a      	mov	r2, r3
 800db10:	f7f5 fe25 	bl	800375e <_read>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_read_r+0x1e>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_read_r+0x1e>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	20000c5c 	.word	0x20000c5c

0800db24 <_write_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d07      	ldr	r5, [pc, #28]	@ (800db44 <_write_r+0x20>)
 800db28:	4604      	mov	r4, r0
 800db2a:	4608      	mov	r0, r1
 800db2c:	4611      	mov	r1, r2
 800db2e:	2200      	movs	r2, #0
 800db30:	602a      	str	r2, [r5, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f7f5 fe30 	bl	8003798 <_write>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_write_r+0x1e>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_write_r+0x1e>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	20000c5c 	.word	0x20000c5c

0800db48 <__errno>:
 800db48:	4b01      	ldr	r3, [pc, #4]	@ (800db50 <__errno+0x8>)
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	20000080 	.word	0x20000080

0800db54 <__libc_init_array>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	4d0d      	ldr	r5, [pc, #52]	@ (800db8c <__libc_init_array+0x38>)
 800db58:	4c0d      	ldr	r4, [pc, #52]	@ (800db90 <__libc_init_array+0x3c>)
 800db5a:	1b64      	subs	r4, r4, r5
 800db5c:	10a4      	asrs	r4, r4, #2
 800db5e:	2600      	movs	r6, #0
 800db60:	42a6      	cmp	r6, r4
 800db62:	d109      	bne.n	800db78 <__libc_init_array+0x24>
 800db64:	4d0b      	ldr	r5, [pc, #44]	@ (800db94 <__libc_init_array+0x40>)
 800db66:	4c0c      	ldr	r4, [pc, #48]	@ (800db98 <__libc_init_array+0x44>)
 800db68:	f001 fe68 	bl	800f83c <_init>
 800db6c:	1b64      	subs	r4, r4, r5
 800db6e:	10a4      	asrs	r4, r4, #2
 800db70:	2600      	movs	r6, #0
 800db72:	42a6      	cmp	r6, r4
 800db74:	d105      	bne.n	800db82 <__libc_init_array+0x2e>
 800db76:	bd70      	pop	{r4, r5, r6, pc}
 800db78:	f855 3b04 	ldr.w	r3, [r5], #4
 800db7c:	4798      	blx	r3
 800db7e:	3601      	adds	r6, #1
 800db80:	e7ee      	b.n	800db60 <__libc_init_array+0xc>
 800db82:	f855 3b04 	ldr.w	r3, [r5], #4
 800db86:	4798      	blx	r3
 800db88:	3601      	adds	r6, #1
 800db8a:	e7f2      	b.n	800db72 <__libc_init_array+0x1e>
 800db8c:	08010330 	.word	0x08010330
 800db90:	08010330 	.word	0x08010330
 800db94:	08010330 	.word	0x08010330
 800db98:	08010334 	.word	0x08010334

0800db9c <__retarget_lock_init_recursive>:
 800db9c:	4770      	bx	lr

0800db9e <__retarget_lock_acquire_recursive>:
 800db9e:	4770      	bx	lr

0800dba0 <__retarget_lock_release_recursive>:
 800dba0:	4770      	bx	lr

0800dba2 <strcpy>:
 800dba2:	4603      	mov	r3, r0
 800dba4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dba8:	f803 2b01 	strb.w	r2, [r3], #1
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	d1f9      	bne.n	800dba4 <strcpy+0x2>
 800dbb0:	4770      	bx	lr

0800dbb2 <quorem>:
 800dbb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb6:	6903      	ldr	r3, [r0, #16]
 800dbb8:	690c      	ldr	r4, [r1, #16]
 800dbba:	42a3      	cmp	r3, r4
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	db7e      	blt.n	800dcbe <quorem+0x10c>
 800dbc0:	3c01      	subs	r4, #1
 800dbc2:	f101 0814 	add.w	r8, r1, #20
 800dbc6:	00a3      	lsls	r3, r4, #2
 800dbc8:	f100 0514 	add.w	r5, r0, #20
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dbe8:	d32e      	bcc.n	800dc48 <quorem+0x96>
 800dbea:	f04f 0a00 	mov.w	sl, #0
 800dbee:	46c4      	mov	ip, r8
 800dbf0:	46ae      	mov	lr, r5
 800dbf2:	46d3      	mov	fp, sl
 800dbf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbf8:	b298      	uxth	r0, r3
 800dbfa:	fb06 a000 	mla	r0, r6, r0, sl
 800dbfe:	0c02      	lsrs	r2, r0, #16
 800dc00:	0c1b      	lsrs	r3, r3, #16
 800dc02:	fb06 2303 	mla	r3, r6, r3, r2
 800dc06:	f8de 2000 	ldr.w	r2, [lr]
 800dc0a:	b280      	uxth	r0, r0
 800dc0c:	b292      	uxth	r2, r2
 800dc0e:	1a12      	subs	r2, r2, r0
 800dc10:	445a      	add	r2, fp
 800dc12:	f8de 0000 	ldr.w	r0, [lr]
 800dc16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc24:	b292      	uxth	r2, r2
 800dc26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc2a:	45e1      	cmp	r9, ip
 800dc2c:	f84e 2b04 	str.w	r2, [lr], #4
 800dc30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc34:	d2de      	bcs.n	800dbf4 <quorem+0x42>
 800dc36:	9b00      	ldr	r3, [sp, #0]
 800dc38:	58eb      	ldr	r3, [r5, r3]
 800dc3a:	b92b      	cbnz	r3, 800dc48 <quorem+0x96>
 800dc3c:	9b01      	ldr	r3, [sp, #4]
 800dc3e:	3b04      	subs	r3, #4
 800dc40:	429d      	cmp	r5, r3
 800dc42:	461a      	mov	r2, r3
 800dc44:	d32f      	bcc.n	800dca6 <quorem+0xf4>
 800dc46:	613c      	str	r4, [r7, #16]
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f001 f97b 	bl	800ef44 <__mcmp>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	db25      	blt.n	800dc9e <quorem+0xec>
 800dc52:	4629      	mov	r1, r5
 800dc54:	2000      	movs	r0, #0
 800dc56:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc5a:	f8d1 c000 	ldr.w	ip, [r1]
 800dc5e:	fa1f fe82 	uxth.w	lr, r2
 800dc62:	fa1f f38c 	uxth.w	r3, ip
 800dc66:	eba3 030e 	sub.w	r3, r3, lr
 800dc6a:	4403      	add	r3, r0
 800dc6c:	0c12      	lsrs	r2, r2, #16
 800dc6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc7c:	45c1      	cmp	r9, r8
 800dc7e:	f841 3b04 	str.w	r3, [r1], #4
 800dc82:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc86:	d2e6      	bcs.n	800dc56 <quorem+0xa4>
 800dc88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc90:	b922      	cbnz	r2, 800dc9c <quorem+0xea>
 800dc92:	3b04      	subs	r3, #4
 800dc94:	429d      	cmp	r5, r3
 800dc96:	461a      	mov	r2, r3
 800dc98:	d30b      	bcc.n	800dcb2 <quorem+0x100>
 800dc9a:	613c      	str	r4, [r7, #16]
 800dc9c:	3601      	adds	r6, #1
 800dc9e:	4630      	mov	r0, r6
 800dca0:	b003      	add	sp, #12
 800dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca6:	6812      	ldr	r2, [r2, #0]
 800dca8:	3b04      	subs	r3, #4
 800dcaa:	2a00      	cmp	r2, #0
 800dcac:	d1cb      	bne.n	800dc46 <quorem+0x94>
 800dcae:	3c01      	subs	r4, #1
 800dcb0:	e7c6      	b.n	800dc40 <quorem+0x8e>
 800dcb2:	6812      	ldr	r2, [r2, #0]
 800dcb4:	3b04      	subs	r3, #4
 800dcb6:	2a00      	cmp	r2, #0
 800dcb8:	d1ef      	bne.n	800dc9a <quorem+0xe8>
 800dcba:	3c01      	subs	r4, #1
 800dcbc:	e7ea      	b.n	800dc94 <quorem+0xe2>
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	e7ee      	b.n	800dca0 <quorem+0xee>
 800dcc2:	0000      	movs	r0, r0
 800dcc4:	0000      	movs	r0, r0
	...

0800dcc8 <_dtoa_r>:
 800dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	69c7      	ldr	r7, [r0, #28]
 800dcce:	b099      	sub	sp, #100	@ 0x64
 800dcd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcd4:	ec55 4b10 	vmov	r4, r5, d0
 800dcd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dcda:	9109      	str	r1, [sp, #36]	@ 0x24
 800dcdc:	4683      	mov	fp, r0
 800dcde:	920e      	str	r2, [sp, #56]	@ 0x38
 800dce0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dce2:	b97f      	cbnz	r7, 800dd04 <_dtoa_r+0x3c>
 800dce4:	2010      	movs	r0, #16
 800dce6:	f000 fdfd 	bl	800e8e4 <malloc>
 800dcea:	4602      	mov	r2, r0
 800dcec:	f8cb 001c 	str.w	r0, [fp, #28]
 800dcf0:	b920      	cbnz	r0, 800dcfc <_dtoa_r+0x34>
 800dcf2:	4ba7      	ldr	r3, [pc, #668]	@ (800df90 <_dtoa_r+0x2c8>)
 800dcf4:	21ef      	movs	r1, #239	@ 0xef
 800dcf6:	48a7      	ldr	r0, [pc, #668]	@ (800df94 <_dtoa_r+0x2cc>)
 800dcf8:	f001 fcf0 	bl	800f6dc <__assert_func>
 800dcfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd00:	6007      	str	r7, [r0, #0]
 800dd02:	60c7      	str	r7, [r0, #12]
 800dd04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd08:	6819      	ldr	r1, [r3, #0]
 800dd0a:	b159      	cbz	r1, 800dd24 <_dtoa_r+0x5c>
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	604a      	str	r2, [r1, #4]
 800dd10:	2301      	movs	r3, #1
 800dd12:	4093      	lsls	r3, r2
 800dd14:	608b      	str	r3, [r1, #8]
 800dd16:	4658      	mov	r0, fp
 800dd18:	f000 feda 	bl	800ead0 <_Bfree>
 800dd1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	1e2b      	subs	r3, r5, #0
 800dd26:	bfb9      	ittee	lt
 800dd28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd2c:	9303      	strlt	r3, [sp, #12]
 800dd2e:	2300      	movge	r3, #0
 800dd30:	6033      	strge	r3, [r6, #0]
 800dd32:	9f03      	ldr	r7, [sp, #12]
 800dd34:	4b98      	ldr	r3, [pc, #608]	@ (800df98 <_dtoa_r+0x2d0>)
 800dd36:	bfbc      	itt	lt
 800dd38:	2201      	movlt	r2, #1
 800dd3a:	6032      	strlt	r2, [r6, #0]
 800dd3c:	43bb      	bics	r3, r7
 800dd3e:	d112      	bne.n	800dd66 <_dtoa_r+0x9e>
 800dd40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd4c:	4323      	orrs	r3, r4
 800dd4e:	f000 854d 	beq.w	800e7ec <_dtoa_r+0xb24>
 800dd52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dfac <_dtoa_r+0x2e4>
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 854f 	beq.w	800e7fc <_dtoa_r+0xb34>
 800dd5e:	f10a 0303 	add.w	r3, sl, #3
 800dd62:	f000 bd49 	b.w	800e7f8 <_dtoa_r+0xb30>
 800dd66:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	ec51 0b17 	vmov	r0, r1, d7
 800dd70:	2300      	movs	r3, #0
 800dd72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dd76:	f7f2 febf 	bl	8000af8 <__aeabi_dcmpeq>
 800dd7a:	4680      	mov	r8, r0
 800dd7c:	b158      	cbz	r0, 800dd96 <_dtoa_r+0xce>
 800dd7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd80:	2301      	movs	r3, #1
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd86:	b113      	cbz	r3, 800dd8e <_dtoa_r+0xc6>
 800dd88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd8a:	4b84      	ldr	r3, [pc, #528]	@ (800df9c <_dtoa_r+0x2d4>)
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dfb0 <_dtoa_r+0x2e8>
 800dd92:	f000 bd33 	b.w	800e7fc <_dtoa_r+0xb34>
 800dd96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dd9a:	aa16      	add	r2, sp, #88	@ 0x58
 800dd9c:	a917      	add	r1, sp, #92	@ 0x5c
 800dd9e:	4658      	mov	r0, fp
 800dda0:	f001 f980 	bl	800f0a4 <__d2b>
 800dda4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dda8:	4681      	mov	r9, r0
 800ddaa:	2e00      	cmp	r6, #0
 800ddac:	d077      	beq.n	800de9e <_dtoa_r+0x1d6>
 800ddae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ddb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ddc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ddc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ddc8:	4619      	mov	r1, r3
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4b74      	ldr	r3, [pc, #464]	@ (800dfa0 <_dtoa_r+0x2d8>)
 800ddce:	f7f2 fa73 	bl	80002b8 <__aeabi_dsub>
 800ddd2:	a369      	add	r3, pc, #420	@ (adr r3, 800df78 <_dtoa_r+0x2b0>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f7f2 fc26 	bl	8000628 <__aeabi_dmul>
 800dddc:	a368      	add	r3, pc, #416	@ (adr r3, 800df80 <_dtoa_r+0x2b8>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	f7f2 fa6b 	bl	80002bc <__adddf3>
 800dde6:	4604      	mov	r4, r0
 800dde8:	4630      	mov	r0, r6
 800ddea:	460d      	mov	r5, r1
 800ddec:	f7f2 fbb2 	bl	8000554 <__aeabi_i2d>
 800ddf0:	a365      	add	r3, pc, #404	@ (adr r3, 800df88 <_dtoa_r+0x2c0>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	f7f2 fc17 	bl	8000628 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	f7f2 fa5b 	bl	80002bc <__adddf3>
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	f7f2 febd 	bl	8000b88 <__aeabi_d2iz>
 800de0e:	2200      	movs	r2, #0
 800de10:	4607      	mov	r7, r0
 800de12:	2300      	movs	r3, #0
 800de14:	4620      	mov	r0, r4
 800de16:	4629      	mov	r1, r5
 800de18:	f7f2 fe78 	bl	8000b0c <__aeabi_dcmplt>
 800de1c:	b140      	cbz	r0, 800de30 <_dtoa_r+0x168>
 800de1e:	4638      	mov	r0, r7
 800de20:	f7f2 fb98 	bl	8000554 <__aeabi_i2d>
 800de24:	4622      	mov	r2, r4
 800de26:	462b      	mov	r3, r5
 800de28:	f7f2 fe66 	bl	8000af8 <__aeabi_dcmpeq>
 800de2c:	b900      	cbnz	r0, 800de30 <_dtoa_r+0x168>
 800de2e:	3f01      	subs	r7, #1
 800de30:	2f16      	cmp	r7, #22
 800de32:	d851      	bhi.n	800ded8 <_dtoa_r+0x210>
 800de34:	4b5b      	ldr	r3, [pc, #364]	@ (800dfa4 <_dtoa_r+0x2dc>)
 800de36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de42:	f7f2 fe63 	bl	8000b0c <__aeabi_dcmplt>
 800de46:	2800      	cmp	r0, #0
 800de48:	d048      	beq.n	800dedc <_dtoa_r+0x214>
 800de4a:	3f01      	subs	r7, #1
 800de4c:	2300      	movs	r3, #0
 800de4e:	9312      	str	r3, [sp, #72]	@ 0x48
 800de50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de52:	1b9b      	subs	r3, r3, r6
 800de54:	1e5a      	subs	r2, r3, #1
 800de56:	bf44      	itt	mi
 800de58:	f1c3 0801 	rsbmi	r8, r3, #1
 800de5c:	2300      	movmi	r3, #0
 800de5e:	9208      	str	r2, [sp, #32]
 800de60:	bf54      	ite	pl
 800de62:	f04f 0800 	movpl.w	r8, #0
 800de66:	9308      	strmi	r3, [sp, #32]
 800de68:	2f00      	cmp	r7, #0
 800de6a:	db39      	blt.n	800dee0 <_dtoa_r+0x218>
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800de70:	443b      	add	r3, r7
 800de72:	9308      	str	r3, [sp, #32]
 800de74:	2300      	movs	r3, #0
 800de76:	930a      	str	r3, [sp, #40]	@ 0x28
 800de78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de7a:	2b09      	cmp	r3, #9
 800de7c:	d864      	bhi.n	800df48 <_dtoa_r+0x280>
 800de7e:	2b05      	cmp	r3, #5
 800de80:	bfc4      	itt	gt
 800de82:	3b04      	subgt	r3, #4
 800de84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800de86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de88:	f1a3 0302 	sub.w	r3, r3, #2
 800de8c:	bfcc      	ite	gt
 800de8e:	2400      	movgt	r4, #0
 800de90:	2401      	movle	r4, #1
 800de92:	2b03      	cmp	r3, #3
 800de94:	d863      	bhi.n	800df5e <_dtoa_r+0x296>
 800de96:	e8df f003 	tbb	[pc, r3]
 800de9a:	372a      	.short	0x372a
 800de9c:	5535      	.short	0x5535
 800de9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dea2:	441e      	add	r6, r3
 800dea4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dea8:	2b20      	cmp	r3, #32
 800deaa:	bfc1      	itttt	gt
 800deac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800deb0:	409f      	lslgt	r7, r3
 800deb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800deb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800deba:	bfd6      	itet	le
 800debc:	f1c3 0320 	rsble	r3, r3, #32
 800dec0:	ea47 0003 	orrgt.w	r0, r7, r3
 800dec4:	fa04 f003 	lslle.w	r0, r4, r3
 800dec8:	f7f2 fb34 	bl	8000534 <__aeabi_ui2d>
 800decc:	2201      	movs	r2, #1
 800dece:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ded2:	3e01      	subs	r6, #1
 800ded4:	9214      	str	r2, [sp, #80]	@ 0x50
 800ded6:	e777      	b.n	800ddc8 <_dtoa_r+0x100>
 800ded8:	2301      	movs	r3, #1
 800deda:	e7b8      	b.n	800de4e <_dtoa_r+0x186>
 800dedc:	9012      	str	r0, [sp, #72]	@ 0x48
 800dede:	e7b7      	b.n	800de50 <_dtoa_r+0x188>
 800dee0:	427b      	negs	r3, r7
 800dee2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee4:	2300      	movs	r3, #0
 800dee6:	eba8 0807 	sub.w	r8, r8, r7
 800deea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800deec:	e7c4      	b.n	800de78 <_dtoa_r+0x1b0>
 800deee:	2300      	movs	r3, #0
 800def0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800def2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800def4:	2b00      	cmp	r3, #0
 800def6:	dc35      	bgt.n	800df64 <_dtoa_r+0x29c>
 800def8:	2301      	movs	r3, #1
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	9307      	str	r3, [sp, #28]
 800defe:	461a      	mov	r2, r3
 800df00:	920e      	str	r2, [sp, #56]	@ 0x38
 800df02:	e00b      	b.n	800df1c <_dtoa_r+0x254>
 800df04:	2301      	movs	r3, #1
 800df06:	e7f3      	b.n	800def0 <_dtoa_r+0x228>
 800df08:	2300      	movs	r3, #0
 800df0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df0e:	18fb      	adds	r3, r7, r3
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	3301      	adds	r3, #1
 800df14:	2b01      	cmp	r3, #1
 800df16:	9307      	str	r3, [sp, #28]
 800df18:	bfb8      	it	lt
 800df1a:	2301      	movlt	r3, #1
 800df1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df20:	2100      	movs	r1, #0
 800df22:	2204      	movs	r2, #4
 800df24:	f102 0514 	add.w	r5, r2, #20
 800df28:	429d      	cmp	r5, r3
 800df2a:	d91f      	bls.n	800df6c <_dtoa_r+0x2a4>
 800df2c:	6041      	str	r1, [r0, #4]
 800df2e:	4658      	mov	r0, fp
 800df30:	f000 fd8e 	bl	800ea50 <_Balloc>
 800df34:	4682      	mov	sl, r0
 800df36:	2800      	cmp	r0, #0
 800df38:	d13c      	bne.n	800dfb4 <_dtoa_r+0x2ec>
 800df3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <_dtoa_r+0x2e0>)
 800df3c:	4602      	mov	r2, r0
 800df3e:	f240 11af 	movw	r1, #431	@ 0x1af
 800df42:	e6d8      	b.n	800dcf6 <_dtoa_r+0x2e>
 800df44:	2301      	movs	r3, #1
 800df46:	e7e0      	b.n	800df0a <_dtoa_r+0x242>
 800df48:	2401      	movs	r4, #1
 800df4a:	2300      	movs	r3, #0
 800df4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df50:	f04f 33ff 	mov.w	r3, #4294967295
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	9307      	str	r3, [sp, #28]
 800df58:	2200      	movs	r2, #0
 800df5a:	2312      	movs	r3, #18
 800df5c:	e7d0      	b.n	800df00 <_dtoa_r+0x238>
 800df5e:	2301      	movs	r3, #1
 800df60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df62:	e7f5      	b.n	800df50 <_dtoa_r+0x288>
 800df64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	9307      	str	r3, [sp, #28]
 800df6a:	e7d7      	b.n	800df1c <_dtoa_r+0x254>
 800df6c:	3101      	adds	r1, #1
 800df6e:	0052      	lsls	r2, r2, #1
 800df70:	e7d8      	b.n	800df24 <_dtoa_r+0x25c>
 800df72:	bf00      	nop
 800df74:	f3af 8000 	nop.w
 800df78:	636f4361 	.word	0x636f4361
 800df7c:	3fd287a7 	.word	0x3fd287a7
 800df80:	8b60c8b3 	.word	0x8b60c8b3
 800df84:	3fc68a28 	.word	0x3fc68a28
 800df88:	509f79fb 	.word	0x509f79fb
 800df8c:	3fd34413 	.word	0x3fd34413
 800df90:	080100fa 	.word	0x080100fa
 800df94:	08010111 	.word	0x08010111
 800df98:	7ff00000 	.word	0x7ff00000
 800df9c:	080100ca 	.word	0x080100ca
 800dfa0:	3ff80000 	.word	0x3ff80000
 800dfa4:	08010208 	.word	0x08010208
 800dfa8:	08010169 	.word	0x08010169
 800dfac:	080100f6 	.word	0x080100f6
 800dfb0:	080100c9 	.word	0x080100c9
 800dfb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfb8:	6018      	str	r0, [r3, #0]
 800dfba:	9b07      	ldr	r3, [sp, #28]
 800dfbc:	2b0e      	cmp	r3, #14
 800dfbe:	f200 80a4 	bhi.w	800e10a <_dtoa_r+0x442>
 800dfc2:	2c00      	cmp	r4, #0
 800dfc4:	f000 80a1 	beq.w	800e10a <_dtoa_r+0x442>
 800dfc8:	2f00      	cmp	r7, #0
 800dfca:	dd33      	ble.n	800e034 <_dtoa_r+0x36c>
 800dfcc:	4bad      	ldr	r3, [pc, #692]	@ (800e284 <_dtoa_r+0x5bc>)
 800dfce:	f007 020f 	and.w	r2, r7, #15
 800dfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfd6:	ed93 7b00 	vldr	d7, [r3]
 800dfda:	05f8      	lsls	r0, r7, #23
 800dfdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dfe0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dfe4:	d516      	bpl.n	800e014 <_dtoa_r+0x34c>
 800dfe6:	4ba8      	ldr	r3, [pc, #672]	@ (800e288 <_dtoa_r+0x5c0>)
 800dfe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dff0:	f7f2 fc44 	bl	800087c <__aeabi_ddiv>
 800dff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dff8:	f004 040f 	and.w	r4, r4, #15
 800dffc:	2603      	movs	r6, #3
 800dffe:	4da2      	ldr	r5, [pc, #648]	@ (800e288 <_dtoa_r+0x5c0>)
 800e000:	b954      	cbnz	r4, 800e018 <_dtoa_r+0x350>
 800e002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00a:	f7f2 fc37 	bl	800087c <__aeabi_ddiv>
 800e00e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e012:	e028      	b.n	800e066 <_dtoa_r+0x39e>
 800e014:	2602      	movs	r6, #2
 800e016:	e7f2      	b.n	800dffe <_dtoa_r+0x336>
 800e018:	07e1      	lsls	r1, r4, #31
 800e01a:	d508      	bpl.n	800e02e <_dtoa_r+0x366>
 800e01c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e020:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e024:	f7f2 fb00 	bl	8000628 <__aeabi_dmul>
 800e028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e02c:	3601      	adds	r6, #1
 800e02e:	1064      	asrs	r4, r4, #1
 800e030:	3508      	adds	r5, #8
 800e032:	e7e5      	b.n	800e000 <_dtoa_r+0x338>
 800e034:	f000 80d2 	beq.w	800e1dc <_dtoa_r+0x514>
 800e038:	427c      	negs	r4, r7
 800e03a:	4b92      	ldr	r3, [pc, #584]	@ (800e284 <_dtoa_r+0x5bc>)
 800e03c:	4d92      	ldr	r5, [pc, #584]	@ (800e288 <_dtoa_r+0x5c0>)
 800e03e:	f004 020f 	and.w	r2, r4, #15
 800e042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e04e:	f7f2 faeb 	bl	8000628 <__aeabi_dmul>
 800e052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e056:	1124      	asrs	r4, r4, #4
 800e058:	2300      	movs	r3, #0
 800e05a:	2602      	movs	r6, #2
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	f040 80b2 	bne.w	800e1c6 <_dtoa_r+0x4fe>
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1d3      	bne.n	800e00e <_dtoa_r+0x346>
 800e066:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e068:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 80b7 	beq.w	800e1e0 <_dtoa_r+0x518>
 800e072:	4b86      	ldr	r3, [pc, #536]	@ (800e28c <_dtoa_r+0x5c4>)
 800e074:	2200      	movs	r2, #0
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 fd47 	bl	8000b0c <__aeabi_dcmplt>
 800e07e:	2800      	cmp	r0, #0
 800e080:	f000 80ae 	beq.w	800e1e0 <_dtoa_r+0x518>
 800e084:	9b07      	ldr	r3, [sp, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f000 80aa 	beq.w	800e1e0 <_dtoa_r+0x518>
 800e08c:	9b00      	ldr	r3, [sp, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dd37      	ble.n	800e102 <_dtoa_r+0x43a>
 800e092:	1e7b      	subs	r3, r7, #1
 800e094:	9304      	str	r3, [sp, #16]
 800e096:	4620      	mov	r0, r4
 800e098:	4b7d      	ldr	r3, [pc, #500]	@ (800e290 <_dtoa_r+0x5c8>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	4629      	mov	r1, r5
 800e09e:	f7f2 fac3 	bl	8000628 <__aeabi_dmul>
 800e0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0a6:	9c00      	ldr	r4, [sp, #0]
 800e0a8:	3601      	adds	r6, #1
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f7f2 fa52 	bl	8000554 <__aeabi_i2d>
 800e0b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0b4:	f7f2 fab8 	bl	8000628 <__aeabi_dmul>
 800e0b8:	4b76      	ldr	r3, [pc, #472]	@ (800e294 <_dtoa_r+0x5cc>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f7f2 f8fe 	bl	80002bc <__adddf3>
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0c6:	2c00      	cmp	r4, #0
 800e0c8:	f040 808d 	bne.w	800e1e6 <_dtoa_r+0x51e>
 800e0cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0d0:	4b71      	ldr	r3, [pc, #452]	@ (800e298 <_dtoa_r+0x5d0>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f7f2 f8f0 	bl	80002b8 <__aeabi_dsub>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0e0:	462a      	mov	r2, r5
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	f7f2 fd30 	bl	8000b48 <__aeabi_dcmpgt>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f040 828b 	bne.w	800e604 <_dtoa_r+0x93c>
 800e0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0f2:	462a      	mov	r2, r5
 800e0f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e0f8:	f7f2 fd08 	bl	8000b0c <__aeabi_dcmplt>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	f040 8128 	bne.w	800e352 <_dtoa_r+0x68a>
 800e102:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e10a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f2c0 815a 	blt.w	800e3c6 <_dtoa_r+0x6fe>
 800e112:	2f0e      	cmp	r7, #14
 800e114:	f300 8157 	bgt.w	800e3c6 <_dtoa_r+0x6fe>
 800e118:	4b5a      	ldr	r3, [pc, #360]	@ (800e284 <_dtoa_r+0x5bc>)
 800e11a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e11e:	ed93 7b00 	vldr	d7, [r3]
 800e122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e124:	2b00      	cmp	r3, #0
 800e126:	ed8d 7b00 	vstr	d7, [sp]
 800e12a:	da03      	bge.n	800e134 <_dtoa_r+0x46c>
 800e12c:	9b07      	ldr	r3, [sp, #28]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f340 8101 	ble.w	800e336 <_dtoa_r+0x66e>
 800e134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e138:	4656      	mov	r6, sl
 800e13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e13e:	4620      	mov	r0, r4
 800e140:	4629      	mov	r1, r5
 800e142:	f7f2 fb9b 	bl	800087c <__aeabi_ddiv>
 800e146:	f7f2 fd1f 	bl	8000b88 <__aeabi_d2iz>
 800e14a:	4680      	mov	r8, r0
 800e14c:	f7f2 fa02 	bl	8000554 <__aeabi_i2d>
 800e150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e154:	f7f2 fa68 	bl	8000628 <__aeabi_dmul>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4620      	mov	r0, r4
 800e15e:	4629      	mov	r1, r5
 800e160:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e164:	f7f2 f8a8 	bl	80002b8 <__aeabi_dsub>
 800e168:	f806 4b01 	strb.w	r4, [r6], #1
 800e16c:	9d07      	ldr	r5, [sp, #28]
 800e16e:	eba6 040a 	sub.w	r4, r6, sl
 800e172:	42a5      	cmp	r5, r4
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	f040 8117 	bne.w	800e3aa <_dtoa_r+0x6e2>
 800e17c:	f7f2 f89e 	bl	80002bc <__adddf3>
 800e180:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e184:	4604      	mov	r4, r0
 800e186:	460d      	mov	r5, r1
 800e188:	f7f2 fcde 	bl	8000b48 <__aeabi_dcmpgt>
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f040 80f9 	bne.w	800e384 <_dtoa_r+0x6bc>
 800e192:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 fcad 	bl	8000af8 <__aeabi_dcmpeq>
 800e19e:	b118      	cbz	r0, 800e1a8 <_dtoa_r+0x4e0>
 800e1a0:	f018 0f01 	tst.w	r8, #1
 800e1a4:	f040 80ee 	bne.w	800e384 <_dtoa_r+0x6bc>
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	4658      	mov	r0, fp
 800e1ac:	f000 fc90 	bl	800ead0 <_Bfree>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	7033      	strb	r3, [r6, #0]
 800e1b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1b6:	3701      	adds	r7, #1
 800e1b8:	601f      	str	r7, [r3, #0]
 800e1ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f000 831d 	beq.w	800e7fc <_dtoa_r+0xb34>
 800e1c2:	601e      	str	r6, [r3, #0]
 800e1c4:	e31a      	b.n	800e7fc <_dtoa_r+0xb34>
 800e1c6:	07e2      	lsls	r2, r4, #31
 800e1c8:	d505      	bpl.n	800e1d6 <_dtoa_r+0x50e>
 800e1ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1ce:	f7f2 fa2b 	bl	8000628 <__aeabi_dmul>
 800e1d2:	3601      	adds	r6, #1
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	1064      	asrs	r4, r4, #1
 800e1d8:	3508      	adds	r5, #8
 800e1da:	e73f      	b.n	800e05c <_dtoa_r+0x394>
 800e1dc:	2602      	movs	r6, #2
 800e1de:	e742      	b.n	800e066 <_dtoa_r+0x39e>
 800e1e0:	9c07      	ldr	r4, [sp, #28]
 800e1e2:	9704      	str	r7, [sp, #16]
 800e1e4:	e761      	b.n	800e0aa <_dtoa_r+0x3e2>
 800e1e6:	4b27      	ldr	r3, [pc, #156]	@ (800e284 <_dtoa_r+0x5bc>)
 800e1e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e1f2:	4454      	add	r4, sl
 800e1f4:	2900      	cmp	r1, #0
 800e1f6:	d053      	beq.n	800e2a0 <_dtoa_r+0x5d8>
 800e1f8:	4928      	ldr	r1, [pc, #160]	@ (800e29c <_dtoa_r+0x5d4>)
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	f7f2 fb3e 	bl	800087c <__aeabi_ddiv>
 800e200:	4633      	mov	r3, r6
 800e202:	462a      	mov	r2, r5
 800e204:	f7f2 f858 	bl	80002b8 <__aeabi_dsub>
 800e208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e20c:	4656      	mov	r6, sl
 800e20e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e212:	f7f2 fcb9 	bl	8000b88 <__aeabi_d2iz>
 800e216:	4605      	mov	r5, r0
 800e218:	f7f2 f99c 	bl	8000554 <__aeabi_i2d>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e224:	f7f2 f848 	bl	80002b8 <__aeabi_dsub>
 800e228:	3530      	adds	r5, #48	@ 0x30
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e232:	f806 5b01 	strb.w	r5, [r6], #1
 800e236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e23a:	f7f2 fc67 	bl	8000b0c <__aeabi_dcmplt>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d171      	bne.n	800e326 <_dtoa_r+0x65e>
 800e242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e246:	4911      	ldr	r1, [pc, #68]	@ (800e28c <_dtoa_r+0x5c4>)
 800e248:	2000      	movs	r0, #0
 800e24a:	f7f2 f835 	bl	80002b8 <__aeabi_dsub>
 800e24e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e252:	f7f2 fc5b 	bl	8000b0c <__aeabi_dcmplt>
 800e256:	2800      	cmp	r0, #0
 800e258:	f040 8095 	bne.w	800e386 <_dtoa_r+0x6be>
 800e25c:	42a6      	cmp	r6, r4
 800e25e:	f43f af50 	beq.w	800e102 <_dtoa_r+0x43a>
 800e262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e266:	4b0a      	ldr	r3, [pc, #40]	@ (800e290 <_dtoa_r+0x5c8>)
 800e268:	2200      	movs	r2, #0
 800e26a:	f7f2 f9dd 	bl	8000628 <__aeabi_dmul>
 800e26e:	4b08      	ldr	r3, [pc, #32]	@ (800e290 <_dtoa_r+0x5c8>)
 800e270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e274:	2200      	movs	r2, #0
 800e276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e27a:	f7f2 f9d5 	bl	8000628 <__aeabi_dmul>
 800e27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e282:	e7c4      	b.n	800e20e <_dtoa_r+0x546>
 800e284:	08010208 	.word	0x08010208
 800e288:	080101e0 	.word	0x080101e0
 800e28c:	3ff00000 	.word	0x3ff00000
 800e290:	40240000 	.word	0x40240000
 800e294:	401c0000 	.word	0x401c0000
 800e298:	40140000 	.word	0x40140000
 800e29c:	3fe00000 	.word	0x3fe00000
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7f2 f9c0 	bl	8000628 <__aeabi_dmul>
 800e2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e2ae:	4656      	mov	r6, sl
 800e2b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b4:	f7f2 fc68 	bl	8000b88 <__aeabi_d2iz>
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	f7f2 f94b 	bl	8000554 <__aeabi_i2d>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2c6:	f7f1 fff7 	bl	80002b8 <__aeabi_dsub>
 800e2ca:	3530      	adds	r5, #48	@ 0x30
 800e2cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	42a6      	cmp	r6, r4
 800e2d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2da:	f04f 0200 	mov.w	r2, #0
 800e2de:	d124      	bne.n	800e32a <_dtoa_r+0x662>
 800e2e0:	4bac      	ldr	r3, [pc, #688]	@ (800e594 <_dtoa_r+0x8cc>)
 800e2e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2e6:	f7f1 ffe9 	bl	80002bc <__adddf3>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2f2:	f7f2 fc29 	bl	8000b48 <__aeabi_dcmpgt>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d145      	bne.n	800e386 <_dtoa_r+0x6be>
 800e2fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2fe:	49a5      	ldr	r1, [pc, #660]	@ (800e594 <_dtoa_r+0x8cc>)
 800e300:	2000      	movs	r0, #0
 800e302:	f7f1 ffd9 	bl	80002b8 <__aeabi_dsub>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e30e:	f7f2 fbfd 	bl	8000b0c <__aeabi_dcmplt>
 800e312:	2800      	cmp	r0, #0
 800e314:	f43f aef5 	beq.w	800e102 <_dtoa_r+0x43a>
 800e318:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e31a:	1e73      	subs	r3, r6, #1
 800e31c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e31e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e322:	2b30      	cmp	r3, #48	@ 0x30
 800e324:	d0f8      	beq.n	800e318 <_dtoa_r+0x650>
 800e326:	9f04      	ldr	r7, [sp, #16]
 800e328:	e73e      	b.n	800e1a8 <_dtoa_r+0x4e0>
 800e32a:	4b9b      	ldr	r3, [pc, #620]	@ (800e598 <_dtoa_r+0x8d0>)
 800e32c:	f7f2 f97c 	bl	8000628 <__aeabi_dmul>
 800e330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e334:	e7bc      	b.n	800e2b0 <_dtoa_r+0x5e8>
 800e336:	d10c      	bne.n	800e352 <_dtoa_r+0x68a>
 800e338:	4b98      	ldr	r3, [pc, #608]	@ (800e59c <_dtoa_r+0x8d4>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e340:	f7f2 f972 	bl	8000628 <__aeabi_dmul>
 800e344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e348:	f7f2 fbf4 	bl	8000b34 <__aeabi_dcmpge>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f000 8157 	beq.w	800e600 <_dtoa_r+0x938>
 800e352:	2400      	movs	r4, #0
 800e354:	4625      	mov	r5, r4
 800e356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e358:	43db      	mvns	r3, r3
 800e35a:	9304      	str	r3, [sp, #16]
 800e35c:	4656      	mov	r6, sl
 800e35e:	2700      	movs	r7, #0
 800e360:	4621      	mov	r1, r4
 800e362:	4658      	mov	r0, fp
 800e364:	f000 fbb4 	bl	800ead0 <_Bfree>
 800e368:	2d00      	cmp	r5, #0
 800e36a:	d0dc      	beq.n	800e326 <_dtoa_r+0x65e>
 800e36c:	b12f      	cbz	r7, 800e37a <_dtoa_r+0x6b2>
 800e36e:	42af      	cmp	r7, r5
 800e370:	d003      	beq.n	800e37a <_dtoa_r+0x6b2>
 800e372:	4639      	mov	r1, r7
 800e374:	4658      	mov	r0, fp
 800e376:	f000 fbab 	bl	800ead0 <_Bfree>
 800e37a:	4629      	mov	r1, r5
 800e37c:	4658      	mov	r0, fp
 800e37e:	f000 fba7 	bl	800ead0 <_Bfree>
 800e382:	e7d0      	b.n	800e326 <_dtoa_r+0x65e>
 800e384:	9704      	str	r7, [sp, #16]
 800e386:	4633      	mov	r3, r6
 800e388:	461e      	mov	r6, r3
 800e38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e38e:	2a39      	cmp	r2, #57	@ 0x39
 800e390:	d107      	bne.n	800e3a2 <_dtoa_r+0x6da>
 800e392:	459a      	cmp	sl, r3
 800e394:	d1f8      	bne.n	800e388 <_dtoa_r+0x6c0>
 800e396:	9a04      	ldr	r2, [sp, #16]
 800e398:	3201      	adds	r2, #1
 800e39a:	9204      	str	r2, [sp, #16]
 800e39c:	2230      	movs	r2, #48	@ 0x30
 800e39e:	f88a 2000 	strb.w	r2, [sl]
 800e3a2:	781a      	ldrb	r2, [r3, #0]
 800e3a4:	3201      	adds	r2, #1
 800e3a6:	701a      	strb	r2, [r3, #0]
 800e3a8:	e7bd      	b.n	800e326 <_dtoa_r+0x65e>
 800e3aa:	4b7b      	ldr	r3, [pc, #492]	@ (800e598 <_dtoa_r+0x8d0>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f7f2 f93b 	bl	8000628 <__aeabi_dmul>
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	f7f2 fb9d 	bl	8000af8 <__aeabi_dcmpeq>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f43f aebb 	beq.w	800e13a <_dtoa_r+0x472>
 800e3c4:	e6f0      	b.n	800e1a8 <_dtoa_r+0x4e0>
 800e3c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3c8:	2a00      	cmp	r2, #0
 800e3ca:	f000 80db 	beq.w	800e584 <_dtoa_r+0x8bc>
 800e3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3d0:	2a01      	cmp	r2, #1
 800e3d2:	f300 80bf 	bgt.w	800e554 <_dtoa_r+0x88c>
 800e3d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e3d8:	2a00      	cmp	r2, #0
 800e3da:	f000 80b7 	beq.w	800e54c <_dtoa_r+0x884>
 800e3de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e3e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e3e4:	4646      	mov	r6, r8
 800e3e6:	9a08      	ldr	r2, [sp, #32]
 800e3e8:	2101      	movs	r1, #1
 800e3ea:	441a      	add	r2, r3
 800e3ec:	4658      	mov	r0, fp
 800e3ee:	4498      	add	r8, r3
 800e3f0:	9208      	str	r2, [sp, #32]
 800e3f2:	f000 fc21 	bl	800ec38 <__i2b>
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b15e      	cbz	r6, 800e412 <_dtoa_r+0x74a>
 800e3fa:	9b08      	ldr	r3, [sp, #32]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dd08      	ble.n	800e412 <_dtoa_r+0x74a>
 800e400:	42b3      	cmp	r3, r6
 800e402:	9a08      	ldr	r2, [sp, #32]
 800e404:	bfa8      	it	ge
 800e406:	4633      	movge	r3, r6
 800e408:	eba8 0803 	sub.w	r8, r8, r3
 800e40c:	1af6      	subs	r6, r6, r3
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	9308      	str	r3, [sp, #32]
 800e412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e414:	b1f3      	cbz	r3, 800e454 <_dtoa_r+0x78c>
 800e416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 80b7 	beq.w	800e58c <_dtoa_r+0x8c4>
 800e41e:	b18c      	cbz	r4, 800e444 <_dtoa_r+0x77c>
 800e420:	4629      	mov	r1, r5
 800e422:	4622      	mov	r2, r4
 800e424:	4658      	mov	r0, fp
 800e426:	f000 fcc7 	bl	800edb8 <__pow5mult>
 800e42a:	464a      	mov	r2, r9
 800e42c:	4601      	mov	r1, r0
 800e42e:	4605      	mov	r5, r0
 800e430:	4658      	mov	r0, fp
 800e432:	f000 fc17 	bl	800ec64 <__multiply>
 800e436:	4649      	mov	r1, r9
 800e438:	9004      	str	r0, [sp, #16]
 800e43a:	4658      	mov	r0, fp
 800e43c:	f000 fb48 	bl	800ead0 <_Bfree>
 800e440:	9b04      	ldr	r3, [sp, #16]
 800e442:	4699      	mov	r9, r3
 800e444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e446:	1b1a      	subs	r2, r3, r4
 800e448:	d004      	beq.n	800e454 <_dtoa_r+0x78c>
 800e44a:	4649      	mov	r1, r9
 800e44c:	4658      	mov	r0, fp
 800e44e:	f000 fcb3 	bl	800edb8 <__pow5mult>
 800e452:	4681      	mov	r9, r0
 800e454:	2101      	movs	r1, #1
 800e456:	4658      	mov	r0, fp
 800e458:	f000 fbee 	bl	800ec38 <__i2b>
 800e45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e45e:	4604      	mov	r4, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 81cf 	beq.w	800e804 <_dtoa_r+0xb3c>
 800e466:	461a      	mov	r2, r3
 800e468:	4601      	mov	r1, r0
 800e46a:	4658      	mov	r0, fp
 800e46c:	f000 fca4 	bl	800edb8 <__pow5mult>
 800e470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e472:	2b01      	cmp	r3, #1
 800e474:	4604      	mov	r4, r0
 800e476:	f300 8095 	bgt.w	800e5a4 <_dtoa_r+0x8dc>
 800e47a:	9b02      	ldr	r3, [sp, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 8087 	bne.w	800e590 <_dtoa_r+0x8c8>
 800e482:	9b03      	ldr	r3, [sp, #12]
 800e484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f040 8089 	bne.w	800e5a0 <_dtoa_r+0x8d8>
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e494:	0d1b      	lsrs	r3, r3, #20
 800e496:	051b      	lsls	r3, r3, #20
 800e498:	b12b      	cbz	r3, 800e4a6 <_dtoa_r+0x7de>
 800e49a:	9b08      	ldr	r3, [sp, #32]
 800e49c:	3301      	adds	r3, #1
 800e49e:	9308      	str	r3, [sp, #32]
 800e4a0:	f108 0801 	add.w	r8, r8, #1
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 81b0 	beq.w	800e810 <_dtoa_r+0xb48>
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4b6:	6918      	ldr	r0, [r3, #16]
 800e4b8:	f000 fb72 	bl	800eba0 <__hi0bits>
 800e4bc:	f1c0 0020 	rsb	r0, r0, #32
 800e4c0:	9b08      	ldr	r3, [sp, #32]
 800e4c2:	4418      	add	r0, r3
 800e4c4:	f010 001f 	ands.w	r0, r0, #31
 800e4c8:	d077      	beq.n	800e5ba <_dtoa_r+0x8f2>
 800e4ca:	f1c0 0320 	rsb	r3, r0, #32
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	dd6b      	ble.n	800e5aa <_dtoa_r+0x8e2>
 800e4d2:	9b08      	ldr	r3, [sp, #32]
 800e4d4:	f1c0 001c 	rsb	r0, r0, #28
 800e4d8:	4403      	add	r3, r0
 800e4da:	4480      	add	r8, r0
 800e4dc:	4406      	add	r6, r0
 800e4de:	9308      	str	r3, [sp, #32]
 800e4e0:	f1b8 0f00 	cmp.w	r8, #0
 800e4e4:	dd05      	ble.n	800e4f2 <_dtoa_r+0x82a>
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4642      	mov	r2, r8
 800e4ea:	4658      	mov	r0, fp
 800e4ec:	f000 fcbe 	bl	800ee6c <__lshift>
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	9b08      	ldr	r3, [sp, #32]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	dd05      	ble.n	800e504 <_dtoa_r+0x83c>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4658      	mov	r0, fp
 800e4fe:	f000 fcb5 	bl	800ee6c <__lshift>
 800e502:	4604      	mov	r4, r0
 800e504:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e506:	2b00      	cmp	r3, #0
 800e508:	d059      	beq.n	800e5be <_dtoa_r+0x8f6>
 800e50a:	4621      	mov	r1, r4
 800e50c:	4648      	mov	r0, r9
 800e50e:	f000 fd19 	bl	800ef44 <__mcmp>
 800e512:	2800      	cmp	r0, #0
 800e514:	da53      	bge.n	800e5be <_dtoa_r+0x8f6>
 800e516:	1e7b      	subs	r3, r7, #1
 800e518:	9304      	str	r3, [sp, #16]
 800e51a:	4649      	mov	r1, r9
 800e51c:	2300      	movs	r3, #0
 800e51e:	220a      	movs	r2, #10
 800e520:	4658      	mov	r0, fp
 800e522:	f000 faf7 	bl	800eb14 <__multadd>
 800e526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e528:	4681      	mov	r9, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 8172 	beq.w	800e814 <_dtoa_r+0xb4c>
 800e530:	2300      	movs	r3, #0
 800e532:	4629      	mov	r1, r5
 800e534:	220a      	movs	r2, #10
 800e536:	4658      	mov	r0, fp
 800e538:	f000 faec 	bl	800eb14 <__multadd>
 800e53c:	9b00      	ldr	r3, [sp, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	4605      	mov	r5, r0
 800e542:	dc67      	bgt.n	800e614 <_dtoa_r+0x94c>
 800e544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e546:	2b02      	cmp	r3, #2
 800e548:	dc41      	bgt.n	800e5ce <_dtoa_r+0x906>
 800e54a:	e063      	b.n	800e614 <_dtoa_r+0x94c>
 800e54c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e54e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e552:	e746      	b.n	800e3e2 <_dtoa_r+0x71a>
 800e554:	9b07      	ldr	r3, [sp, #28]
 800e556:	1e5c      	subs	r4, r3, #1
 800e558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e55a:	42a3      	cmp	r3, r4
 800e55c:	bfbf      	itttt	lt
 800e55e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e560:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e562:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e564:	1ae3      	sublt	r3, r4, r3
 800e566:	bfb4      	ite	lt
 800e568:	18d2      	addlt	r2, r2, r3
 800e56a:	1b1c      	subge	r4, r3, r4
 800e56c:	9b07      	ldr	r3, [sp, #28]
 800e56e:	bfbc      	itt	lt
 800e570:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e572:	2400      	movlt	r4, #0
 800e574:	2b00      	cmp	r3, #0
 800e576:	bfb5      	itete	lt
 800e578:	eba8 0603 	sublt.w	r6, r8, r3
 800e57c:	9b07      	ldrge	r3, [sp, #28]
 800e57e:	2300      	movlt	r3, #0
 800e580:	4646      	movge	r6, r8
 800e582:	e730      	b.n	800e3e6 <_dtoa_r+0x71e>
 800e584:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e586:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e588:	4646      	mov	r6, r8
 800e58a:	e735      	b.n	800e3f8 <_dtoa_r+0x730>
 800e58c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e58e:	e75c      	b.n	800e44a <_dtoa_r+0x782>
 800e590:	2300      	movs	r3, #0
 800e592:	e788      	b.n	800e4a6 <_dtoa_r+0x7de>
 800e594:	3fe00000 	.word	0x3fe00000
 800e598:	40240000 	.word	0x40240000
 800e59c:	40140000 	.word	0x40140000
 800e5a0:	9b02      	ldr	r3, [sp, #8]
 800e5a2:	e780      	b.n	800e4a6 <_dtoa_r+0x7de>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5a8:	e782      	b.n	800e4b0 <_dtoa_r+0x7e8>
 800e5aa:	d099      	beq.n	800e4e0 <_dtoa_r+0x818>
 800e5ac:	9a08      	ldr	r2, [sp, #32]
 800e5ae:	331c      	adds	r3, #28
 800e5b0:	441a      	add	r2, r3
 800e5b2:	4498      	add	r8, r3
 800e5b4:	441e      	add	r6, r3
 800e5b6:	9208      	str	r2, [sp, #32]
 800e5b8:	e792      	b.n	800e4e0 <_dtoa_r+0x818>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	e7f6      	b.n	800e5ac <_dtoa_r+0x8e4>
 800e5be:	9b07      	ldr	r3, [sp, #28]
 800e5c0:	9704      	str	r7, [sp, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dc20      	bgt.n	800e608 <_dtoa_r+0x940>
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	dd1e      	ble.n	800e60c <_dtoa_r+0x944>
 800e5ce:	9b00      	ldr	r3, [sp, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f47f aec0 	bne.w	800e356 <_dtoa_r+0x68e>
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	2205      	movs	r2, #5
 800e5da:	4658      	mov	r0, fp
 800e5dc:	f000 fa9a 	bl	800eb14 <__multadd>
 800e5e0:	4601      	mov	r1, r0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4648      	mov	r0, r9
 800e5e6:	f000 fcad 	bl	800ef44 <__mcmp>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f77f aeb3 	ble.w	800e356 <_dtoa_r+0x68e>
 800e5f0:	4656      	mov	r6, sl
 800e5f2:	2331      	movs	r3, #49	@ 0x31
 800e5f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e5f8:	9b04      	ldr	r3, [sp, #16]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	9304      	str	r3, [sp, #16]
 800e5fe:	e6ae      	b.n	800e35e <_dtoa_r+0x696>
 800e600:	9c07      	ldr	r4, [sp, #28]
 800e602:	9704      	str	r7, [sp, #16]
 800e604:	4625      	mov	r5, r4
 800e606:	e7f3      	b.n	800e5f0 <_dtoa_r+0x928>
 800e608:	9b07      	ldr	r3, [sp, #28]
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 8104 	beq.w	800e81c <_dtoa_r+0xb54>
 800e614:	2e00      	cmp	r6, #0
 800e616:	dd05      	ble.n	800e624 <_dtoa_r+0x95c>
 800e618:	4629      	mov	r1, r5
 800e61a:	4632      	mov	r2, r6
 800e61c:	4658      	mov	r0, fp
 800e61e:	f000 fc25 	bl	800ee6c <__lshift>
 800e622:	4605      	mov	r5, r0
 800e624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e626:	2b00      	cmp	r3, #0
 800e628:	d05a      	beq.n	800e6e0 <_dtoa_r+0xa18>
 800e62a:	6869      	ldr	r1, [r5, #4]
 800e62c:	4658      	mov	r0, fp
 800e62e:	f000 fa0f 	bl	800ea50 <_Balloc>
 800e632:	4606      	mov	r6, r0
 800e634:	b928      	cbnz	r0, 800e642 <_dtoa_r+0x97a>
 800e636:	4b84      	ldr	r3, [pc, #528]	@ (800e848 <_dtoa_r+0xb80>)
 800e638:	4602      	mov	r2, r0
 800e63a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e63e:	f7ff bb5a 	b.w	800dcf6 <_dtoa_r+0x2e>
 800e642:	692a      	ldr	r2, [r5, #16]
 800e644:	3202      	adds	r2, #2
 800e646:	0092      	lsls	r2, r2, #2
 800e648:	f105 010c 	add.w	r1, r5, #12
 800e64c:	300c      	adds	r0, #12
 800e64e:	f001 f837 	bl	800f6c0 <memcpy>
 800e652:	2201      	movs	r2, #1
 800e654:	4631      	mov	r1, r6
 800e656:	4658      	mov	r0, fp
 800e658:	f000 fc08 	bl	800ee6c <__lshift>
 800e65c:	f10a 0301 	add.w	r3, sl, #1
 800e660:	9307      	str	r3, [sp, #28]
 800e662:	9b00      	ldr	r3, [sp, #0]
 800e664:	4453      	add	r3, sl
 800e666:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e668:	9b02      	ldr	r3, [sp, #8]
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	462f      	mov	r7, r5
 800e670:	930a      	str	r3, [sp, #40]	@ 0x28
 800e672:	4605      	mov	r5, r0
 800e674:	9b07      	ldr	r3, [sp, #28]
 800e676:	4621      	mov	r1, r4
 800e678:	3b01      	subs	r3, #1
 800e67a:	4648      	mov	r0, r9
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	f7ff fa98 	bl	800dbb2 <quorem>
 800e682:	4639      	mov	r1, r7
 800e684:	9002      	str	r0, [sp, #8]
 800e686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e68a:	4648      	mov	r0, r9
 800e68c:	f000 fc5a 	bl	800ef44 <__mcmp>
 800e690:	462a      	mov	r2, r5
 800e692:	9008      	str	r0, [sp, #32]
 800e694:	4621      	mov	r1, r4
 800e696:	4658      	mov	r0, fp
 800e698:	f000 fc70 	bl	800ef7c <__mdiff>
 800e69c:	68c2      	ldr	r2, [r0, #12]
 800e69e:	4606      	mov	r6, r0
 800e6a0:	bb02      	cbnz	r2, 800e6e4 <_dtoa_r+0xa1c>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4648      	mov	r0, r9
 800e6a6:	f000 fc4d 	bl	800ef44 <__mcmp>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4658      	mov	r0, fp
 800e6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6b2:	f000 fa0d 	bl	800ead0 <_Bfree>
 800e6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6ba:	9e07      	ldr	r6, [sp, #28]
 800e6bc:	ea43 0102 	orr.w	r1, r3, r2
 800e6c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6c2:	4319      	orrs	r1, r3
 800e6c4:	d110      	bne.n	800e6e8 <_dtoa_r+0xa20>
 800e6c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e6ca:	d029      	beq.n	800e720 <_dtoa_r+0xa58>
 800e6cc:	9b08      	ldr	r3, [sp, #32]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dd02      	ble.n	800e6d8 <_dtoa_r+0xa10>
 800e6d2:	9b02      	ldr	r3, [sp, #8]
 800e6d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	f883 8000 	strb.w	r8, [r3]
 800e6de:	e63f      	b.n	800e360 <_dtoa_r+0x698>
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	e7bb      	b.n	800e65c <_dtoa_r+0x994>
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	e7e1      	b.n	800e6ac <_dtoa_r+0x9e4>
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	db04      	blt.n	800e6f8 <_dtoa_r+0xa30>
 800e6ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e6f0:	430b      	orrs	r3, r1
 800e6f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e6f4:	430b      	orrs	r3, r1
 800e6f6:	d120      	bne.n	800e73a <_dtoa_r+0xa72>
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	dded      	ble.n	800e6d8 <_dtoa_r+0xa10>
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	2201      	movs	r2, #1
 800e700:	4658      	mov	r0, fp
 800e702:	f000 fbb3 	bl	800ee6c <__lshift>
 800e706:	4621      	mov	r1, r4
 800e708:	4681      	mov	r9, r0
 800e70a:	f000 fc1b 	bl	800ef44 <__mcmp>
 800e70e:	2800      	cmp	r0, #0
 800e710:	dc03      	bgt.n	800e71a <_dtoa_r+0xa52>
 800e712:	d1e1      	bne.n	800e6d8 <_dtoa_r+0xa10>
 800e714:	f018 0f01 	tst.w	r8, #1
 800e718:	d0de      	beq.n	800e6d8 <_dtoa_r+0xa10>
 800e71a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e71e:	d1d8      	bne.n	800e6d2 <_dtoa_r+0xa0a>
 800e720:	9a00      	ldr	r2, [sp, #0]
 800e722:	2339      	movs	r3, #57	@ 0x39
 800e724:	7013      	strb	r3, [r2, #0]
 800e726:	4633      	mov	r3, r6
 800e728:	461e      	mov	r6, r3
 800e72a:	3b01      	subs	r3, #1
 800e72c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e730:	2a39      	cmp	r2, #57	@ 0x39
 800e732:	d052      	beq.n	800e7da <_dtoa_r+0xb12>
 800e734:	3201      	adds	r2, #1
 800e736:	701a      	strb	r2, [r3, #0]
 800e738:	e612      	b.n	800e360 <_dtoa_r+0x698>
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	dd07      	ble.n	800e74e <_dtoa_r+0xa86>
 800e73e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e742:	d0ed      	beq.n	800e720 <_dtoa_r+0xa58>
 800e744:	9a00      	ldr	r2, [sp, #0]
 800e746:	f108 0301 	add.w	r3, r8, #1
 800e74a:	7013      	strb	r3, [r2, #0]
 800e74c:	e608      	b.n	800e360 <_dtoa_r+0x698>
 800e74e:	9b07      	ldr	r3, [sp, #28]
 800e750:	9a07      	ldr	r2, [sp, #28]
 800e752:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e758:	4293      	cmp	r3, r2
 800e75a:	d028      	beq.n	800e7ae <_dtoa_r+0xae6>
 800e75c:	4649      	mov	r1, r9
 800e75e:	2300      	movs	r3, #0
 800e760:	220a      	movs	r2, #10
 800e762:	4658      	mov	r0, fp
 800e764:	f000 f9d6 	bl	800eb14 <__multadd>
 800e768:	42af      	cmp	r7, r5
 800e76a:	4681      	mov	r9, r0
 800e76c:	f04f 0300 	mov.w	r3, #0
 800e770:	f04f 020a 	mov.w	r2, #10
 800e774:	4639      	mov	r1, r7
 800e776:	4658      	mov	r0, fp
 800e778:	d107      	bne.n	800e78a <_dtoa_r+0xac2>
 800e77a:	f000 f9cb 	bl	800eb14 <__multadd>
 800e77e:	4607      	mov	r7, r0
 800e780:	4605      	mov	r5, r0
 800e782:	9b07      	ldr	r3, [sp, #28]
 800e784:	3301      	adds	r3, #1
 800e786:	9307      	str	r3, [sp, #28]
 800e788:	e774      	b.n	800e674 <_dtoa_r+0x9ac>
 800e78a:	f000 f9c3 	bl	800eb14 <__multadd>
 800e78e:	4629      	mov	r1, r5
 800e790:	4607      	mov	r7, r0
 800e792:	2300      	movs	r3, #0
 800e794:	220a      	movs	r2, #10
 800e796:	4658      	mov	r0, fp
 800e798:	f000 f9bc 	bl	800eb14 <__multadd>
 800e79c:	4605      	mov	r5, r0
 800e79e:	e7f0      	b.n	800e782 <_dtoa_r+0xaba>
 800e7a0:	9b00      	ldr	r3, [sp, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	bfcc      	ite	gt
 800e7a6:	461e      	movgt	r6, r3
 800e7a8:	2601      	movle	r6, #1
 800e7aa:	4456      	add	r6, sl
 800e7ac:	2700      	movs	r7, #0
 800e7ae:	4649      	mov	r1, r9
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	4658      	mov	r0, fp
 800e7b4:	f000 fb5a 	bl	800ee6c <__lshift>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4681      	mov	r9, r0
 800e7bc:	f000 fbc2 	bl	800ef44 <__mcmp>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	dcb0      	bgt.n	800e726 <_dtoa_r+0xa5e>
 800e7c4:	d102      	bne.n	800e7cc <_dtoa_r+0xb04>
 800e7c6:	f018 0f01 	tst.w	r8, #1
 800e7ca:	d1ac      	bne.n	800e726 <_dtoa_r+0xa5e>
 800e7cc:	4633      	mov	r3, r6
 800e7ce:	461e      	mov	r6, r3
 800e7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7d4:	2a30      	cmp	r2, #48	@ 0x30
 800e7d6:	d0fa      	beq.n	800e7ce <_dtoa_r+0xb06>
 800e7d8:	e5c2      	b.n	800e360 <_dtoa_r+0x698>
 800e7da:	459a      	cmp	sl, r3
 800e7dc:	d1a4      	bne.n	800e728 <_dtoa_r+0xa60>
 800e7de:	9b04      	ldr	r3, [sp, #16]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	9304      	str	r3, [sp, #16]
 800e7e4:	2331      	movs	r3, #49	@ 0x31
 800e7e6:	f88a 3000 	strb.w	r3, [sl]
 800e7ea:	e5b9      	b.n	800e360 <_dtoa_r+0x698>
 800e7ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e7ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e84c <_dtoa_r+0xb84>
 800e7f2:	b11b      	cbz	r3, 800e7fc <_dtoa_r+0xb34>
 800e7f4:	f10a 0308 	add.w	r3, sl, #8
 800e7f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	4650      	mov	r0, sl
 800e7fe:	b019      	add	sp, #100	@ 0x64
 800e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e806:	2b01      	cmp	r3, #1
 800e808:	f77f ae37 	ble.w	800e47a <_dtoa_r+0x7b2>
 800e80c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e810:	2001      	movs	r0, #1
 800e812:	e655      	b.n	800e4c0 <_dtoa_r+0x7f8>
 800e814:	9b00      	ldr	r3, [sp, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f77f aed6 	ble.w	800e5c8 <_dtoa_r+0x900>
 800e81c:	4656      	mov	r6, sl
 800e81e:	4621      	mov	r1, r4
 800e820:	4648      	mov	r0, r9
 800e822:	f7ff f9c6 	bl	800dbb2 <quorem>
 800e826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e82a:	f806 8b01 	strb.w	r8, [r6], #1
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	eba6 020a 	sub.w	r2, r6, sl
 800e834:	4293      	cmp	r3, r2
 800e836:	ddb3      	ble.n	800e7a0 <_dtoa_r+0xad8>
 800e838:	4649      	mov	r1, r9
 800e83a:	2300      	movs	r3, #0
 800e83c:	220a      	movs	r2, #10
 800e83e:	4658      	mov	r0, fp
 800e840:	f000 f968 	bl	800eb14 <__multadd>
 800e844:	4681      	mov	r9, r0
 800e846:	e7ea      	b.n	800e81e <_dtoa_r+0xb56>
 800e848:	08010169 	.word	0x08010169
 800e84c:	080100ed 	.word	0x080100ed

0800e850 <_free_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4605      	mov	r5, r0
 800e854:	2900      	cmp	r1, #0
 800e856:	d041      	beq.n	800e8dc <_free_r+0x8c>
 800e858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e85c:	1f0c      	subs	r4, r1, #4
 800e85e:	2b00      	cmp	r3, #0
 800e860:	bfb8      	it	lt
 800e862:	18e4      	addlt	r4, r4, r3
 800e864:	f000 f8e8 	bl	800ea38 <__malloc_lock>
 800e868:	4a1d      	ldr	r2, [pc, #116]	@ (800e8e0 <_free_r+0x90>)
 800e86a:	6813      	ldr	r3, [r2, #0]
 800e86c:	b933      	cbnz	r3, 800e87c <_free_r+0x2c>
 800e86e:	6063      	str	r3, [r4, #4]
 800e870:	6014      	str	r4, [r2, #0]
 800e872:	4628      	mov	r0, r5
 800e874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e878:	f000 b8e4 	b.w	800ea44 <__malloc_unlock>
 800e87c:	42a3      	cmp	r3, r4
 800e87e:	d908      	bls.n	800e892 <_free_r+0x42>
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	1821      	adds	r1, r4, r0
 800e884:	428b      	cmp	r3, r1
 800e886:	bf01      	itttt	eq
 800e888:	6819      	ldreq	r1, [r3, #0]
 800e88a:	685b      	ldreq	r3, [r3, #4]
 800e88c:	1809      	addeq	r1, r1, r0
 800e88e:	6021      	streq	r1, [r4, #0]
 800e890:	e7ed      	b.n	800e86e <_free_r+0x1e>
 800e892:	461a      	mov	r2, r3
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	b10b      	cbz	r3, 800e89c <_free_r+0x4c>
 800e898:	42a3      	cmp	r3, r4
 800e89a:	d9fa      	bls.n	800e892 <_free_r+0x42>
 800e89c:	6811      	ldr	r1, [r2, #0]
 800e89e:	1850      	adds	r0, r2, r1
 800e8a0:	42a0      	cmp	r0, r4
 800e8a2:	d10b      	bne.n	800e8bc <_free_r+0x6c>
 800e8a4:	6820      	ldr	r0, [r4, #0]
 800e8a6:	4401      	add	r1, r0
 800e8a8:	1850      	adds	r0, r2, r1
 800e8aa:	4283      	cmp	r3, r0
 800e8ac:	6011      	str	r1, [r2, #0]
 800e8ae:	d1e0      	bne.n	800e872 <_free_r+0x22>
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	6053      	str	r3, [r2, #4]
 800e8b6:	4408      	add	r0, r1
 800e8b8:	6010      	str	r0, [r2, #0]
 800e8ba:	e7da      	b.n	800e872 <_free_r+0x22>
 800e8bc:	d902      	bls.n	800e8c4 <_free_r+0x74>
 800e8be:	230c      	movs	r3, #12
 800e8c0:	602b      	str	r3, [r5, #0]
 800e8c2:	e7d6      	b.n	800e872 <_free_r+0x22>
 800e8c4:	6820      	ldr	r0, [r4, #0]
 800e8c6:	1821      	adds	r1, r4, r0
 800e8c8:	428b      	cmp	r3, r1
 800e8ca:	bf04      	itt	eq
 800e8cc:	6819      	ldreq	r1, [r3, #0]
 800e8ce:	685b      	ldreq	r3, [r3, #4]
 800e8d0:	6063      	str	r3, [r4, #4]
 800e8d2:	bf04      	itt	eq
 800e8d4:	1809      	addeq	r1, r1, r0
 800e8d6:	6021      	streq	r1, [r4, #0]
 800e8d8:	6054      	str	r4, [r2, #4]
 800e8da:	e7ca      	b.n	800e872 <_free_r+0x22>
 800e8dc:	bd38      	pop	{r3, r4, r5, pc}
 800e8de:	bf00      	nop
 800e8e0:	20000c68 	.word	0x20000c68

0800e8e4 <malloc>:
 800e8e4:	4b02      	ldr	r3, [pc, #8]	@ (800e8f0 <malloc+0xc>)
 800e8e6:	4601      	mov	r1, r0
 800e8e8:	6818      	ldr	r0, [r3, #0]
 800e8ea:	f000 b825 	b.w	800e938 <_malloc_r>
 800e8ee:	bf00      	nop
 800e8f0:	20000080 	.word	0x20000080

0800e8f4 <sbrk_aligned>:
 800e8f4:	b570      	push	{r4, r5, r6, lr}
 800e8f6:	4e0f      	ldr	r6, [pc, #60]	@ (800e934 <sbrk_aligned+0x40>)
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	6831      	ldr	r1, [r6, #0]
 800e8fc:	4605      	mov	r5, r0
 800e8fe:	b911      	cbnz	r1, 800e906 <sbrk_aligned+0x12>
 800e900:	f000 fece 	bl	800f6a0 <_sbrk_r>
 800e904:	6030      	str	r0, [r6, #0]
 800e906:	4621      	mov	r1, r4
 800e908:	4628      	mov	r0, r5
 800e90a:	f000 fec9 	bl	800f6a0 <_sbrk_r>
 800e90e:	1c43      	adds	r3, r0, #1
 800e910:	d103      	bne.n	800e91a <sbrk_aligned+0x26>
 800e912:	f04f 34ff 	mov.w	r4, #4294967295
 800e916:	4620      	mov	r0, r4
 800e918:	bd70      	pop	{r4, r5, r6, pc}
 800e91a:	1cc4      	adds	r4, r0, #3
 800e91c:	f024 0403 	bic.w	r4, r4, #3
 800e920:	42a0      	cmp	r0, r4
 800e922:	d0f8      	beq.n	800e916 <sbrk_aligned+0x22>
 800e924:	1a21      	subs	r1, r4, r0
 800e926:	4628      	mov	r0, r5
 800e928:	f000 feba 	bl	800f6a0 <_sbrk_r>
 800e92c:	3001      	adds	r0, #1
 800e92e:	d1f2      	bne.n	800e916 <sbrk_aligned+0x22>
 800e930:	e7ef      	b.n	800e912 <sbrk_aligned+0x1e>
 800e932:	bf00      	nop
 800e934:	20000c64 	.word	0x20000c64

0800e938 <_malloc_r>:
 800e938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e93c:	1ccd      	adds	r5, r1, #3
 800e93e:	f025 0503 	bic.w	r5, r5, #3
 800e942:	3508      	adds	r5, #8
 800e944:	2d0c      	cmp	r5, #12
 800e946:	bf38      	it	cc
 800e948:	250c      	movcc	r5, #12
 800e94a:	2d00      	cmp	r5, #0
 800e94c:	4606      	mov	r6, r0
 800e94e:	db01      	blt.n	800e954 <_malloc_r+0x1c>
 800e950:	42a9      	cmp	r1, r5
 800e952:	d904      	bls.n	800e95e <_malloc_r+0x26>
 800e954:	230c      	movs	r3, #12
 800e956:	6033      	str	r3, [r6, #0]
 800e958:	2000      	movs	r0, #0
 800e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea34 <_malloc_r+0xfc>
 800e962:	f000 f869 	bl	800ea38 <__malloc_lock>
 800e966:	f8d8 3000 	ldr.w	r3, [r8]
 800e96a:	461c      	mov	r4, r3
 800e96c:	bb44      	cbnz	r4, 800e9c0 <_malloc_r+0x88>
 800e96e:	4629      	mov	r1, r5
 800e970:	4630      	mov	r0, r6
 800e972:	f7ff ffbf 	bl	800e8f4 <sbrk_aligned>
 800e976:	1c43      	adds	r3, r0, #1
 800e978:	4604      	mov	r4, r0
 800e97a:	d158      	bne.n	800ea2e <_malloc_r+0xf6>
 800e97c:	f8d8 4000 	ldr.w	r4, [r8]
 800e980:	4627      	mov	r7, r4
 800e982:	2f00      	cmp	r7, #0
 800e984:	d143      	bne.n	800ea0e <_malloc_r+0xd6>
 800e986:	2c00      	cmp	r4, #0
 800e988:	d04b      	beq.n	800ea22 <_malloc_r+0xea>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	4639      	mov	r1, r7
 800e98e:	4630      	mov	r0, r6
 800e990:	eb04 0903 	add.w	r9, r4, r3
 800e994:	f000 fe84 	bl	800f6a0 <_sbrk_r>
 800e998:	4581      	cmp	r9, r0
 800e99a:	d142      	bne.n	800ea22 <_malloc_r+0xea>
 800e99c:	6821      	ldr	r1, [r4, #0]
 800e99e:	1a6d      	subs	r5, r5, r1
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffa6 	bl	800e8f4 <sbrk_aligned>
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	d03a      	beq.n	800ea22 <_malloc_r+0xea>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	442b      	add	r3, r5
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	bb62      	cbnz	r2, 800ea14 <_malloc_r+0xdc>
 800e9ba:	f8c8 7000 	str.w	r7, [r8]
 800e9be:	e00f      	b.n	800e9e0 <_malloc_r+0xa8>
 800e9c0:	6822      	ldr	r2, [r4, #0]
 800e9c2:	1b52      	subs	r2, r2, r5
 800e9c4:	d420      	bmi.n	800ea08 <_malloc_r+0xd0>
 800e9c6:	2a0b      	cmp	r2, #11
 800e9c8:	d917      	bls.n	800e9fa <_malloc_r+0xc2>
 800e9ca:	1961      	adds	r1, r4, r5
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	6025      	str	r5, [r4, #0]
 800e9d0:	bf18      	it	ne
 800e9d2:	6059      	strne	r1, [r3, #4]
 800e9d4:	6863      	ldr	r3, [r4, #4]
 800e9d6:	bf08      	it	eq
 800e9d8:	f8c8 1000 	streq.w	r1, [r8]
 800e9dc:	5162      	str	r2, [r4, r5]
 800e9de:	604b      	str	r3, [r1, #4]
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f000 f82f 	bl	800ea44 <__malloc_unlock>
 800e9e6:	f104 000b 	add.w	r0, r4, #11
 800e9ea:	1d23      	adds	r3, r4, #4
 800e9ec:	f020 0007 	bic.w	r0, r0, #7
 800e9f0:	1ac2      	subs	r2, r0, r3
 800e9f2:	bf1c      	itt	ne
 800e9f4:	1a1b      	subne	r3, r3, r0
 800e9f6:	50a3      	strne	r3, [r4, r2]
 800e9f8:	e7af      	b.n	800e95a <_malloc_r+0x22>
 800e9fa:	6862      	ldr	r2, [r4, #4]
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	bf0c      	ite	eq
 800ea00:	f8c8 2000 	streq.w	r2, [r8]
 800ea04:	605a      	strne	r2, [r3, #4]
 800ea06:	e7eb      	b.n	800e9e0 <_malloc_r+0xa8>
 800ea08:	4623      	mov	r3, r4
 800ea0a:	6864      	ldr	r4, [r4, #4]
 800ea0c:	e7ae      	b.n	800e96c <_malloc_r+0x34>
 800ea0e:	463c      	mov	r4, r7
 800ea10:	687f      	ldr	r7, [r7, #4]
 800ea12:	e7b6      	b.n	800e982 <_malloc_r+0x4a>
 800ea14:	461a      	mov	r2, r3
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	42a3      	cmp	r3, r4
 800ea1a:	d1fb      	bne.n	800ea14 <_malloc_r+0xdc>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	6053      	str	r3, [r2, #4]
 800ea20:	e7de      	b.n	800e9e0 <_malloc_r+0xa8>
 800ea22:	230c      	movs	r3, #12
 800ea24:	6033      	str	r3, [r6, #0]
 800ea26:	4630      	mov	r0, r6
 800ea28:	f000 f80c 	bl	800ea44 <__malloc_unlock>
 800ea2c:	e794      	b.n	800e958 <_malloc_r+0x20>
 800ea2e:	6005      	str	r5, [r0, #0]
 800ea30:	e7d6      	b.n	800e9e0 <_malloc_r+0xa8>
 800ea32:	bf00      	nop
 800ea34:	20000c68 	.word	0x20000c68

0800ea38 <__malloc_lock>:
 800ea38:	4801      	ldr	r0, [pc, #4]	@ (800ea40 <__malloc_lock+0x8>)
 800ea3a:	f7ff b8b0 	b.w	800db9e <__retarget_lock_acquire_recursive>
 800ea3e:	bf00      	nop
 800ea40:	20000c60 	.word	0x20000c60

0800ea44 <__malloc_unlock>:
 800ea44:	4801      	ldr	r0, [pc, #4]	@ (800ea4c <__malloc_unlock+0x8>)
 800ea46:	f7ff b8ab 	b.w	800dba0 <__retarget_lock_release_recursive>
 800ea4a:	bf00      	nop
 800ea4c:	20000c60 	.word	0x20000c60

0800ea50 <_Balloc>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	69c6      	ldr	r6, [r0, #28]
 800ea54:	4604      	mov	r4, r0
 800ea56:	460d      	mov	r5, r1
 800ea58:	b976      	cbnz	r6, 800ea78 <_Balloc+0x28>
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	f7ff ff42 	bl	800e8e4 <malloc>
 800ea60:	4602      	mov	r2, r0
 800ea62:	61e0      	str	r0, [r4, #28]
 800ea64:	b920      	cbnz	r0, 800ea70 <_Balloc+0x20>
 800ea66:	4b18      	ldr	r3, [pc, #96]	@ (800eac8 <_Balloc+0x78>)
 800ea68:	4818      	ldr	r0, [pc, #96]	@ (800eacc <_Balloc+0x7c>)
 800ea6a:	216b      	movs	r1, #107	@ 0x6b
 800ea6c:	f000 fe36 	bl	800f6dc <__assert_func>
 800ea70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea74:	6006      	str	r6, [r0, #0]
 800ea76:	60c6      	str	r6, [r0, #12]
 800ea78:	69e6      	ldr	r6, [r4, #28]
 800ea7a:	68f3      	ldr	r3, [r6, #12]
 800ea7c:	b183      	cbz	r3, 800eaa0 <_Balloc+0x50>
 800ea7e:	69e3      	ldr	r3, [r4, #28]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea86:	b9b8      	cbnz	r0, 800eab8 <_Balloc+0x68>
 800ea88:	2101      	movs	r1, #1
 800ea8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea8e:	1d72      	adds	r2, r6, #5
 800ea90:	0092      	lsls	r2, r2, #2
 800ea92:	4620      	mov	r0, r4
 800ea94:	f000 fe40 	bl	800f718 <_calloc_r>
 800ea98:	b160      	cbz	r0, 800eab4 <_Balloc+0x64>
 800ea9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea9e:	e00e      	b.n	800eabe <_Balloc+0x6e>
 800eaa0:	2221      	movs	r2, #33	@ 0x21
 800eaa2:	2104      	movs	r1, #4
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f000 fe37 	bl	800f718 <_calloc_r>
 800eaaa:	69e3      	ldr	r3, [r4, #28]
 800eaac:	60f0      	str	r0, [r6, #12]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1e4      	bne.n	800ea7e <_Balloc+0x2e>
 800eab4:	2000      	movs	r0, #0
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	6802      	ldr	r2, [r0, #0]
 800eaba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eabe:	2300      	movs	r3, #0
 800eac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eac4:	e7f7      	b.n	800eab6 <_Balloc+0x66>
 800eac6:	bf00      	nop
 800eac8:	080100fa 	.word	0x080100fa
 800eacc:	0801017a 	.word	0x0801017a

0800ead0 <_Bfree>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	69c6      	ldr	r6, [r0, #28]
 800ead4:	4605      	mov	r5, r0
 800ead6:	460c      	mov	r4, r1
 800ead8:	b976      	cbnz	r6, 800eaf8 <_Bfree+0x28>
 800eada:	2010      	movs	r0, #16
 800eadc:	f7ff ff02 	bl	800e8e4 <malloc>
 800eae0:	4602      	mov	r2, r0
 800eae2:	61e8      	str	r0, [r5, #28]
 800eae4:	b920      	cbnz	r0, 800eaf0 <_Bfree+0x20>
 800eae6:	4b09      	ldr	r3, [pc, #36]	@ (800eb0c <_Bfree+0x3c>)
 800eae8:	4809      	ldr	r0, [pc, #36]	@ (800eb10 <_Bfree+0x40>)
 800eaea:	218f      	movs	r1, #143	@ 0x8f
 800eaec:	f000 fdf6 	bl	800f6dc <__assert_func>
 800eaf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf4:	6006      	str	r6, [r0, #0]
 800eaf6:	60c6      	str	r6, [r0, #12]
 800eaf8:	b13c      	cbz	r4, 800eb0a <_Bfree+0x3a>
 800eafa:	69eb      	ldr	r3, [r5, #28]
 800eafc:	6862      	ldr	r2, [r4, #4]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb04:	6021      	str	r1, [r4, #0]
 800eb06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb0a:	bd70      	pop	{r4, r5, r6, pc}
 800eb0c:	080100fa 	.word	0x080100fa
 800eb10:	0801017a 	.word	0x0801017a

0800eb14 <__multadd>:
 800eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb18:	690d      	ldr	r5, [r1, #16]
 800eb1a:	4607      	mov	r7, r0
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	461e      	mov	r6, r3
 800eb20:	f101 0c14 	add.w	ip, r1, #20
 800eb24:	2000      	movs	r0, #0
 800eb26:	f8dc 3000 	ldr.w	r3, [ip]
 800eb2a:	b299      	uxth	r1, r3
 800eb2c:	fb02 6101 	mla	r1, r2, r1, r6
 800eb30:	0c1e      	lsrs	r6, r3, #16
 800eb32:	0c0b      	lsrs	r3, r1, #16
 800eb34:	fb02 3306 	mla	r3, r2, r6, r3
 800eb38:	b289      	uxth	r1, r1
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb40:	4285      	cmp	r5, r0
 800eb42:	f84c 1b04 	str.w	r1, [ip], #4
 800eb46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb4a:	dcec      	bgt.n	800eb26 <__multadd+0x12>
 800eb4c:	b30e      	cbz	r6, 800eb92 <__multadd+0x7e>
 800eb4e:	68a3      	ldr	r3, [r4, #8]
 800eb50:	42ab      	cmp	r3, r5
 800eb52:	dc19      	bgt.n	800eb88 <__multadd+0x74>
 800eb54:	6861      	ldr	r1, [r4, #4]
 800eb56:	4638      	mov	r0, r7
 800eb58:	3101      	adds	r1, #1
 800eb5a:	f7ff ff79 	bl	800ea50 <_Balloc>
 800eb5e:	4680      	mov	r8, r0
 800eb60:	b928      	cbnz	r0, 800eb6e <__multadd+0x5a>
 800eb62:	4602      	mov	r2, r0
 800eb64:	4b0c      	ldr	r3, [pc, #48]	@ (800eb98 <__multadd+0x84>)
 800eb66:	480d      	ldr	r0, [pc, #52]	@ (800eb9c <__multadd+0x88>)
 800eb68:	21ba      	movs	r1, #186	@ 0xba
 800eb6a:	f000 fdb7 	bl	800f6dc <__assert_func>
 800eb6e:	6922      	ldr	r2, [r4, #16]
 800eb70:	3202      	adds	r2, #2
 800eb72:	f104 010c 	add.w	r1, r4, #12
 800eb76:	0092      	lsls	r2, r2, #2
 800eb78:	300c      	adds	r0, #12
 800eb7a:	f000 fda1 	bl	800f6c0 <memcpy>
 800eb7e:	4621      	mov	r1, r4
 800eb80:	4638      	mov	r0, r7
 800eb82:	f7ff ffa5 	bl	800ead0 <_Bfree>
 800eb86:	4644      	mov	r4, r8
 800eb88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb8c:	3501      	adds	r5, #1
 800eb8e:	615e      	str	r6, [r3, #20]
 800eb90:	6125      	str	r5, [r4, #16]
 800eb92:	4620      	mov	r0, r4
 800eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb98:	08010169 	.word	0x08010169
 800eb9c:	0801017a 	.word	0x0801017a

0800eba0 <__hi0bits>:
 800eba0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eba4:	4603      	mov	r3, r0
 800eba6:	bf36      	itet	cc
 800eba8:	0403      	lslcc	r3, r0, #16
 800ebaa:	2000      	movcs	r0, #0
 800ebac:	2010      	movcc	r0, #16
 800ebae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebb2:	bf3c      	itt	cc
 800ebb4:	021b      	lslcc	r3, r3, #8
 800ebb6:	3008      	addcc	r0, #8
 800ebb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebbc:	bf3c      	itt	cc
 800ebbe:	011b      	lslcc	r3, r3, #4
 800ebc0:	3004      	addcc	r0, #4
 800ebc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebc6:	bf3c      	itt	cc
 800ebc8:	009b      	lslcc	r3, r3, #2
 800ebca:	3002      	addcc	r0, #2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	db05      	blt.n	800ebdc <__hi0bits+0x3c>
 800ebd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ebd4:	f100 0001 	add.w	r0, r0, #1
 800ebd8:	bf08      	it	eq
 800ebda:	2020      	moveq	r0, #32
 800ebdc:	4770      	bx	lr

0800ebde <__lo0bits>:
 800ebde:	6803      	ldr	r3, [r0, #0]
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	f013 0007 	ands.w	r0, r3, #7
 800ebe6:	d00b      	beq.n	800ec00 <__lo0bits+0x22>
 800ebe8:	07d9      	lsls	r1, r3, #31
 800ebea:	d421      	bmi.n	800ec30 <__lo0bits+0x52>
 800ebec:	0798      	lsls	r0, r3, #30
 800ebee:	bf49      	itett	mi
 800ebf0:	085b      	lsrmi	r3, r3, #1
 800ebf2:	089b      	lsrpl	r3, r3, #2
 800ebf4:	2001      	movmi	r0, #1
 800ebf6:	6013      	strmi	r3, [r2, #0]
 800ebf8:	bf5c      	itt	pl
 800ebfa:	6013      	strpl	r3, [r2, #0]
 800ebfc:	2002      	movpl	r0, #2
 800ebfe:	4770      	bx	lr
 800ec00:	b299      	uxth	r1, r3
 800ec02:	b909      	cbnz	r1, 800ec08 <__lo0bits+0x2a>
 800ec04:	0c1b      	lsrs	r3, r3, #16
 800ec06:	2010      	movs	r0, #16
 800ec08:	b2d9      	uxtb	r1, r3
 800ec0a:	b909      	cbnz	r1, 800ec10 <__lo0bits+0x32>
 800ec0c:	3008      	adds	r0, #8
 800ec0e:	0a1b      	lsrs	r3, r3, #8
 800ec10:	0719      	lsls	r1, r3, #28
 800ec12:	bf04      	itt	eq
 800ec14:	091b      	lsreq	r3, r3, #4
 800ec16:	3004      	addeq	r0, #4
 800ec18:	0799      	lsls	r1, r3, #30
 800ec1a:	bf04      	itt	eq
 800ec1c:	089b      	lsreq	r3, r3, #2
 800ec1e:	3002      	addeq	r0, #2
 800ec20:	07d9      	lsls	r1, r3, #31
 800ec22:	d403      	bmi.n	800ec2c <__lo0bits+0x4e>
 800ec24:	085b      	lsrs	r3, r3, #1
 800ec26:	f100 0001 	add.w	r0, r0, #1
 800ec2a:	d003      	beq.n	800ec34 <__lo0bits+0x56>
 800ec2c:	6013      	str	r3, [r2, #0]
 800ec2e:	4770      	bx	lr
 800ec30:	2000      	movs	r0, #0
 800ec32:	4770      	bx	lr
 800ec34:	2020      	movs	r0, #32
 800ec36:	4770      	bx	lr

0800ec38 <__i2b>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	2101      	movs	r1, #1
 800ec3e:	f7ff ff07 	bl	800ea50 <_Balloc>
 800ec42:	4602      	mov	r2, r0
 800ec44:	b928      	cbnz	r0, 800ec52 <__i2b+0x1a>
 800ec46:	4b05      	ldr	r3, [pc, #20]	@ (800ec5c <__i2b+0x24>)
 800ec48:	4805      	ldr	r0, [pc, #20]	@ (800ec60 <__i2b+0x28>)
 800ec4a:	f240 1145 	movw	r1, #325	@ 0x145
 800ec4e:	f000 fd45 	bl	800f6dc <__assert_func>
 800ec52:	2301      	movs	r3, #1
 800ec54:	6144      	str	r4, [r0, #20]
 800ec56:	6103      	str	r3, [r0, #16]
 800ec58:	bd10      	pop	{r4, pc}
 800ec5a:	bf00      	nop
 800ec5c:	08010169 	.word	0x08010169
 800ec60:	0801017a 	.word	0x0801017a

0800ec64 <__multiply>:
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	4614      	mov	r4, r2
 800ec6a:	690a      	ldr	r2, [r1, #16]
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	bfa8      	it	ge
 800ec72:	4623      	movge	r3, r4
 800ec74:	460f      	mov	r7, r1
 800ec76:	bfa4      	itt	ge
 800ec78:	460c      	movge	r4, r1
 800ec7a:	461f      	movge	r7, r3
 800ec7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ec80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ec84:	68a3      	ldr	r3, [r4, #8]
 800ec86:	6861      	ldr	r1, [r4, #4]
 800ec88:	eb0a 0609 	add.w	r6, sl, r9
 800ec8c:	42b3      	cmp	r3, r6
 800ec8e:	b085      	sub	sp, #20
 800ec90:	bfb8      	it	lt
 800ec92:	3101      	addlt	r1, #1
 800ec94:	f7ff fedc 	bl	800ea50 <_Balloc>
 800ec98:	b930      	cbnz	r0, 800eca8 <__multiply+0x44>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4b44      	ldr	r3, [pc, #272]	@ (800edb0 <__multiply+0x14c>)
 800ec9e:	4845      	ldr	r0, [pc, #276]	@ (800edb4 <__multiply+0x150>)
 800eca0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eca4:	f000 fd1a 	bl	800f6dc <__assert_func>
 800eca8:	f100 0514 	add.w	r5, r0, #20
 800ecac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecb0:	462b      	mov	r3, r5
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4543      	cmp	r3, r8
 800ecb6:	d321      	bcc.n	800ecfc <__multiply+0x98>
 800ecb8:	f107 0114 	add.w	r1, r7, #20
 800ecbc:	f104 0214 	add.w	r2, r4, #20
 800ecc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ecc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ecc8:	9302      	str	r3, [sp, #8]
 800ecca:	1b13      	subs	r3, r2, r4
 800eccc:	3b15      	subs	r3, #21
 800ecce:	f023 0303 	bic.w	r3, r3, #3
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	f104 0715 	add.w	r7, r4, #21
 800ecd8:	42ba      	cmp	r2, r7
 800ecda:	bf38      	it	cc
 800ecdc:	2304      	movcc	r3, #4
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	9b02      	ldr	r3, [sp, #8]
 800ece2:	9103      	str	r1, [sp, #12]
 800ece4:	428b      	cmp	r3, r1
 800ece6:	d80c      	bhi.n	800ed02 <__multiply+0x9e>
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	dd03      	ble.n	800ecf4 <__multiply+0x90>
 800ecec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d05b      	beq.n	800edac <__multiply+0x148>
 800ecf4:	6106      	str	r6, [r0, #16]
 800ecf6:	b005      	add	sp, #20
 800ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfc:	f843 2b04 	str.w	r2, [r3], #4
 800ed00:	e7d8      	b.n	800ecb4 <__multiply+0x50>
 800ed02:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed06:	f1ba 0f00 	cmp.w	sl, #0
 800ed0a:	d024      	beq.n	800ed56 <__multiply+0xf2>
 800ed0c:	f104 0e14 	add.w	lr, r4, #20
 800ed10:	46a9      	mov	r9, r5
 800ed12:	f04f 0c00 	mov.w	ip, #0
 800ed16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed1a:	f8d9 3000 	ldr.w	r3, [r9]
 800ed1e:	fa1f fb87 	uxth.w	fp, r7
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed2c:	f8d9 7000 	ldr.w	r7, [r9]
 800ed30:	4463      	add	r3, ip
 800ed32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed36:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed44:	4572      	cmp	r2, lr
 800ed46:	f849 3b04 	str.w	r3, [r9], #4
 800ed4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed4e:	d8e2      	bhi.n	800ed16 <__multiply+0xb2>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	f845 c003 	str.w	ip, [r5, r3]
 800ed56:	9b03      	ldr	r3, [sp, #12]
 800ed58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed5c:	3104      	adds	r1, #4
 800ed5e:	f1b9 0f00 	cmp.w	r9, #0
 800ed62:	d021      	beq.n	800eda8 <__multiply+0x144>
 800ed64:	682b      	ldr	r3, [r5, #0]
 800ed66:	f104 0c14 	add.w	ip, r4, #20
 800ed6a:	46ae      	mov	lr, r5
 800ed6c:	f04f 0a00 	mov.w	sl, #0
 800ed70:	f8bc b000 	ldrh.w	fp, [ip]
 800ed74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ed78:	fb09 770b 	mla	r7, r9, fp, r7
 800ed7c:	4457      	add	r7, sl
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed84:	f84e 3b04 	str.w	r3, [lr], #4
 800ed88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed90:	f8be 3000 	ldrh.w	r3, [lr]
 800ed94:	fb09 330a 	mla	r3, r9, sl, r3
 800ed98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ed9c:	4562      	cmp	r2, ip
 800ed9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eda2:	d8e5      	bhi.n	800ed70 <__multiply+0x10c>
 800eda4:	9f01      	ldr	r7, [sp, #4]
 800eda6:	51eb      	str	r3, [r5, r7]
 800eda8:	3504      	adds	r5, #4
 800edaa:	e799      	b.n	800ece0 <__multiply+0x7c>
 800edac:	3e01      	subs	r6, #1
 800edae:	e79b      	b.n	800ece8 <__multiply+0x84>
 800edb0:	08010169 	.word	0x08010169
 800edb4:	0801017a 	.word	0x0801017a

0800edb8 <__pow5mult>:
 800edb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edbc:	4615      	mov	r5, r2
 800edbe:	f012 0203 	ands.w	r2, r2, #3
 800edc2:	4607      	mov	r7, r0
 800edc4:	460e      	mov	r6, r1
 800edc6:	d007      	beq.n	800edd8 <__pow5mult+0x20>
 800edc8:	4c25      	ldr	r4, [pc, #148]	@ (800ee60 <__pow5mult+0xa8>)
 800edca:	3a01      	subs	r2, #1
 800edcc:	2300      	movs	r3, #0
 800edce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edd2:	f7ff fe9f 	bl	800eb14 <__multadd>
 800edd6:	4606      	mov	r6, r0
 800edd8:	10ad      	asrs	r5, r5, #2
 800edda:	d03d      	beq.n	800ee58 <__pow5mult+0xa0>
 800eddc:	69fc      	ldr	r4, [r7, #28]
 800edde:	b97c      	cbnz	r4, 800ee00 <__pow5mult+0x48>
 800ede0:	2010      	movs	r0, #16
 800ede2:	f7ff fd7f 	bl	800e8e4 <malloc>
 800ede6:	4602      	mov	r2, r0
 800ede8:	61f8      	str	r0, [r7, #28]
 800edea:	b928      	cbnz	r0, 800edf8 <__pow5mult+0x40>
 800edec:	4b1d      	ldr	r3, [pc, #116]	@ (800ee64 <__pow5mult+0xac>)
 800edee:	481e      	ldr	r0, [pc, #120]	@ (800ee68 <__pow5mult+0xb0>)
 800edf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800edf4:	f000 fc72 	bl	800f6dc <__assert_func>
 800edf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edfc:	6004      	str	r4, [r0, #0]
 800edfe:	60c4      	str	r4, [r0, #12]
 800ee00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee08:	b94c      	cbnz	r4, 800ee1e <__pow5mult+0x66>
 800ee0a:	f240 2171 	movw	r1, #625	@ 0x271
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f7ff ff12 	bl	800ec38 <__i2b>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	6003      	str	r3, [r0, #0]
 800ee1e:	f04f 0900 	mov.w	r9, #0
 800ee22:	07eb      	lsls	r3, r5, #31
 800ee24:	d50a      	bpl.n	800ee3c <__pow5mult+0x84>
 800ee26:	4631      	mov	r1, r6
 800ee28:	4622      	mov	r2, r4
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f7ff ff1a 	bl	800ec64 <__multiply>
 800ee30:	4631      	mov	r1, r6
 800ee32:	4680      	mov	r8, r0
 800ee34:	4638      	mov	r0, r7
 800ee36:	f7ff fe4b 	bl	800ead0 <_Bfree>
 800ee3a:	4646      	mov	r6, r8
 800ee3c:	106d      	asrs	r5, r5, #1
 800ee3e:	d00b      	beq.n	800ee58 <__pow5mult+0xa0>
 800ee40:	6820      	ldr	r0, [r4, #0]
 800ee42:	b938      	cbnz	r0, 800ee54 <__pow5mult+0x9c>
 800ee44:	4622      	mov	r2, r4
 800ee46:	4621      	mov	r1, r4
 800ee48:	4638      	mov	r0, r7
 800ee4a:	f7ff ff0b 	bl	800ec64 <__multiply>
 800ee4e:	6020      	str	r0, [r4, #0]
 800ee50:	f8c0 9000 	str.w	r9, [r0]
 800ee54:	4604      	mov	r4, r0
 800ee56:	e7e4      	b.n	800ee22 <__pow5mult+0x6a>
 800ee58:	4630      	mov	r0, r6
 800ee5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee5e:	bf00      	nop
 800ee60:	080101d4 	.word	0x080101d4
 800ee64:	080100fa 	.word	0x080100fa
 800ee68:	0801017a 	.word	0x0801017a

0800ee6c <__lshift>:
 800ee6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	460c      	mov	r4, r1
 800ee72:	6849      	ldr	r1, [r1, #4]
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	4607      	mov	r7, r0
 800ee7e:	4691      	mov	r9, r2
 800ee80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee84:	f108 0601 	add.w	r6, r8, #1
 800ee88:	42b3      	cmp	r3, r6
 800ee8a:	db0b      	blt.n	800eea4 <__lshift+0x38>
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f7ff fddf 	bl	800ea50 <_Balloc>
 800ee92:	4605      	mov	r5, r0
 800ee94:	b948      	cbnz	r0, 800eeaa <__lshift+0x3e>
 800ee96:	4602      	mov	r2, r0
 800ee98:	4b28      	ldr	r3, [pc, #160]	@ (800ef3c <__lshift+0xd0>)
 800ee9a:	4829      	ldr	r0, [pc, #164]	@ (800ef40 <__lshift+0xd4>)
 800ee9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eea0:	f000 fc1c 	bl	800f6dc <__assert_func>
 800eea4:	3101      	adds	r1, #1
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	e7ee      	b.n	800ee88 <__lshift+0x1c>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f100 0114 	add.w	r1, r0, #20
 800eeb0:	f100 0210 	add.w	r2, r0, #16
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	4553      	cmp	r3, sl
 800eeb8:	db33      	blt.n	800ef22 <__lshift+0xb6>
 800eeba:	6920      	ldr	r0, [r4, #16]
 800eebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eec0:	f104 0314 	add.w	r3, r4, #20
 800eec4:	f019 091f 	ands.w	r9, r9, #31
 800eec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eed0:	d02b      	beq.n	800ef2a <__lshift+0xbe>
 800eed2:	f1c9 0e20 	rsb	lr, r9, #32
 800eed6:	468a      	mov	sl, r1
 800eed8:	2200      	movs	r2, #0
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	fa00 f009 	lsl.w	r0, r0, r9
 800eee0:	4310      	orrs	r0, r2
 800eee2:	f84a 0b04 	str.w	r0, [sl], #4
 800eee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeea:	459c      	cmp	ip, r3
 800eeec:	fa22 f20e 	lsr.w	r2, r2, lr
 800eef0:	d8f3      	bhi.n	800eeda <__lshift+0x6e>
 800eef2:	ebac 0304 	sub.w	r3, ip, r4
 800eef6:	3b15      	subs	r3, #21
 800eef8:	f023 0303 	bic.w	r3, r3, #3
 800eefc:	3304      	adds	r3, #4
 800eefe:	f104 0015 	add.w	r0, r4, #21
 800ef02:	4584      	cmp	ip, r0
 800ef04:	bf38      	it	cc
 800ef06:	2304      	movcc	r3, #4
 800ef08:	50ca      	str	r2, [r1, r3]
 800ef0a:	b10a      	cbz	r2, 800ef10 <__lshift+0xa4>
 800ef0c:	f108 0602 	add.w	r6, r8, #2
 800ef10:	3e01      	subs	r6, #1
 800ef12:	4638      	mov	r0, r7
 800ef14:	612e      	str	r6, [r5, #16]
 800ef16:	4621      	mov	r1, r4
 800ef18:	f7ff fdda 	bl	800ead0 <_Bfree>
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef26:	3301      	adds	r3, #1
 800ef28:	e7c5      	b.n	800eeb6 <__lshift+0x4a>
 800ef2a:	3904      	subs	r1, #4
 800ef2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef34:	459c      	cmp	ip, r3
 800ef36:	d8f9      	bhi.n	800ef2c <__lshift+0xc0>
 800ef38:	e7ea      	b.n	800ef10 <__lshift+0xa4>
 800ef3a:	bf00      	nop
 800ef3c:	08010169 	.word	0x08010169
 800ef40:	0801017a 	.word	0x0801017a

0800ef44 <__mcmp>:
 800ef44:	690a      	ldr	r2, [r1, #16]
 800ef46:	4603      	mov	r3, r0
 800ef48:	6900      	ldr	r0, [r0, #16]
 800ef4a:	1a80      	subs	r0, r0, r2
 800ef4c:	b530      	push	{r4, r5, lr}
 800ef4e:	d10e      	bne.n	800ef6e <__mcmp+0x2a>
 800ef50:	3314      	adds	r3, #20
 800ef52:	3114      	adds	r1, #20
 800ef54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef64:	4295      	cmp	r5, r2
 800ef66:	d003      	beq.n	800ef70 <__mcmp+0x2c>
 800ef68:	d205      	bcs.n	800ef76 <__mcmp+0x32>
 800ef6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6e:	bd30      	pop	{r4, r5, pc}
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	d3f3      	bcc.n	800ef5c <__mcmp+0x18>
 800ef74:	e7fb      	b.n	800ef6e <__mcmp+0x2a>
 800ef76:	2001      	movs	r0, #1
 800ef78:	e7f9      	b.n	800ef6e <__mcmp+0x2a>
	...

0800ef7c <__mdiff>:
 800ef7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef80:	4689      	mov	r9, r1
 800ef82:	4606      	mov	r6, r0
 800ef84:	4611      	mov	r1, r2
 800ef86:	4648      	mov	r0, r9
 800ef88:	4614      	mov	r4, r2
 800ef8a:	f7ff ffdb 	bl	800ef44 <__mcmp>
 800ef8e:	1e05      	subs	r5, r0, #0
 800ef90:	d112      	bne.n	800efb8 <__mdiff+0x3c>
 800ef92:	4629      	mov	r1, r5
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff fd5b 	bl	800ea50 <_Balloc>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	b928      	cbnz	r0, 800efaa <__mdiff+0x2e>
 800ef9e:	4b3f      	ldr	r3, [pc, #252]	@ (800f09c <__mdiff+0x120>)
 800efa0:	f240 2137 	movw	r1, #567	@ 0x237
 800efa4:	483e      	ldr	r0, [pc, #248]	@ (800f0a0 <__mdiff+0x124>)
 800efa6:	f000 fb99 	bl	800f6dc <__assert_func>
 800efaa:	2301      	movs	r3, #1
 800efac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efb0:	4610      	mov	r0, r2
 800efb2:	b003      	add	sp, #12
 800efb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb8:	bfbc      	itt	lt
 800efba:	464b      	movlt	r3, r9
 800efbc:	46a1      	movlt	r9, r4
 800efbe:	4630      	mov	r0, r6
 800efc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800efc4:	bfba      	itte	lt
 800efc6:	461c      	movlt	r4, r3
 800efc8:	2501      	movlt	r5, #1
 800efca:	2500      	movge	r5, #0
 800efcc:	f7ff fd40 	bl	800ea50 <_Balloc>
 800efd0:	4602      	mov	r2, r0
 800efd2:	b918      	cbnz	r0, 800efdc <__mdiff+0x60>
 800efd4:	4b31      	ldr	r3, [pc, #196]	@ (800f09c <__mdiff+0x120>)
 800efd6:	f240 2145 	movw	r1, #581	@ 0x245
 800efda:	e7e3      	b.n	800efa4 <__mdiff+0x28>
 800efdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800efe0:	6926      	ldr	r6, [r4, #16]
 800efe2:	60c5      	str	r5, [r0, #12]
 800efe4:	f109 0310 	add.w	r3, r9, #16
 800efe8:	f109 0514 	add.w	r5, r9, #20
 800efec:	f104 0e14 	add.w	lr, r4, #20
 800eff0:	f100 0b14 	add.w	fp, r0, #20
 800eff4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eff8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800effc:	9301      	str	r3, [sp, #4]
 800effe:	46d9      	mov	r9, fp
 800f000:	f04f 0c00 	mov.w	ip, #0
 800f004:	9b01      	ldr	r3, [sp, #4]
 800f006:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f00a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f00e:	9301      	str	r3, [sp, #4]
 800f010:	fa1f f38a 	uxth.w	r3, sl
 800f014:	4619      	mov	r1, r3
 800f016:	b283      	uxth	r3, r0
 800f018:	1acb      	subs	r3, r1, r3
 800f01a:	0c00      	lsrs	r0, r0, #16
 800f01c:	4463      	add	r3, ip
 800f01e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f022:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f026:	b29b      	uxth	r3, r3
 800f028:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f02c:	4576      	cmp	r6, lr
 800f02e:	f849 3b04 	str.w	r3, [r9], #4
 800f032:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f036:	d8e5      	bhi.n	800f004 <__mdiff+0x88>
 800f038:	1b33      	subs	r3, r6, r4
 800f03a:	3b15      	subs	r3, #21
 800f03c:	f023 0303 	bic.w	r3, r3, #3
 800f040:	3415      	adds	r4, #21
 800f042:	3304      	adds	r3, #4
 800f044:	42a6      	cmp	r6, r4
 800f046:	bf38      	it	cc
 800f048:	2304      	movcc	r3, #4
 800f04a:	441d      	add	r5, r3
 800f04c:	445b      	add	r3, fp
 800f04e:	461e      	mov	r6, r3
 800f050:	462c      	mov	r4, r5
 800f052:	4544      	cmp	r4, r8
 800f054:	d30e      	bcc.n	800f074 <__mdiff+0xf8>
 800f056:	f108 0103 	add.w	r1, r8, #3
 800f05a:	1b49      	subs	r1, r1, r5
 800f05c:	f021 0103 	bic.w	r1, r1, #3
 800f060:	3d03      	subs	r5, #3
 800f062:	45a8      	cmp	r8, r5
 800f064:	bf38      	it	cc
 800f066:	2100      	movcc	r1, #0
 800f068:	440b      	add	r3, r1
 800f06a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f06e:	b191      	cbz	r1, 800f096 <__mdiff+0x11a>
 800f070:	6117      	str	r7, [r2, #16]
 800f072:	e79d      	b.n	800efb0 <__mdiff+0x34>
 800f074:	f854 1b04 	ldr.w	r1, [r4], #4
 800f078:	46e6      	mov	lr, ip
 800f07a:	0c08      	lsrs	r0, r1, #16
 800f07c:	fa1c fc81 	uxtah	ip, ip, r1
 800f080:	4471      	add	r1, lr
 800f082:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f086:	b289      	uxth	r1, r1
 800f088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f08c:	f846 1b04 	str.w	r1, [r6], #4
 800f090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f094:	e7dd      	b.n	800f052 <__mdiff+0xd6>
 800f096:	3f01      	subs	r7, #1
 800f098:	e7e7      	b.n	800f06a <__mdiff+0xee>
 800f09a:	bf00      	nop
 800f09c:	08010169 	.word	0x08010169
 800f0a0:	0801017a 	.word	0x0801017a

0800f0a4 <__d2b>:
 800f0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	460f      	mov	r7, r1
 800f0aa:	2101      	movs	r1, #1
 800f0ac:	ec59 8b10 	vmov	r8, r9, d0
 800f0b0:	4616      	mov	r6, r2
 800f0b2:	f7ff fccd 	bl	800ea50 <_Balloc>
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	b930      	cbnz	r0, 800f0c8 <__d2b+0x24>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	4b23      	ldr	r3, [pc, #140]	@ (800f14c <__d2b+0xa8>)
 800f0be:	4824      	ldr	r0, [pc, #144]	@ (800f150 <__d2b+0xac>)
 800f0c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800f0c4:	f000 fb0a 	bl	800f6dc <__assert_func>
 800f0c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f0cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f0d0:	b10d      	cbz	r5, 800f0d6 <__d2b+0x32>
 800f0d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	f1b8 0300 	subs.w	r3, r8, #0
 800f0dc:	d023      	beq.n	800f126 <__d2b+0x82>
 800f0de:	4668      	mov	r0, sp
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	f7ff fd7c 	bl	800ebde <__lo0bits>
 800f0e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0ea:	b1d0      	cbz	r0, 800f122 <__d2b+0x7e>
 800f0ec:	f1c0 0320 	rsb	r3, r0, #32
 800f0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f4:	430b      	orrs	r3, r1
 800f0f6:	40c2      	lsrs	r2, r0
 800f0f8:	6163      	str	r3, [r4, #20]
 800f0fa:	9201      	str	r2, [sp, #4]
 800f0fc:	9b01      	ldr	r3, [sp, #4]
 800f0fe:	61a3      	str	r3, [r4, #24]
 800f100:	2b00      	cmp	r3, #0
 800f102:	bf0c      	ite	eq
 800f104:	2201      	moveq	r2, #1
 800f106:	2202      	movne	r2, #2
 800f108:	6122      	str	r2, [r4, #16]
 800f10a:	b1a5      	cbz	r5, 800f136 <__d2b+0x92>
 800f10c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f110:	4405      	add	r5, r0
 800f112:	603d      	str	r5, [r7, #0]
 800f114:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f118:	6030      	str	r0, [r6, #0]
 800f11a:	4620      	mov	r0, r4
 800f11c:	b003      	add	sp, #12
 800f11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f122:	6161      	str	r1, [r4, #20]
 800f124:	e7ea      	b.n	800f0fc <__d2b+0x58>
 800f126:	a801      	add	r0, sp, #4
 800f128:	f7ff fd59 	bl	800ebde <__lo0bits>
 800f12c:	9b01      	ldr	r3, [sp, #4]
 800f12e:	6163      	str	r3, [r4, #20]
 800f130:	3020      	adds	r0, #32
 800f132:	2201      	movs	r2, #1
 800f134:	e7e8      	b.n	800f108 <__d2b+0x64>
 800f136:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f13a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f13e:	6038      	str	r0, [r7, #0]
 800f140:	6918      	ldr	r0, [r3, #16]
 800f142:	f7ff fd2d 	bl	800eba0 <__hi0bits>
 800f146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f14a:	e7e5      	b.n	800f118 <__d2b+0x74>
 800f14c:	08010169 	.word	0x08010169
 800f150:	0801017a 	.word	0x0801017a

0800f154 <__sfputc_r>:
 800f154:	6893      	ldr	r3, [r2, #8]
 800f156:	3b01      	subs	r3, #1
 800f158:	2b00      	cmp	r3, #0
 800f15a:	b410      	push	{r4}
 800f15c:	6093      	str	r3, [r2, #8]
 800f15e:	da08      	bge.n	800f172 <__sfputc_r+0x1e>
 800f160:	6994      	ldr	r4, [r2, #24]
 800f162:	42a3      	cmp	r3, r4
 800f164:	db01      	blt.n	800f16a <__sfputc_r+0x16>
 800f166:	290a      	cmp	r1, #10
 800f168:	d103      	bne.n	800f172 <__sfputc_r+0x1e>
 800f16a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f16e:	f7fe bc04 	b.w	800d97a <__swbuf_r>
 800f172:	6813      	ldr	r3, [r2, #0]
 800f174:	1c58      	adds	r0, r3, #1
 800f176:	6010      	str	r0, [r2, #0]
 800f178:	7019      	strb	r1, [r3, #0]
 800f17a:	4608      	mov	r0, r1
 800f17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <__sfputs_r>:
 800f182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f184:	4606      	mov	r6, r0
 800f186:	460f      	mov	r7, r1
 800f188:	4614      	mov	r4, r2
 800f18a:	18d5      	adds	r5, r2, r3
 800f18c:	42ac      	cmp	r4, r5
 800f18e:	d101      	bne.n	800f194 <__sfputs_r+0x12>
 800f190:	2000      	movs	r0, #0
 800f192:	e007      	b.n	800f1a4 <__sfputs_r+0x22>
 800f194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f198:	463a      	mov	r2, r7
 800f19a:	4630      	mov	r0, r6
 800f19c:	f7ff ffda 	bl	800f154 <__sfputc_r>
 800f1a0:	1c43      	adds	r3, r0, #1
 800f1a2:	d1f3      	bne.n	800f18c <__sfputs_r+0xa>
 800f1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1a8 <_vfiprintf_r>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	b09d      	sub	sp, #116	@ 0x74
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	4698      	mov	r8, r3
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	b118      	cbz	r0, 800f1c0 <_vfiprintf_r+0x18>
 800f1b8:	6a03      	ldr	r3, [r0, #32]
 800f1ba:	b90b      	cbnz	r3, 800f1c0 <_vfiprintf_r+0x18>
 800f1bc:	f7fe faec 	bl	800d798 <__sinit>
 800f1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1c2:	07d9      	lsls	r1, r3, #31
 800f1c4:	d405      	bmi.n	800f1d2 <_vfiprintf_r+0x2a>
 800f1c6:	89ab      	ldrh	r3, [r5, #12]
 800f1c8:	059a      	lsls	r2, r3, #22
 800f1ca:	d402      	bmi.n	800f1d2 <_vfiprintf_r+0x2a>
 800f1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ce:	f7fe fce6 	bl	800db9e <__retarget_lock_acquire_recursive>
 800f1d2:	89ab      	ldrh	r3, [r5, #12]
 800f1d4:	071b      	lsls	r3, r3, #28
 800f1d6:	d501      	bpl.n	800f1dc <_vfiprintf_r+0x34>
 800f1d8:	692b      	ldr	r3, [r5, #16]
 800f1da:	b99b      	cbnz	r3, 800f204 <_vfiprintf_r+0x5c>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f7fe fc0a 	bl	800d9f8 <__swsetup_r>
 800f1e4:	b170      	cbz	r0, 800f204 <_vfiprintf_r+0x5c>
 800f1e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1e8:	07dc      	lsls	r4, r3, #31
 800f1ea:	d504      	bpl.n	800f1f6 <_vfiprintf_r+0x4e>
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	b01d      	add	sp, #116	@ 0x74
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	0598      	lsls	r0, r3, #22
 800f1fa:	d4f7      	bmi.n	800f1ec <_vfiprintf_r+0x44>
 800f1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1fe:	f7fe fccf 	bl	800dba0 <__retarget_lock_release_recursive>
 800f202:	e7f3      	b.n	800f1ec <_vfiprintf_r+0x44>
 800f204:	2300      	movs	r3, #0
 800f206:	9309      	str	r3, [sp, #36]	@ 0x24
 800f208:	2320      	movs	r3, #32
 800f20a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f20e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f212:	2330      	movs	r3, #48	@ 0x30
 800f214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3c4 <_vfiprintf_r+0x21c>
 800f218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f21c:	f04f 0901 	mov.w	r9, #1
 800f220:	4623      	mov	r3, r4
 800f222:	469a      	mov	sl, r3
 800f224:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f228:	b10a      	cbz	r2, 800f22e <_vfiprintf_r+0x86>
 800f22a:	2a25      	cmp	r2, #37	@ 0x25
 800f22c:	d1f9      	bne.n	800f222 <_vfiprintf_r+0x7a>
 800f22e:	ebba 0b04 	subs.w	fp, sl, r4
 800f232:	d00b      	beq.n	800f24c <_vfiprintf_r+0xa4>
 800f234:	465b      	mov	r3, fp
 800f236:	4622      	mov	r2, r4
 800f238:	4629      	mov	r1, r5
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ffa1 	bl	800f182 <__sfputs_r>
 800f240:	3001      	adds	r0, #1
 800f242:	f000 80a7 	beq.w	800f394 <_vfiprintf_r+0x1ec>
 800f246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f248:	445a      	add	r2, fp
 800f24a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f24c:	f89a 3000 	ldrb.w	r3, [sl]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 809f 	beq.w	800f394 <_vfiprintf_r+0x1ec>
 800f256:	2300      	movs	r3, #0
 800f258:	f04f 32ff 	mov.w	r2, #4294967295
 800f25c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f260:	f10a 0a01 	add.w	sl, sl, #1
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f26c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f26e:	4654      	mov	r4, sl
 800f270:	2205      	movs	r2, #5
 800f272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f276:	4853      	ldr	r0, [pc, #332]	@ (800f3c4 <_vfiprintf_r+0x21c>)
 800f278:	f7f0 ffc2 	bl	8000200 <memchr>
 800f27c:	9a04      	ldr	r2, [sp, #16]
 800f27e:	b9d8      	cbnz	r0, 800f2b8 <_vfiprintf_r+0x110>
 800f280:	06d1      	lsls	r1, r2, #27
 800f282:	bf44      	itt	mi
 800f284:	2320      	movmi	r3, #32
 800f286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f28a:	0713      	lsls	r3, r2, #28
 800f28c:	bf44      	itt	mi
 800f28e:	232b      	movmi	r3, #43	@ 0x2b
 800f290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f294:	f89a 3000 	ldrb.w	r3, [sl]
 800f298:	2b2a      	cmp	r3, #42	@ 0x2a
 800f29a:	d015      	beq.n	800f2c8 <_vfiprintf_r+0x120>
 800f29c:	9a07      	ldr	r2, [sp, #28]
 800f29e:	4654      	mov	r4, sl
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	f04f 0c0a 	mov.w	ip, #10
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ac:	3b30      	subs	r3, #48	@ 0x30
 800f2ae:	2b09      	cmp	r3, #9
 800f2b0:	d94b      	bls.n	800f34a <_vfiprintf_r+0x1a2>
 800f2b2:	b1b0      	cbz	r0, 800f2e2 <_vfiprintf_r+0x13a>
 800f2b4:	9207      	str	r2, [sp, #28]
 800f2b6:	e014      	b.n	800f2e2 <_vfiprintf_r+0x13a>
 800f2b8:	eba0 0308 	sub.w	r3, r0, r8
 800f2bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	9304      	str	r3, [sp, #16]
 800f2c4:	46a2      	mov	sl, r4
 800f2c6:	e7d2      	b.n	800f26e <_vfiprintf_r+0xc6>
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	1d19      	adds	r1, r3, #4
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	9103      	str	r1, [sp, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfbb      	ittet	lt
 800f2d4:	425b      	neglt	r3, r3
 800f2d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2da:	9307      	strge	r3, [sp, #28]
 800f2dc:	9307      	strlt	r3, [sp, #28]
 800f2de:	bfb8      	it	lt
 800f2e0:	9204      	strlt	r2, [sp, #16]
 800f2e2:	7823      	ldrb	r3, [r4, #0]
 800f2e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2e6:	d10a      	bne.n	800f2fe <_vfiprintf_r+0x156>
 800f2e8:	7863      	ldrb	r3, [r4, #1]
 800f2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ec:	d132      	bne.n	800f354 <_vfiprintf_r+0x1ac>
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	1d1a      	adds	r2, r3, #4
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	9203      	str	r2, [sp, #12]
 800f2f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2fa:	3402      	adds	r4, #2
 800f2fc:	9305      	str	r3, [sp, #20]
 800f2fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3d4 <_vfiprintf_r+0x22c>
 800f302:	7821      	ldrb	r1, [r4, #0]
 800f304:	2203      	movs	r2, #3
 800f306:	4650      	mov	r0, sl
 800f308:	f7f0 ff7a 	bl	8000200 <memchr>
 800f30c:	b138      	cbz	r0, 800f31e <_vfiprintf_r+0x176>
 800f30e:	9b04      	ldr	r3, [sp, #16]
 800f310:	eba0 000a 	sub.w	r0, r0, sl
 800f314:	2240      	movs	r2, #64	@ 0x40
 800f316:	4082      	lsls	r2, r0
 800f318:	4313      	orrs	r3, r2
 800f31a:	3401      	adds	r4, #1
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f322:	4829      	ldr	r0, [pc, #164]	@ (800f3c8 <_vfiprintf_r+0x220>)
 800f324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f328:	2206      	movs	r2, #6
 800f32a:	f7f0 ff69 	bl	8000200 <memchr>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d03f      	beq.n	800f3b2 <_vfiprintf_r+0x20a>
 800f332:	4b26      	ldr	r3, [pc, #152]	@ (800f3cc <_vfiprintf_r+0x224>)
 800f334:	bb1b      	cbnz	r3, 800f37e <_vfiprintf_r+0x1d6>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	3307      	adds	r3, #7
 800f33a:	f023 0307 	bic.w	r3, r3, #7
 800f33e:	3308      	adds	r3, #8
 800f340:	9303      	str	r3, [sp, #12]
 800f342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f344:	443b      	add	r3, r7
 800f346:	9309      	str	r3, [sp, #36]	@ 0x24
 800f348:	e76a      	b.n	800f220 <_vfiprintf_r+0x78>
 800f34a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f34e:	460c      	mov	r4, r1
 800f350:	2001      	movs	r0, #1
 800f352:	e7a8      	b.n	800f2a6 <_vfiprintf_r+0xfe>
 800f354:	2300      	movs	r3, #0
 800f356:	3401      	adds	r4, #1
 800f358:	9305      	str	r3, [sp, #20]
 800f35a:	4619      	mov	r1, r3
 800f35c:	f04f 0c0a 	mov.w	ip, #10
 800f360:	4620      	mov	r0, r4
 800f362:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f366:	3a30      	subs	r2, #48	@ 0x30
 800f368:	2a09      	cmp	r2, #9
 800f36a:	d903      	bls.n	800f374 <_vfiprintf_r+0x1cc>
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d0c6      	beq.n	800f2fe <_vfiprintf_r+0x156>
 800f370:	9105      	str	r1, [sp, #20]
 800f372:	e7c4      	b.n	800f2fe <_vfiprintf_r+0x156>
 800f374:	fb0c 2101 	mla	r1, ip, r1, r2
 800f378:	4604      	mov	r4, r0
 800f37a:	2301      	movs	r3, #1
 800f37c:	e7f0      	b.n	800f360 <_vfiprintf_r+0x1b8>
 800f37e:	ab03      	add	r3, sp, #12
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	462a      	mov	r2, r5
 800f384:	4b12      	ldr	r3, [pc, #72]	@ (800f3d0 <_vfiprintf_r+0x228>)
 800f386:	a904      	add	r1, sp, #16
 800f388:	4630      	mov	r0, r6
 800f38a:	f7fd fdc1 	bl	800cf10 <_printf_float>
 800f38e:	4607      	mov	r7, r0
 800f390:	1c78      	adds	r0, r7, #1
 800f392:	d1d6      	bne.n	800f342 <_vfiprintf_r+0x19a>
 800f394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f396:	07d9      	lsls	r1, r3, #31
 800f398:	d405      	bmi.n	800f3a6 <_vfiprintf_r+0x1fe>
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	059a      	lsls	r2, r3, #22
 800f39e:	d402      	bmi.n	800f3a6 <_vfiprintf_r+0x1fe>
 800f3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3a2:	f7fe fbfd 	bl	800dba0 <__retarget_lock_release_recursive>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	065b      	lsls	r3, r3, #25
 800f3aa:	f53f af1f 	bmi.w	800f1ec <_vfiprintf_r+0x44>
 800f3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3b0:	e71e      	b.n	800f1f0 <_vfiprintf_r+0x48>
 800f3b2:	ab03      	add	r3, sp, #12
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	462a      	mov	r2, r5
 800f3b8:	4b05      	ldr	r3, [pc, #20]	@ (800f3d0 <_vfiprintf_r+0x228>)
 800f3ba:	a904      	add	r1, sp, #16
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f7fe f83f 	bl	800d440 <_printf_i>
 800f3c2:	e7e4      	b.n	800f38e <_vfiprintf_r+0x1e6>
 800f3c4:	080102d0 	.word	0x080102d0
 800f3c8:	080102da 	.word	0x080102da
 800f3cc:	0800cf11 	.word	0x0800cf11
 800f3d0:	0800f183 	.word	0x0800f183
 800f3d4:	080102d6 	.word	0x080102d6

0800f3d8 <__sflush_r>:
 800f3d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e0:	0716      	lsls	r6, r2, #28
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	d454      	bmi.n	800f492 <__sflush_r+0xba>
 800f3e8:	684b      	ldr	r3, [r1, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	dc02      	bgt.n	800f3f4 <__sflush_r+0x1c>
 800f3ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dd48      	ble.n	800f486 <__sflush_r+0xae>
 800f3f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3f6:	2e00      	cmp	r6, #0
 800f3f8:	d045      	beq.n	800f486 <__sflush_r+0xae>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f400:	682f      	ldr	r7, [r5, #0]
 800f402:	6a21      	ldr	r1, [r4, #32]
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	d030      	beq.n	800f46a <__sflush_r+0x92>
 800f408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	0759      	lsls	r1, r3, #29
 800f40e:	d505      	bpl.n	800f41c <__sflush_r+0x44>
 800f410:	6863      	ldr	r3, [r4, #4]
 800f412:	1ad2      	subs	r2, r2, r3
 800f414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f416:	b10b      	cbz	r3, 800f41c <__sflush_r+0x44>
 800f418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f41a:	1ad2      	subs	r2, r2, r3
 800f41c:	2300      	movs	r3, #0
 800f41e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f420:	6a21      	ldr	r1, [r4, #32]
 800f422:	4628      	mov	r0, r5
 800f424:	47b0      	blx	r6
 800f426:	1c43      	adds	r3, r0, #1
 800f428:	89a3      	ldrh	r3, [r4, #12]
 800f42a:	d106      	bne.n	800f43a <__sflush_r+0x62>
 800f42c:	6829      	ldr	r1, [r5, #0]
 800f42e:	291d      	cmp	r1, #29
 800f430:	d82b      	bhi.n	800f48a <__sflush_r+0xb2>
 800f432:	4a2a      	ldr	r2, [pc, #168]	@ (800f4dc <__sflush_r+0x104>)
 800f434:	410a      	asrs	r2, r1
 800f436:	07d6      	lsls	r6, r2, #31
 800f438:	d427      	bmi.n	800f48a <__sflush_r+0xb2>
 800f43a:	2200      	movs	r2, #0
 800f43c:	6062      	str	r2, [r4, #4]
 800f43e:	04d9      	lsls	r1, r3, #19
 800f440:	6922      	ldr	r2, [r4, #16]
 800f442:	6022      	str	r2, [r4, #0]
 800f444:	d504      	bpl.n	800f450 <__sflush_r+0x78>
 800f446:	1c42      	adds	r2, r0, #1
 800f448:	d101      	bne.n	800f44e <__sflush_r+0x76>
 800f44a:	682b      	ldr	r3, [r5, #0]
 800f44c:	b903      	cbnz	r3, 800f450 <__sflush_r+0x78>
 800f44e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f452:	602f      	str	r7, [r5, #0]
 800f454:	b1b9      	cbz	r1, 800f486 <__sflush_r+0xae>
 800f456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f45a:	4299      	cmp	r1, r3
 800f45c:	d002      	beq.n	800f464 <__sflush_r+0x8c>
 800f45e:	4628      	mov	r0, r5
 800f460:	f7ff f9f6 	bl	800e850 <_free_r>
 800f464:	2300      	movs	r3, #0
 800f466:	6363      	str	r3, [r4, #52]	@ 0x34
 800f468:	e00d      	b.n	800f486 <__sflush_r+0xae>
 800f46a:	2301      	movs	r3, #1
 800f46c:	4628      	mov	r0, r5
 800f46e:	47b0      	blx	r6
 800f470:	4602      	mov	r2, r0
 800f472:	1c50      	adds	r0, r2, #1
 800f474:	d1c9      	bne.n	800f40a <__sflush_r+0x32>
 800f476:	682b      	ldr	r3, [r5, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d0c6      	beq.n	800f40a <__sflush_r+0x32>
 800f47c:	2b1d      	cmp	r3, #29
 800f47e:	d001      	beq.n	800f484 <__sflush_r+0xac>
 800f480:	2b16      	cmp	r3, #22
 800f482:	d11e      	bne.n	800f4c2 <__sflush_r+0xea>
 800f484:	602f      	str	r7, [r5, #0]
 800f486:	2000      	movs	r0, #0
 800f488:	e022      	b.n	800f4d0 <__sflush_r+0xf8>
 800f48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f48e:	b21b      	sxth	r3, r3
 800f490:	e01b      	b.n	800f4ca <__sflush_r+0xf2>
 800f492:	690f      	ldr	r7, [r1, #16]
 800f494:	2f00      	cmp	r7, #0
 800f496:	d0f6      	beq.n	800f486 <__sflush_r+0xae>
 800f498:	0793      	lsls	r3, r2, #30
 800f49a:	680e      	ldr	r6, [r1, #0]
 800f49c:	bf08      	it	eq
 800f49e:	694b      	ldreq	r3, [r1, #20]
 800f4a0:	600f      	str	r7, [r1, #0]
 800f4a2:	bf18      	it	ne
 800f4a4:	2300      	movne	r3, #0
 800f4a6:	eba6 0807 	sub.w	r8, r6, r7
 800f4aa:	608b      	str	r3, [r1, #8]
 800f4ac:	f1b8 0f00 	cmp.w	r8, #0
 800f4b0:	dde9      	ble.n	800f486 <__sflush_r+0xae>
 800f4b2:	6a21      	ldr	r1, [r4, #32]
 800f4b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f4b6:	4643      	mov	r3, r8
 800f4b8:	463a      	mov	r2, r7
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	47b0      	blx	r6
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	dc08      	bgt.n	800f4d4 <__sflush_r+0xfc>
 800f4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ca:	81a3      	strh	r3, [r4, #12]
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d4:	4407      	add	r7, r0
 800f4d6:	eba8 0800 	sub.w	r8, r8, r0
 800f4da:	e7e7      	b.n	800f4ac <__sflush_r+0xd4>
 800f4dc:	dfbffffe 	.word	0xdfbffffe

0800f4e0 <_fflush_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	690b      	ldr	r3, [r1, #16]
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	b913      	cbnz	r3, 800f4f0 <_fflush_r+0x10>
 800f4ea:	2500      	movs	r5, #0
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
 800f4f0:	b118      	cbz	r0, 800f4fa <_fflush_r+0x1a>
 800f4f2:	6a03      	ldr	r3, [r0, #32]
 800f4f4:	b90b      	cbnz	r3, 800f4fa <_fflush_r+0x1a>
 800f4f6:	f7fe f94f 	bl	800d798 <__sinit>
 800f4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d0f3      	beq.n	800f4ea <_fflush_r+0xa>
 800f502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f504:	07d0      	lsls	r0, r2, #31
 800f506:	d404      	bmi.n	800f512 <_fflush_r+0x32>
 800f508:	0599      	lsls	r1, r3, #22
 800f50a:	d402      	bmi.n	800f512 <_fflush_r+0x32>
 800f50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f50e:	f7fe fb46 	bl	800db9e <__retarget_lock_acquire_recursive>
 800f512:	4628      	mov	r0, r5
 800f514:	4621      	mov	r1, r4
 800f516:	f7ff ff5f 	bl	800f3d8 <__sflush_r>
 800f51a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f51c:	07da      	lsls	r2, r3, #31
 800f51e:	4605      	mov	r5, r0
 800f520:	d4e4      	bmi.n	800f4ec <_fflush_r+0xc>
 800f522:	89a3      	ldrh	r3, [r4, #12]
 800f524:	059b      	lsls	r3, r3, #22
 800f526:	d4e1      	bmi.n	800f4ec <_fflush_r+0xc>
 800f528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f52a:	f7fe fb39 	bl	800dba0 <__retarget_lock_release_recursive>
 800f52e:	e7dd      	b.n	800f4ec <_fflush_r+0xc>

0800f530 <__swhatbuf_r>:
 800f530:	b570      	push	{r4, r5, r6, lr}
 800f532:	460c      	mov	r4, r1
 800f534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f538:	2900      	cmp	r1, #0
 800f53a:	b096      	sub	sp, #88	@ 0x58
 800f53c:	4615      	mov	r5, r2
 800f53e:	461e      	mov	r6, r3
 800f540:	da0d      	bge.n	800f55e <__swhatbuf_r+0x2e>
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f548:	f04f 0100 	mov.w	r1, #0
 800f54c:	bf14      	ite	ne
 800f54e:	2340      	movne	r3, #64	@ 0x40
 800f550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f554:	2000      	movs	r0, #0
 800f556:	6031      	str	r1, [r6, #0]
 800f558:	602b      	str	r3, [r5, #0]
 800f55a:	b016      	add	sp, #88	@ 0x58
 800f55c:	bd70      	pop	{r4, r5, r6, pc}
 800f55e:	466a      	mov	r2, sp
 800f560:	f000 f87c 	bl	800f65c <_fstat_r>
 800f564:	2800      	cmp	r0, #0
 800f566:	dbec      	blt.n	800f542 <__swhatbuf_r+0x12>
 800f568:	9901      	ldr	r1, [sp, #4]
 800f56a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f56e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f572:	4259      	negs	r1, r3
 800f574:	4159      	adcs	r1, r3
 800f576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f57a:	e7eb      	b.n	800f554 <__swhatbuf_r+0x24>

0800f57c <__smakebuf_r>:
 800f57c:	898b      	ldrh	r3, [r1, #12]
 800f57e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f580:	079d      	lsls	r5, r3, #30
 800f582:	4606      	mov	r6, r0
 800f584:	460c      	mov	r4, r1
 800f586:	d507      	bpl.n	800f598 <__smakebuf_r+0x1c>
 800f588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	6123      	str	r3, [r4, #16]
 800f590:	2301      	movs	r3, #1
 800f592:	6163      	str	r3, [r4, #20]
 800f594:	b003      	add	sp, #12
 800f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f598:	ab01      	add	r3, sp, #4
 800f59a:	466a      	mov	r2, sp
 800f59c:	f7ff ffc8 	bl	800f530 <__swhatbuf_r>
 800f5a0:	9f00      	ldr	r7, [sp, #0]
 800f5a2:	4605      	mov	r5, r0
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f7ff f9c6 	bl	800e938 <_malloc_r>
 800f5ac:	b948      	cbnz	r0, 800f5c2 <__smakebuf_r+0x46>
 800f5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5b2:	059a      	lsls	r2, r3, #22
 800f5b4:	d4ee      	bmi.n	800f594 <__smakebuf_r+0x18>
 800f5b6:	f023 0303 	bic.w	r3, r3, #3
 800f5ba:	f043 0302 	orr.w	r3, r3, #2
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	e7e2      	b.n	800f588 <__smakebuf_r+0xc>
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	6020      	str	r0, [r4, #0]
 800f5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5ca:	81a3      	strh	r3, [r4, #12]
 800f5cc:	9b01      	ldr	r3, [sp, #4]
 800f5ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f5d2:	b15b      	cbz	r3, 800f5ec <__smakebuf_r+0x70>
 800f5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f000 f851 	bl	800f680 <_isatty_r>
 800f5de:	b128      	cbz	r0, 800f5ec <__smakebuf_r+0x70>
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f023 0303 	bic.w	r3, r3, #3
 800f5e6:	f043 0301 	orr.w	r3, r3, #1
 800f5ea:	81a3      	strh	r3, [r4, #12]
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	431d      	orrs	r5, r3
 800f5f0:	81a5      	strh	r5, [r4, #12]
 800f5f2:	e7cf      	b.n	800f594 <__smakebuf_r+0x18>

0800f5f4 <_putc_r>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	b118      	cbz	r0, 800f606 <_putc_r+0x12>
 800f5fe:	6a03      	ldr	r3, [r0, #32]
 800f600:	b90b      	cbnz	r3, 800f606 <_putc_r+0x12>
 800f602:	f7fe f8c9 	bl	800d798 <__sinit>
 800f606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f608:	07d8      	lsls	r0, r3, #31
 800f60a:	d405      	bmi.n	800f618 <_putc_r+0x24>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	0599      	lsls	r1, r3, #22
 800f610:	d402      	bmi.n	800f618 <_putc_r+0x24>
 800f612:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f614:	f7fe fac3 	bl	800db9e <__retarget_lock_acquire_recursive>
 800f618:	68a3      	ldr	r3, [r4, #8]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	60a3      	str	r3, [r4, #8]
 800f620:	da05      	bge.n	800f62e <_putc_r+0x3a>
 800f622:	69a2      	ldr	r2, [r4, #24]
 800f624:	4293      	cmp	r3, r2
 800f626:	db12      	blt.n	800f64e <_putc_r+0x5a>
 800f628:	b2eb      	uxtb	r3, r5
 800f62a:	2b0a      	cmp	r3, #10
 800f62c:	d00f      	beq.n	800f64e <_putc_r+0x5a>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	6022      	str	r2, [r4, #0]
 800f634:	701d      	strb	r5, [r3, #0]
 800f636:	b2ed      	uxtb	r5, r5
 800f638:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f63a:	07da      	lsls	r2, r3, #31
 800f63c:	d405      	bmi.n	800f64a <_putc_r+0x56>
 800f63e:	89a3      	ldrh	r3, [r4, #12]
 800f640:	059b      	lsls	r3, r3, #22
 800f642:	d402      	bmi.n	800f64a <_putc_r+0x56>
 800f644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f646:	f7fe faab 	bl	800dba0 <__retarget_lock_release_recursive>
 800f64a:	4628      	mov	r0, r5
 800f64c:	bd70      	pop	{r4, r5, r6, pc}
 800f64e:	4629      	mov	r1, r5
 800f650:	4622      	mov	r2, r4
 800f652:	4630      	mov	r0, r6
 800f654:	f7fe f991 	bl	800d97a <__swbuf_r>
 800f658:	4605      	mov	r5, r0
 800f65a:	e7ed      	b.n	800f638 <_putc_r+0x44>

0800f65c <_fstat_r>:
 800f65c:	b538      	push	{r3, r4, r5, lr}
 800f65e:	4d07      	ldr	r5, [pc, #28]	@ (800f67c <_fstat_r+0x20>)
 800f660:	2300      	movs	r3, #0
 800f662:	4604      	mov	r4, r0
 800f664:	4608      	mov	r0, r1
 800f666:	4611      	mov	r1, r2
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	f7f4 f8bd 	bl	80037e8 <_fstat>
 800f66e:	1c43      	adds	r3, r0, #1
 800f670:	d102      	bne.n	800f678 <_fstat_r+0x1c>
 800f672:	682b      	ldr	r3, [r5, #0]
 800f674:	b103      	cbz	r3, 800f678 <_fstat_r+0x1c>
 800f676:	6023      	str	r3, [r4, #0]
 800f678:	bd38      	pop	{r3, r4, r5, pc}
 800f67a:	bf00      	nop
 800f67c:	20000c5c 	.word	0x20000c5c

0800f680 <_isatty_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4d06      	ldr	r5, [pc, #24]	@ (800f69c <_isatty_r+0x1c>)
 800f684:	2300      	movs	r3, #0
 800f686:	4604      	mov	r4, r0
 800f688:	4608      	mov	r0, r1
 800f68a:	602b      	str	r3, [r5, #0]
 800f68c:	f7f4 f8bc 	bl	8003808 <_isatty>
 800f690:	1c43      	adds	r3, r0, #1
 800f692:	d102      	bne.n	800f69a <_isatty_r+0x1a>
 800f694:	682b      	ldr	r3, [r5, #0]
 800f696:	b103      	cbz	r3, 800f69a <_isatty_r+0x1a>
 800f698:	6023      	str	r3, [r4, #0]
 800f69a:	bd38      	pop	{r3, r4, r5, pc}
 800f69c:	20000c5c 	.word	0x20000c5c

0800f6a0 <_sbrk_r>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	4d06      	ldr	r5, [pc, #24]	@ (800f6bc <_sbrk_r+0x1c>)
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	602b      	str	r3, [r5, #0]
 800f6ac:	f7f4 f8c4 	bl	8003838 <_sbrk>
 800f6b0:	1c43      	adds	r3, r0, #1
 800f6b2:	d102      	bne.n	800f6ba <_sbrk_r+0x1a>
 800f6b4:	682b      	ldr	r3, [r5, #0]
 800f6b6:	b103      	cbz	r3, 800f6ba <_sbrk_r+0x1a>
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
 800f6bc:	20000c5c 	.word	0x20000c5c

0800f6c0 <memcpy>:
 800f6c0:	440a      	add	r2, r1
 800f6c2:	4291      	cmp	r1, r2
 800f6c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6c8:	d100      	bne.n	800f6cc <memcpy+0xc>
 800f6ca:	4770      	bx	lr
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6d6:	4291      	cmp	r1, r2
 800f6d8:	d1f9      	bne.n	800f6ce <memcpy+0xe>
 800f6da:	bd10      	pop	{r4, pc}

0800f6dc <__assert_func>:
 800f6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6de:	4614      	mov	r4, r2
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4b09      	ldr	r3, [pc, #36]	@ (800f708 <__assert_func+0x2c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	68d8      	ldr	r0, [r3, #12]
 800f6ea:	b954      	cbnz	r4, 800f702 <__assert_func+0x26>
 800f6ec:	4b07      	ldr	r3, [pc, #28]	@ (800f70c <__assert_func+0x30>)
 800f6ee:	461c      	mov	r4, r3
 800f6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6f4:	9100      	str	r1, [sp, #0]
 800f6f6:	462b      	mov	r3, r5
 800f6f8:	4905      	ldr	r1, [pc, #20]	@ (800f710 <__assert_func+0x34>)
 800f6fa:	f000 f841 	bl	800f780 <fiprintf>
 800f6fe:	f000 f851 	bl	800f7a4 <abort>
 800f702:	4b04      	ldr	r3, [pc, #16]	@ (800f714 <__assert_func+0x38>)
 800f704:	e7f4      	b.n	800f6f0 <__assert_func+0x14>
 800f706:	bf00      	nop
 800f708:	20000080 	.word	0x20000080
 800f70c:	08010326 	.word	0x08010326
 800f710:	080102f8 	.word	0x080102f8
 800f714:	080102eb 	.word	0x080102eb

0800f718 <_calloc_r>:
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	fba1 5402 	umull	r5, r4, r1, r2
 800f71e:	b93c      	cbnz	r4, 800f730 <_calloc_r+0x18>
 800f720:	4629      	mov	r1, r5
 800f722:	f7ff f909 	bl	800e938 <_malloc_r>
 800f726:	4606      	mov	r6, r0
 800f728:	b928      	cbnz	r0, 800f736 <_calloc_r+0x1e>
 800f72a:	2600      	movs	r6, #0
 800f72c:	4630      	mov	r0, r6
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	220c      	movs	r2, #12
 800f732:	6002      	str	r2, [r0, #0]
 800f734:	e7f9      	b.n	800f72a <_calloc_r+0x12>
 800f736:	462a      	mov	r2, r5
 800f738:	4621      	mov	r1, r4
 800f73a:	f7fe f9b3 	bl	800daa4 <memset>
 800f73e:	e7f5      	b.n	800f72c <_calloc_r+0x14>

0800f740 <__ascii_mbtowc>:
 800f740:	b082      	sub	sp, #8
 800f742:	b901      	cbnz	r1, 800f746 <__ascii_mbtowc+0x6>
 800f744:	a901      	add	r1, sp, #4
 800f746:	b142      	cbz	r2, 800f75a <__ascii_mbtowc+0x1a>
 800f748:	b14b      	cbz	r3, 800f75e <__ascii_mbtowc+0x1e>
 800f74a:	7813      	ldrb	r3, [r2, #0]
 800f74c:	600b      	str	r3, [r1, #0]
 800f74e:	7812      	ldrb	r2, [r2, #0]
 800f750:	1e10      	subs	r0, r2, #0
 800f752:	bf18      	it	ne
 800f754:	2001      	movne	r0, #1
 800f756:	b002      	add	sp, #8
 800f758:	4770      	bx	lr
 800f75a:	4610      	mov	r0, r2
 800f75c:	e7fb      	b.n	800f756 <__ascii_mbtowc+0x16>
 800f75e:	f06f 0001 	mvn.w	r0, #1
 800f762:	e7f8      	b.n	800f756 <__ascii_mbtowc+0x16>

0800f764 <__ascii_wctomb>:
 800f764:	4603      	mov	r3, r0
 800f766:	4608      	mov	r0, r1
 800f768:	b141      	cbz	r1, 800f77c <__ascii_wctomb+0x18>
 800f76a:	2aff      	cmp	r2, #255	@ 0xff
 800f76c:	d904      	bls.n	800f778 <__ascii_wctomb+0x14>
 800f76e:	228a      	movs	r2, #138	@ 0x8a
 800f770:	601a      	str	r2, [r3, #0]
 800f772:	f04f 30ff 	mov.w	r0, #4294967295
 800f776:	4770      	bx	lr
 800f778:	700a      	strb	r2, [r1, #0]
 800f77a:	2001      	movs	r0, #1
 800f77c:	4770      	bx	lr
	...

0800f780 <fiprintf>:
 800f780:	b40e      	push	{r1, r2, r3}
 800f782:	b503      	push	{r0, r1, lr}
 800f784:	4601      	mov	r1, r0
 800f786:	ab03      	add	r3, sp, #12
 800f788:	4805      	ldr	r0, [pc, #20]	@ (800f7a0 <fiprintf+0x20>)
 800f78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f78e:	6800      	ldr	r0, [r0, #0]
 800f790:	9301      	str	r3, [sp, #4]
 800f792:	f7ff fd09 	bl	800f1a8 <_vfiprintf_r>
 800f796:	b002      	add	sp, #8
 800f798:	f85d eb04 	ldr.w	lr, [sp], #4
 800f79c:	b003      	add	sp, #12
 800f79e:	4770      	bx	lr
 800f7a0:	20000080 	.word	0x20000080

0800f7a4 <abort>:
 800f7a4:	b508      	push	{r3, lr}
 800f7a6:	2006      	movs	r0, #6
 800f7a8:	f000 f82c 	bl	800f804 <raise>
 800f7ac:	2001      	movs	r0, #1
 800f7ae:	f7f3 ffcb 	bl	8003748 <_exit>

0800f7b2 <_raise_r>:
 800f7b2:	291f      	cmp	r1, #31
 800f7b4:	b538      	push	{r3, r4, r5, lr}
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	d904      	bls.n	800f7c6 <_raise_r+0x14>
 800f7bc:	2316      	movs	r3, #22
 800f7be:	6003      	str	r3, [r0, #0]
 800f7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c4:	bd38      	pop	{r3, r4, r5, pc}
 800f7c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f7c8:	b112      	cbz	r2, 800f7d0 <_raise_r+0x1e>
 800f7ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7ce:	b94b      	cbnz	r3, 800f7e4 <_raise_r+0x32>
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f000 f831 	bl	800f838 <_getpid_r>
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	4601      	mov	r1, r0
 800f7da:	4628      	mov	r0, r5
 800f7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7e0:	f000 b818 	b.w	800f814 <_kill_r>
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d00a      	beq.n	800f7fe <_raise_r+0x4c>
 800f7e8:	1c59      	adds	r1, r3, #1
 800f7ea:	d103      	bne.n	800f7f4 <_raise_r+0x42>
 800f7ec:	2316      	movs	r3, #22
 800f7ee:	6003      	str	r3, [r0, #0]
 800f7f0:	2001      	movs	r0, #1
 800f7f2:	e7e7      	b.n	800f7c4 <_raise_r+0x12>
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	4798      	blx	r3
 800f7fe:	2000      	movs	r0, #0
 800f800:	e7e0      	b.n	800f7c4 <_raise_r+0x12>
	...

0800f804 <raise>:
 800f804:	4b02      	ldr	r3, [pc, #8]	@ (800f810 <raise+0xc>)
 800f806:	4601      	mov	r1, r0
 800f808:	6818      	ldr	r0, [r3, #0]
 800f80a:	f7ff bfd2 	b.w	800f7b2 <_raise_r>
 800f80e:	bf00      	nop
 800f810:	20000080 	.word	0x20000080

0800f814 <_kill_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4d07      	ldr	r5, [pc, #28]	@ (800f834 <_kill_r+0x20>)
 800f818:	2300      	movs	r3, #0
 800f81a:	4604      	mov	r4, r0
 800f81c:	4608      	mov	r0, r1
 800f81e:	4611      	mov	r1, r2
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	f7f3 ff81 	bl	8003728 <_kill>
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	d102      	bne.n	800f830 <_kill_r+0x1c>
 800f82a:	682b      	ldr	r3, [r5, #0]
 800f82c:	b103      	cbz	r3, 800f830 <_kill_r+0x1c>
 800f82e:	6023      	str	r3, [r4, #0]
 800f830:	bd38      	pop	{r3, r4, r5, pc}
 800f832:	bf00      	nop
 800f834:	20000c5c 	.word	0x20000c5c

0800f838 <_getpid_r>:
 800f838:	f7f3 bf6e 	b.w	8003718 <_getpid>

0800f83c <_init>:
 800f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83e:	bf00      	nop
 800f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f842:	bc08      	pop	{r3}
 800f844:	469e      	mov	lr, r3
 800f846:	4770      	bx	lr

0800f848 <_fini>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	bf00      	nop
 800f84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84e:	bc08      	pop	{r3}
 800f850:	469e      	mov	lr, r3
 800f852:	4770      	bx	lr
